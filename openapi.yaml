openapi: 3.1.0
info:
  title: Konnect API - Go SDK
  version: 0.0.1
  description: The Konnect platform API
  contact:
    name: Kong Inc
    url: https://konghq.com
    email: support@konghq.com
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
servers:
  - url: https://global.api.konghq.com
  - url: https://us.api.konghq.com
  - url: https://eu.api.konghq.com
  - url: https://au.api.konghq.com
paths:
  /v0/serverless-cloud-gateways:
    get:
      operationId: list-serverless-cloud-gateway
      summary: List Serverless cloud gateways
      description: Returns an array of serverless cloud gateways objects.
      responses:
        '200':
          $ref: '#/components/responses/ListServerlessCloudGatewaysResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
      tags:
        - Serverless Cloud Gateways
      parameters:
        - $ref: '#/components/parameters/PageSize'
        - $ref: '#/components/parameters/PageNumber'
        - $ref: '#/components/parameters/FilterSCGWByLabels'
      servers:
        - url: https://global.api.konghq.com/
    post:
      x-speakeasy-entity-operation: ServerlessCloudGateway#create
      operationId: create-serverless-cloud-gateway
      summary: Create a new serverless cloud gateway
      description: Create a new serverless cloud gateway
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateServerlessCloudGatewayRequest'
      tags:
        - Serverless Cloud Gateways
      responses:
        '201':
          $ref: '#/components/responses/CreateServerlessCloudGatewayResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
      servers:
        - url: https://global.api.konghq.com/
  /v0/serverless-cloud-gateways/{controlPlaneId}:
    parameters:
      - name: controlPlaneId
        in: path
        required: true
        description: Id of the Serverless Cloud Gateway control plane
        example: bf138ba2-c9b1-4229-b268-04d9d8a6410b
        schema:
          type: string
          format: uuid
        x-speakeasy-match: control_plane.id
    get:
      x-speakeasy-entity-operation: ServerlessCloudGateway#read
      operationId: get-serverless-cloud-gateway
      summary: Get the serverless cloud gateway
      description: Get the serverless cloud gateway
      tags:
        - Serverless Cloud Gateways
      responses:
        '200':
          $ref: '#/components/responses/RetrieveServerlessCloudGatewayResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      servers:
        - url: https://global.api.konghq.com/
    delete:
      x-speakeasy-entity-operation: ServerlessCloudGateway#delete
      operationId: delete-serverless-cloud-gateway
      summary: Delete the serverless cloud gateway
      description: Delete the serverless cloud gateway
      tags:
        - Serverless Cloud Gateways
      responses:
        '204':
          description: No Content
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      servers:
        - url: https://global.api.konghq.com/
  /v2/control-planes:
    parameters: []
    get:
      operationId: list-control-planes
      summary: List Control Planes
      description: >-
        Returns an array of control plane objects containing information about the Konnect Control Planes.
      responses:
        '200':
          $ref: '#/components/responses/ListControlPlanesResponse'
        '400':
          $ref: '#/components/responses/ControlPlanesBadRequest'
        '401':
          $ref: '#/components/responses/ControlPlaneUnauthenticated'
        '403':
          $ref: '#/components/responses/ControlPlanePermissionDenied'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      tags:
        - Control Planes
      parameters:
        - $ref: '#/components/parameters/PageSize'
        - $ref: '#/components/parameters/PageNumber'
        - $ref: '#/components/parameters/FilterByNameEquality'
        - $ref: '#/components/parameters/FilterByNameEqualityShort'
        - $ref: '#/components/parameters/FilterByNameContains'
        - $ref: '#/components/parameters/FilterByNameNotEquals'
        - $ref: '#/components/parameters/FilterByIdEquality'
        - $ref: '#/components/parameters/FilterByIdEqualityShort'
        - $ref: '#/components/parameters/FilterByIdsEquality'
        - $ref: '#/components/parameters/FilterByClusterTypeEquality'
        - $ref: '#/components/parameters/FilterByClusterTypeEqualityShort'
        - $ref: '#/components/parameters/FilterByClusterTypeNotEquals'
        - $ref: '#/components/parameters/FilterByLabels'
        - $ref: '#/components/parameters/ControlPlaneSort'
    post:
      x-speakeasy-entity-operation: GatewayControlPlane#create
      operationId: create-control-plane
      summary: Create Control Plane
      description: Create a control plane in the Konnect Organization.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateControlPlaneRequest'
      responses:
        '201':
          $ref: '#/components/responses/CreateControlPlaneResponse'
        '400':
          $ref: '#/components/responses/ControlPlanesBadRequest'
        '401':
          $ref: '#/components/responses/ControlPlaneUnauthenticated'
        '403':
          $ref: '#/components/responses/ControlPlanePermissionDenied'
        '409':
          $ref: '#/components/responses/ControlPlaneConflict'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      tags:
        - Control Planes
  /v2/control-planes/{controlPlaneId}/core-entities/acls:
    parameters:
      - $ref: '#/components/parameters/ControlPlaneId'
    get:
      operationId: list-acl
      summary: List all ACLs
      description: List all ACLs
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/ACL'
                    type: array
                  offset:
                    $ref: '#/components/schemas/PaginationOffsetResponse'
                type: object
          description: A successful response listing ACLs
        '401':
          $ref: '#/components/responses/HTTP401Error'
      tags:
        - ACLs
      parameters:
        - $ref: '#/components/parameters/PaginationSize'
        - $ref: '#/components/parameters/PaginationOffset'
        - $ref: '#/components/parameters/PaginationTagsFilter'
  /v2/control-planes/{controlPlaneId}/core-entities/basic-auths:
    parameters:
      - $ref: '#/components/parameters/ControlPlaneId'
    get:
      operationId: list-basic-auth
      summary: List all Basic-auth credentials
      description: List all Basic-auth credentials
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/BasicAuth'
                    type: array
                  offset:
                    $ref: '#/components/schemas/PaginationOffsetResponse'
                type: object
          description: A successful response listing Basic-auth credentials
        '401':
          $ref: '#/components/responses/HTTP401Error'
      tags:
        - Basic-auth credentials
      parameters:
        - $ref: '#/components/parameters/PaginationSize'
        - $ref: '#/components/parameters/PaginationOffset'
        - $ref: '#/components/parameters/PaginationTagsFilter'
  /v2/control-planes/{controlPlaneId}/core-entities/ca_certificates:
    parameters:
      - $ref: '#/components/parameters/ControlPlaneId'
    get:
      operationId: list-ca_certificate
      summary: List all CA Certificates
      description: List all CA Certificates
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/CACertificate'
                    type: array
                  offset:
                    $ref: '#/components/schemas/PaginationOffsetResponse'
                type: object
          description: A successful response listing CA Certificates
        '401':
          $ref: '#/components/responses/HTTP401Error'
      tags:
        - CA Certificates
      parameters:
        - $ref: '#/components/parameters/PaginationSize'
        - $ref: '#/components/parameters/PaginationOffset'
        - $ref: '#/components/parameters/PaginationTagsFilter'
    post:
      operationId: create-ca_certificate
      summary: Create a new CA Certificate
      description: Create a new CA Certificate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CACertificate'
        description: Description of the new CA Certificate for creation
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CACertificate'
          description: Successfully created CA Certificate
        '401':
          $ref: '#/components/responses/HTTP401Error'
      tags:
        - CA Certificates
  /v2/control-planes/{controlPlaneId}/core-entities/ca_certificates/{CACertificateId}:
    parameters:
      - $ref: '#/components/parameters/ControlPlaneId'
    get:
      operationId: get-ca_certificate
      summary: Fetch a CA Certificate
      description: Get a CA Certificate using ID.
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CACertificate'
          description: Successfully fetched CA Certificate
        '401':
          $ref: '#/components/responses/HTTP401Error'
        '404':
          description: Resource does not exist
      tags:
        - CA Certificates
      parameters:
        - $ref: '#/components/parameters/CACertificateId'
    put:
      operationId: upsert-ca_certificate
      summary: Upsert a CA Certificate
      description: Create or Update CA Certificate using ID.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CACertificate'
        description: Description of the CA Certificate
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CACertificate'
          description: Successfully upserted CA Certificate
        '401':
          $ref: '#/components/responses/HTTP401Error'
      tags:
        - CA Certificates
      parameters:
        - $ref: '#/components/parameters/CACertificateId'
    delete:
      operationId: delete-ca_certificate
      summary: Delete a CA Certificate
      description: Delete a CA Certificate
      responses:
        '204':
          description: Successfully deleted CA Certificate or the resource didn't exist
        '401':
          $ref: '#/components/responses/HTTP401Error'
      tags:
        - CA Certificates
      parameters:
        - $ref: '#/components/parameters/CACertificateId'
  /v2/control-planes/{controlPlaneId}/core-entities/certificates:
    parameters:
      - $ref: '#/components/parameters/ControlPlaneId'
    get:
      operationId: list-certificate
      summary: List all Certificates
      description: List all Certificates
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/Certificate'
                    type: array
                  offset:
                    $ref: '#/components/schemas/PaginationOffsetResponse'
                type: object
          description: A successful response listing Certificates
        '401':
          $ref: '#/components/responses/HTTP401Error'
      tags:
        - Certificates
      parameters:
        - $ref: '#/components/parameters/PaginationSize'
        - $ref: '#/components/parameters/PaginationOffset'
        - $ref: '#/components/parameters/PaginationTagsFilter'
    post:
      operationId: create-certificate
      summary: Create a new Certificate
      description: Create a new Certificate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Certificate'
        description: Description of the new Certificate for creation
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Certificate'
          description: Successfully created Certificate
        '401':
          $ref: '#/components/responses/HTTP401Error'
      tags:
        - Certificates
  /v2/control-planes/{controlPlaneId}/core-entities/certificates/{CertificateId}:
    parameters:
      - $ref: '#/components/parameters/ControlPlaneId'
    get:
      operationId: get-certificate
      summary: Fetch a Certificate
      description: Get a Certificate using ID.
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Certificate'
          description: Successfully fetched Certificate
        '401':
          $ref: '#/components/responses/HTTP401Error'
        '404':
          description: Resource does not exist
      tags:
        - Certificates
      parameters:
        - $ref: '#/components/parameters/CertificateId'
    put:
      operationId: upsert-certificate
      summary: Upsert a Certificate
      description: Create or Update Certificate using ID.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Certificate'
        description: Description of the Certificate
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Certificate'
          description: Successfully upserted Certificate
        '401':
          $ref: '#/components/responses/HTTP401Error'
      tags:
        - Certificates
      parameters:
        - $ref: '#/components/parameters/CertificateId'
    delete:
      operationId: delete-certificate
      summary: Delete a Certificate
      description: Delete a Certificate
      responses:
        '204':
          description: Successfully deleted Certificate or the resource didn't exist
        '401':
          $ref: '#/components/responses/HTTP401Error'
      tags:
        - Certificates
      parameters:
        - $ref: '#/components/parameters/CertificateId'
  /v2/control-planes/{controlPlaneId}/core-entities/certificates/{CertificateId}/snis:
    parameters:
      - $ref: '#/components/parameters/ControlPlaneId'
    get:
      operationId: list-sni-with-certificate
      summary: List all SNIs associated with a Certificate
      description: List all SNIs associated with a a Certificate
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/SNI'
                    type: array
                  offset:
                    $ref: '#/components/schemas/PaginationOffsetResponse'
                type: object
          description: A successful response listing SNIs
      tags:
        - SNIs
      parameters:
        - $ref: '#/components/parameters/CertificateId'
        - $ref: '#/components/parameters/PaginationSize'
        - $ref: '#/components/parameters/PaginationOffset'
        - $ref: '#/components/parameters/PaginationTagsFilter'
    post:
      operationId: create-sni-with-certificate
      summary: Create a new SNI associated with a Certificate
      description: Create a new SNI associated with a Certificate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SNIWithoutParents'
        description: Description of new SNI for creation
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SNI'
          description: Successfully created SNI
      tags:
        - SNIs
      parameters:
        - $ref: '#/components/parameters/CertificateId'
  /v2/control-planes/{controlPlaneId}/core-entities/certificates/{CertificateId}/snis/{SNIId}:
    parameters:
      - $ref: '#/components/parameters/ControlPlaneId'
    get:
      operationId: get-sni-with-certificate
      summary: Fetch an SNI associated with a Certificate
      description: Get an SNI associated with a Certificate using ID or name.
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SNI'
          description: Successfully fetched SNI
        '404':
          description: Resource does not exist
      tags:
        - SNIs
      parameters:
        - $ref: '#/components/parameters/CertificateId'
        - $ref: '#/components/parameters/SNIId'
    put:
      operationId: upsert-sni-with-certificate
      summary: Upsert an SNI associated with a Certificate
      description: Create or Update an SNI associated with a Certificate using ID or name.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SNIWithoutParents'
        description: Description of the SNI
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SNI'
          description: Successfully upserted SNI
      tags:
        - SNIs
      parameters:
        - $ref: '#/components/parameters/CertificateId'
        - $ref: '#/components/parameters/SNIId'
    delete:
      operationId: delete-sni-with-certificate
      summary: Delete a an SNI associated with a a Certificate
      description: Delete a an SNI associated with a a Certificate using ID or name.
      responses:
        '204':
          description: Successfully deleted SNI or the resource didn't exist
      tags:
        - SNIs
      parameters:
        - $ref: '#/components/parameters/CertificateId'
        - $ref: '#/components/parameters/SNIId'
  /v2/control-planes/{controlPlaneId}/core-entities/consumer_groups:
    parameters:
      - $ref: '#/components/parameters/ControlPlaneId'
    get:
      operationId: list-consumer_group
      summary: List all Consumer Groups
      description: List all Consumer Groups
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/ConsumerGroup'
                    type: array
                  offset:
                    $ref: '#/components/schemas/PaginationOffsetResponse'
                type: object
          description: A successful response listing Consumer Groups
        '401':
          $ref: '#/components/responses/HTTP401Error'
      tags:
        - Consumer Groups
      parameters:
        - $ref: '#/components/parameters/PaginationSize'
        - $ref: '#/components/parameters/PaginationOffset'
        - $ref: '#/components/parameters/PaginationTagsFilter'
    post:
      operationId: create-consumer_group
      summary: Create a new Consumer Group
      description: Create a new Consumer Group
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConsumerGroup'
        description: Description of the new Consumer Group for creation
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConsumerGroup'
          description: Successfully created Consumer Group
        '401':
          $ref: '#/components/responses/HTTP401Error'
      tags:
        - Consumer Groups
  /v2/control-planes/{controlPlaneId}/core-entities/consumer_groups/{ConsumerGroupId}:
    parameters:
      - $ref: '#/components/parameters/ControlPlaneId'
    get:
      operationId: get-consumer_group
      summary: Fetch a Consumer Group
      description: Get a Consumer Group using ID.
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConsumerGroup'
          description: Successfully fetched Consumer Group
        '401':
          $ref: '#/components/responses/HTTP401Error'
        '404':
          description: Resource does not exist
      tags:
        - Consumer Groups
      parameters:
        - $ref: '#/components/parameters/ConsumerGroupId'
    put:
      operationId: upsert-consumer_group
      summary: Upsert a Consumer Group
      description: Create or Update Consumer Group using ID.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConsumerGroup'
        description: Description of the Consumer Group
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConsumerGroup'
          description: Successfully upserted Consumer Group
        '401':
          $ref: '#/components/responses/HTTP401Error'
      tags:
        - Consumer Groups
      parameters:
        - $ref: '#/components/parameters/ConsumerGroupId'
    delete:
      operationId: delete-consumer_group
      summary: Delete a Consumer Group
      description: Delete a Consumer Group
      responses:
        '204':
          description: Successfully deleted Consumer Group or the resource didn't exist
        '401':
          $ref: '#/components/responses/HTTP401Error'
      tags:
        - Consumer Groups
      parameters:
        - $ref: '#/components/parameters/ConsumerGroupId'
  /v2/control-planes/{controlPlaneId}/core-entities/consumer_groups/{ConsumerGroupId}/consumers:
    parameters:
      - $ref: '#/components/parameters/ConsumerGroupId'
      - $ref: '#/components/parameters/ControlPlaneId'
    post:
      operationId: add-consumer-to-group
      summary: Add consumer to consumer group
      description: Add a consumer to a consumer group
      requestBody:
        content:
          application/json:
            schema:
              properties:
                consumer:
                  example: bob
                  type: string
              type: object
      responses:
        '201':
          content:
            application/json:
              schema:
                properties:
                  consumer:
                    $ref: '#/components/schemas/Consumer'
                  consumer_group:
                    $ref: '#/components/schemas/ConsumerGroup'
                type: object
          description: Consumer Added
      tags:
        - Consumer Groups
  /v2/control-planes/{controlPlaneId}/core-entities/consumers:
    parameters:
      - $ref: '#/components/parameters/ControlPlaneId'
    get:
      operationId: list-consumer
      summary: List all Consumers
      description: List all Consumers
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/Consumer'
                    type: array
                  offset:
                    $ref: '#/components/schemas/PaginationOffsetResponse'
                type: object
          description: A successful response listing Consumers
        '401':
          $ref: '#/components/responses/HTTP401Error'
      tags:
        - Consumers
      parameters:
        - $ref: '#/components/parameters/PaginationSize'
        - $ref: '#/components/parameters/PaginationOffset'
        - $ref: '#/components/parameters/PaginationTagsFilter'
    post:
      operationId: create-consumer
      summary: Create a new Consumer
      description: Create a new Consumer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Consumer'
        description: Description of the new Consumer for creation
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Consumer'
          description: Successfully created Consumer
        '401':
          $ref: '#/components/responses/HTTP401Error'
      tags:
        - Consumers
  /v2/control-planes/{controlPlaneId}/core-entities/consumers/{ConsumerId}:
    parameters:
      - $ref: '#/components/parameters/ControlPlaneId'
    get:
      operationId: get-consumer
      summary: Fetch a Consumer
      description: Get a Consumer using ID or username.
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Consumer'
          description: Successfully fetched Consumer
        '401':
          $ref: '#/components/responses/HTTP401Error'
        '404':
          description: Resource does not exist
      tags:
        - Consumers
      parameters:
        - $ref: '#/components/parameters/ConsumerId'
    put:
      operationId: upsert-consumer
      summary: Upsert a Consumer
      description: Create or Update Consumer using ID or username.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Consumer'
        description: Description of the Consumer
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Consumer'
          description: Successfully upserted Consumer
        '401':
          $ref: '#/components/responses/HTTP401Error'
      tags:
        - Consumers
      parameters:
        - $ref: '#/components/parameters/ConsumerId'
    delete:
      operationId: delete-consumer
      summary: Delete a Consumer
      description: Delete a Consumer
      responses:
        '204':
          description: Successfully deleted Consumer or the resource didn't exist
        '401':
          $ref: '#/components/responses/HTTP401Error'
      tags:
        - Consumers
      parameters:
        - $ref: '#/components/parameters/ConsumerId'
  /v2/control-planes/{controlPlaneId}/core-entities/consumers/{ConsumerIdForNestedEntities}/acls:
    parameters:
      - $ref: '#/components/parameters/ControlPlaneId'
    get:
      operationId: list-acl-with-consumer
      summary: List all ACLs associated with a Consumer
      description: List all ACLs associated with a a Consumer
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/ACL'
                    type: array
                  offset:
                    $ref: '#/components/schemas/PaginationOffsetResponse'
                type: object
          description: A successful response listing ACLs
      tags:
        - ACLs
      parameters:
        - $ref: '#/components/parameters/ConsumerIdForNestedEntities'
        - $ref: '#/components/parameters/PaginationSize'
        - $ref: '#/components/parameters/PaginationOffset'
        - $ref: '#/components/parameters/PaginationTagsFilter'
    post:
      operationId: create-acl-with-consumer
      summary: Create a new ACL associated with a Consumer
      description: Create a new ACL associated with a Consumer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ACLWithoutParents'
        description: Description of new ACL for creation
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ACL'
          description: Successfully created ACL
      tags:
        - ACLs
      parameters:
        - $ref: '#/components/parameters/ConsumerIdForNestedEntities'
  /v2/control-planes/{controlPlaneId}/core-entities/consumers/{ConsumerIdForNestedEntities}/acls/{ACLId}:
    parameters:
      - $ref: '#/components/parameters/ControlPlaneId'
    get:
      operationId: get-acl-with-consumer
      summary: Fetch an ACL associated with a Consumer
      description: Get an ACL associated with a Consumer using ID.
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ACL'
          description: Successfully fetched ACL
        '404':
          description: Resource does not exist
      tags:
        - ACLs
      parameters:
        - $ref: '#/components/parameters/ConsumerIdForNestedEntities'
        - $ref: '#/components/parameters/ACLId'
    put:
      operationId: upsert-acl-with-consumer
      summary: Upsert an ACL associated with a Consumer
      description: Create or Update an ACL associated with a Consumer using ID.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ACLWithoutParents'
        description: Description of the ACL
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ACL'
          description: Successfully upserted ACL
      tags:
        - ACLs
      parameters:
        - $ref: '#/components/parameters/ConsumerIdForNestedEntities'
        - $ref: '#/components/parameters/ACLId'
    delete:
      operationId: delete-acl-with-consumer
      summary: Delete a an ACL associated with a a Consumer
      description: Delete a an ACL associated with a a Consumer using ID.
      responses:
        '204':
          description: Successfully deleted ACL or the resource didn't exist
      tags:
        - ACLs
      parameters:
        - $ref: '#/components/parameters/ConsumerIdForNestedEntities'
        - $ref: '#/components/parameters/ACLId'
  /v2/control-planes/{controlPlaneId}/core-entities/consumers/{ConsumerIdForNestedEntities}/basic-auth:
    parameters:
      - $ref: '#/components/parameters/ControlPlaneId'
    get:
      operationId: list-basic-auth-with-consumer
      summary: List all Basic-auth credentials associated with a Consumer
      description: List all Basic-auth credentials associated with a a Consumer
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/BasicAuth'
                    type: array
                  offset:
                    $ref: '#/components/schemas/PaginationOffsetResponse'
                type: object
          description: A successful response listing Basic-auth credentials
      tags:
        - Basic-auth credentials
      parameters:
        - $ref: '#/components/parameters/ConsumerIdForNestedEntities'
        - $ref: '#/components/parameters/PaginationSize'
        - $ref: '#/components/parameters/PaginationOffset'
        - $ref: '#/components/parameters/PaginationTagsFilter'
    post:
      operationId: create-basic-auth-with-consumer
      summary: Create a new Basic-auth credential associated with a Consumer
      description: Create a new Basic-auth credential associated with a Consumer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BasicAuthWithoutParents'
        description: Description of new Basic-auth credential for creation
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicAuth'
          description: Successfully created Basic-auth credential
      tags:
        - Basic-auth credentials
      parameters:
        - $ref: '#/components/parameters/ConsumerIdForNestedEntities'
  /v2/control-planes/{controlPlaneId}/core-entities/consumers/{ConsumerIdForNestedEntities}/basic-auth/{BasicAuthId}:
    parameters:
      - $ref: '#/components/parameters/ControlPlaneId'
    get:
      operationId: get-basic-auth-with-consumer
      summary: Fetch a Basic-auth credential associated with a Consumer
      description: Get a Basic-auth credential associated with a Consumer using ID.
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicAuth'
          description: Successfully fetched Basic-auth credential
        '404':
          description: Resource does not exist
      tags:
        - Basic-auth credentials
      parameters:
        - $ref: '#/components/parameters/ConsumerIdForNestedEntities'
        - $ref: '#/components/parameters/BasicAuthId'
    put:
      operationId: upsert-basic-auth-with-consumer
      summary: Upsert a Basic-auth credential associated with a Consumer
      description: >-
        Create or Update a Basic-auth credential associated with a Consumer using ID.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BasicAuthWithoutParents'
        description: Description of the Basic-auth credential
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicAuth'
          description: Successfully upserted Basic-auth credential
      tags:
        - Basic-auth credentials
      parameters:
        - $ref: '#/components/parameters/ConsumerIdForNestedEntities'
        - $ref: '#/components/parameters/BasicAuthId'
    delete:
      operationId: delete-basic-auth-with-consumer
      summary: Delete a a Basic-auth credential associated with a a Consumer
      description: Delete a a Basic-auth credential associated with a a Consumer using ID.
      responses:
        '204':
          description: >-
            Successfully deleted Basic-auth credential or the resource didn't exist
      tags:
        - Basic-auth credentials
      parameters:
        - $ref: '#/components/parameters/ConsumerIdForNestedEntities'
        - $ref: '#/components/parameters/BasicAuthId'
  /v2/control-planes/{controlPlaneId}/core-entities/consumers/{ConsumerIdForNestedEntities}/hmac-auth:
    parameters:
      - $ref: '#/components/parameters/ControlPlaneId'
    get:
      operationId: list-hmac-auth-with-consumer
      summary: List all HMAC-auth credentials associated with a Consumer
      description: List all HMAC-auth credentials associated with a a Consumer
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/HMACAuth'
                    type: array
                  offset:
                    $ref: '#/components/schemas/PaginationOffsetResponse'
                type: object
          description: A successful response listing HMAC-auth credentials
      tags:
        - HMAC-auth credentials
      parameters:
        - $ref: '#/components/parameters/ConsumerIdForNestedEntities'
        - $ref: '#/components/parameters/PaginationSize'
        - $ref: '#/components/parameters/PaginationOffset'
        - $ref: '#/components/parameters/PaginationTagsFilter'
    post:
      operationId: create-hmac-auth-with-consumer
      summary: Create a new HMAC-auth credential associated with a Consumer
      description: Create a new HMAC-auth credential associated with a Consumer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HMACAuthWithoutParents'
        description: Description of new HMAC-auth credential for creation
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HMACAuth'
          description: Successfully created HMAC-auth credential
      tags:
        - HMAC-auth credentials
      parameters:
        - $ref: '#/components/parameters/ConsumerIdForNestedEntities'
  /v2/control-planes/{controlPlaneId}/core-entities/consumers/{ConsumerIdForNestedEntities}/hmac-auth/{HMACAuthId}:
    parameters:
      - $ref: '#/components/parameters/ControlPlaneId'
    get:
      operationId: get-hmac-auth-with-consumer
      summary: Fetch a HMAC-auth credential associated with a Consumer
      description: Get a HMAC-auth credential associated with a Consumer using ID.
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HMACAuth'
          description: Successfully fetched HMAC-auth credential
        '404':
          description: Resource does not exist
      tags:
        - HMAC-auth credentials
      parameters:
        - $ref: '#/components/parameters/ConsumerIdForNestedEntities'
        - $ref: '#/components/parameters/HMACAuthId'
    put:
      operationId: upsert-hmac-auth-with-consumer
      summary: Upsert a HMAC-auth credential associated with a Consumer
      description: >-
        Create or Update a HMAC-auth credential associated with a Consumer using ID.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HMACAuthWithoutParents'
        description: Description of the HMAC-auth credential
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HMACAuth'
          description: Successfully upserted HMAC-auth credential
      tags:
        - HMAC-auth credentials
      parameters:
        - $ref: '#/components/parameters/ConsumerIdForNestedEntities'
        - $ref: '#/components/parameters/HMACAuthId'
    delete:
      operationId: delete-hmac-auth-with-consumer
      summary: Delete a a HMAC-auth credential associated with a a Consumer
      description: Delete a a HMAC-auth credential associated with a a Consumer using ID.
      responses:
        '204':
          description: >-
            Successfully deleted HMAC-auth credential or the resource didn't exist
      tags:
        - HMAC-auth credentials
      parameters:
        - $ref: '#/components/parameters/ConsumerIdForNestedEntities'
        - $ref: '#/components/parameters/HMACAuthId'
  /v2/control-planes/{controlPlaneId}/core-entities/consumers/{ConsumerIdForNestedEntities}/jwt:
    parameters:
      - $ref: '#/components/parameters/ControlPlaneId'
    get:
      operationId: list-jwt-with-consumer
      summary: List all JWTs associated with a Consumer
      description: List all JWTs associated with a a Consumer
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/JWT'
                    type: array
                  offset:
                    $ref: '#/components/schemas/PaginationOffsetResponse'
                type: object
          description: A successful response listing JWTs
      tags:
        - JWTs
      parameters:
        - $ref: '#/components/parameters/ConsumerIdForNestedEntities'
        - $ref: '#/components/parameters/PaginationSize'
        - $ref: '#/components/parameters/PaginationOffset'
        - $ref: '#/components/parameters/PaginationTagsFilter'
    post:
      operationId: create-jwt-with-consumer
      summary: Create a new JWT associated with a Consumer
      description: Create a new JWT associated with a Consumer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JWTWithoutParents'
        description: Description of new JWT for creation
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JWT'
          description: Successfully created JWT
      tags:
        - JWTs
      parameters:
        - $ref: '#/components/parameters/ConsumerIdForNestedEntities'
  /v2/control-planes/{controlPlaneId}/core-entities/consumers/{ConsumerIdForNestedEntities}/jwt/{JWTId}:
    parameters:
      - $ref: '#/components/parameters/ControlPlaneId'
    get:
      operationId: get-jwt-with-consumer
      summary: Fetch a JWT associated with a Consumer
      description: Get a JWT associated with a Consumer using ID.
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JWT'
          description: Successfully fetched JWT
        '404':
          description: Resource does not exist
      tags:
        - JWTs
      parameters:
        - $ref: '#/components/parameters/ConsumerIdForNestedEntities'
        - $ref: '#/components/parameters/JWTId'
    put:
      operationId: upsert-jwt-with-consumer
      summary: Upsert a JWT associated with a Consumer
      description: Create or Update a JWT associated with a Consumer using ID.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JWTWithoutParents'
        description: Description of the JWT
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JWT'
          description: Successfully upserted JWT
      tags:
        - JWTs
      parameters:
        - $ref: '#/components/parameters/ConsumerIdForNestedEntities'
        - $ref: '#/components/parameters/JWTId'
    delete:
      operationId: delete-jwt-with-consumer
      summary: Delete a a JWT associated with a a Consumer
      description: Delete a a JWT associated with a a Consumer using ID.
      responses:
        '204':
          description: Successfully deleted JWT or the resource didn't exist
      tags:
        - JWTs
      parameters:
        - $ref: '#/components/parameters/ConsumerIdForNestedEntities'
        - $ref: '#/components/parameters/JWTId'
  /v2/control-planes/{controlPlaneId}/core-entities/consumers/{ConsumerIdForNestedEntities}/key-auth:
    parameters:
      - $ref: '#/components/parameters/ControlPlaneId'
    get:
      operationId: list-key-auth-with-consumer
      summary: List all API-keys associated with a Consumer
      description: List all API-keys associated with a a Consumer
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/KeyAuth'
                    type: array
                  offset:
                    $ref: '#/components/schemas/PaginationOffsetResponse'
                type: object
          description: A successful response listing API-keys
      tags:
        - API-keys
      parameters:
        - $ref: '#/components/parameters/ConsumerIdForNestedEntities'
        - $ref: '#/components/parameters/PaginationSize'
        - $ref: '#/components/parameters/PaginationOffset'
        - $ref: '#/components/parameters/PaginationTagsFilter'
    post:
      operationId: create-key-auth-with-consumer
      summary: Create a new API-key associated with a Consumer
      description: Create a new API-key associated with a Consumer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KeyAuthWithoutParents'
        description: Description of new API-key for creation
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyAuth'
          description: Successfully created API-key
      tags:
        - API-keys
      parameters:
        - $ref: '#/components/parameters/ConsumerIdForNestedEntities'
  /v2/control-planes/{controlPlaneId}/core-entities/consumers/{ConsumerIdForNestedEntities}/key-auth/{KeyAuthId}:
    parameters:
      - $ref: '#/components/parameters/ControlPlaneId'
    get:
      operationId: get-key-auth-with-consumer
      summary: Fetch an API-key associated with a Consumer
      description: Get an API-key associated with a Consumer using ID.
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyAuth'
          description: Successfully fetched API-key
        '404':
          description: Resource does not exist
      tags:
        - API-keys
      parameters:
        - $ref: '#/components/parameters/ConsumerIdForNestedEntities'
        - $ref: '#/components/parameters/KeyAuthId'
    put:
      operationId: upsert-key-auth-with-consumer
      summary: Upsert an API-key associated with a Consumer
      description: Create or Update an API-key associated with a Consumer using ID.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KeyAuthWithoutParents'
        description: Description of the API-key
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyAuth'
          description: Successfully upserted API-key
      tags:
        - API-keys
      parameters:
        - $ref: '#/components/parameters/ConsumerIdForNestedEntities'
        - $ref: '#/components/parameters/KeyAuthId'
    delete:
      operationId: delete-key-auth-with-consumer
      summary: Delete a an API-key associated with a a Consumer
      description: Delete a an API-key associated with a a Consumer using ID.
      responses:
        '204':
          description: Successfully deleted API-key or the resource didn't exist
      tags:
        - API-keys
      parameters:
        - $ref: '#/components/parameters/ConsumerIdForNestedEntities'
        - $ref: '#/components/parameters/KeyAuthId'
  /v2/control-planes/{controlPlaneId}/core-entities/hmac-auths:
    parameters:
      - $ref: '#/components/parameters/ControlPlaneId'
    get:
      operationId: list-hmac-auth
      summary: List all HMAC-auth credentials
      description: List all HMAC-auth credentials
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/HMACAuth'
                    type: array
                  offset:
                    $ref: '#/components/schemas/PaginationOffsetResponse'
                type: object
          description: A successful response listing HMAC-auth credentials
        '401':
          $ref: '#/components/responses/HTTP401Error'
      tags:
        - HMAC-auth credentials
      parameters:
        - $ref: '#/components/parameters/PaginationSize'
        - $ref: '#/components/parameters/PaginationOffset'
        - $ref: '#/components/parameters/PaginationTagsFilter'
  /v2/control-planes/{controlPlaneId}/core-entities/jwts:
    parameters:
      - $ref: '#/components/parameters/ControlPlaneId'
    get:
      operationId: list-jwt
      summary: List all JWTs
      description: List all JWTs
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/JWT'
                    type: array
                  offset:
                    $ref: '#/components/schemas/PaginationOffsetResponse'
                type: object
          description: A successful response listing JWTs
        '401':
          $ref: '#/components/responses/HTTP401Error'
      tags:
        - JWTs
      parameters:
        - $ref: '#/components/parameters/PaginationSize'
        - $ref: '#/components/parameters/PaginationOffset'
        - $ref: '#/components/parameters/PaginationTagsFilter'
  /v2/control-planes/{controlPlaneId}/core-entities/key-auths:
    parameters:
      - $ref: '#/components/parameters/ControlPlaneId'
    get:
      operationId: list-key-auth
      summary: List all API-keys
      description: List all API-keys
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/KeyAuth'
                    type: array
                  offset:
                    $ref: '#/components/schemas/PaginationOffsetResponse'
                type: object
          description: A successful response listing API-keys
        '401':
          $ref: '#/components/responses/HTTP401Error'
      tags:
        - API-keys
      parameters:
        - $ref: '#/components/parameters/PaginationSize'
        - $ref: '#/components/parameters/PaginationOffset'
        - $ref: '#/components/parameters/PaginationTagsFilter'
  /v2/control-planes/{controlPlaneId}/core-entities/key-sets:
    parameters:
      - $ref: '#/components/parameters/ControlPlaneId'
    get:
      operationId: list-key-set
      summary: List all KeySets
      description: List all KeySets
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/KeySet'
                    type: array
                  offset:
                    $ref: '#/components/schemas/PaginationOffsetResponse'
                type: object
          description: A successful response listing KeySets
        '401':
          $ref: '#/components/responses/HTTP401Error'
      tags:
        - KeySets
      parameters:
        - $ref: '#/components/parameters/PaginationSize'
        - $ref: '#/components/parameters/PaginationOffset'
        - $ref: '#/components/parameters/PaginationTagsFilter'
    post:
      operationId: create-key-set
      summary: Create a new KeySet
      description: Create a new KeySet
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KeySet'
        description: Description of the new KeySet for creation
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeySet'
          description: Successfully created KeySet
        '401':
          $ref: '#/components/responses/HTTP401Error'
      tags:
        - KeySets
  /v2/control-planes/{controlPlaneId}/core-entities/key-sets/{KeySetId}:
    parameters:
      - $ref: '#/components/parameters/ControlPlaneId'
    get:
      operationId: get-key-set
      summary: Fetch a KeySet
      description: Get a KeySet using ID or name.
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeySet'
          description: Successfully fetched KeySet
        '401':
          $ref: '#/components/responses/HTTP401Error'
        '404':
          description: Resource does not exist
      tags:
        - KeySets
      parameters:
        - $ref: '#/components/parameters/KeySetId'
    put:
      operationId: upsert-key-set
      summary: Upsert a KeySet
      description: Create or Update KeySet using ID or name.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KeySet'
        description: Description of the KeySet
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeySet'
          description: Successfully upserted KeySet
        '401':
          $ref: '#/components/responses/HTTP401Error'
      tags:
        - KeySets
      parameters:
        - $ref: '#/components/parameters/KeySetId'
    delete:
      operationId: delete-key-set
      summary: Delete a KeySet
      description: Delete a KeySet
      responses:
        '204':
          description: Successfully deleted KeySet or the resource didn't exist
        '401':
          $ref: '#/components/responses/HTTP401Error'
      tags:
        - KeySets
      parameters:
        - $ref: '#/components/parameters/KeySetId'
  /v2/control-planes/{controlPlaneId}/core-entities/keys:
    parameters:
      - $ref: '#/components/parameters/ControlPlaneId'
    get:
      operationId: list-key
      summary: List all Keys
      description: List all Keys
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/Key'
                    type: array
                  offset:
                    $ref: '#/components/schemas/PaginationOffsetResponse'
                type: object
          description: A successful response listing Keys
        '401':
          $ref: '#/components/responses/HTTP401Error'
      tags:
        - Keys
      parameters:
        - $ref: '#/components/parameters/PaginationSize'
        - $ref: '#/components/parameters/PaginationOffset'
        - $ref: '#/components/parameters/PaginationTagsFilter'
    post:
      operationId: create-key
      summary: Create a new Key
      description: Create a new Key
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Key'
        description: Description of the new Key for creation
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Key'
          description: Successfully created Key
        '401':
          $ref: '#/components/responses/HTTP401Error'
      tags:
        - Keys
  /v2/control-planes/{controlPlaneId}/core-entities/keys/{KeyId}:
    parameters:
      - $ref: '#/components/parameters/ControlPlaneId'
    get:
      operationId: get-key
      summary: Fetch a Key
      description: Get a Key using ID or name.
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Key'
          description: Successfully fetched Key
        '401':
          $ref: '#/components/responses/HTTP401Error'
        '404':
          description: Resource does not exist
      tags:
        - Keys
      parameters:
        - $ref: '#/components/parameters/KeyId'
    put:
      operationId: upsert-key
      summary: Upsert a Key
      description: Create or Update Key using ID or name.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Key'
        description: Description of the Key
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Key'
          description: Successfully upserted Key
        '401':
          $ref: '#/components/responses/HTTP401Error'
      tags:
        - Keys
      parameters:
        - $ref: '#/components/parameters/KeyId'
    delete:
      operationId: delete-key
      summary: Delete a Key
      description: Delete a Key
      responses:
        '204':
          description: Successfully deleted Key or the resource didn't exist
        '401':
          $ref: '#/components/responses/HTTP401Error'
      tags:
        - Keys
      parameters:
        - $ref: '#/components/parameters/KeyId'
  /v2/control-planes/{controlPlaneId}/core-entities/plugin-schemas:
    parameters:
      - $ref: '#/components/parameters/controlPlaneId'
    get:
      operationId: list-plugin-schemas
      summary: List custom plugin schemas associated with a control plane
      description: >-
        Returns an array of custom plugins schemas associated with a control plane.
      responses:
        '200':
          $ref: '#/components/responses/list-plugin-schemas'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
      tags:
        - Custom Plugin Schemas
      parameters:
        - $ref: '#/components/parameters/PageSize'
        - $ref: '#/components/parameters/PageAfter'
    post:
      x-speakeasy-entity-operation: GatewayCustomPluginSchema#create
      operationId: create-plugin-schemas
      summary: Upload custom plugin schema
      description: Upload a custom plugin schema associated with a control plane.
      requestBody:
        $ref: '#/components/requestBodies/create-plugin-schemas'
      responses:
        '201':
          $ref: '#/components/responses/plugin-schemas'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '409':
          $ref: '#/components/responses/Conflict'
      tags:
        - Custom Plugin Schemas
  /v2/control-planes/{controlPlaneId}/core-entities/plugin-schemas/{name}:
    parameters:
      - $ref: '#/components/parameters/controlPlaneId'
      - schema:
          type: string
          example: myplugin
        name: name
        in: path
        required: true
        description: The custom plugin name
    get:
      x-speakeasy-entity-operation: GatewayCustomPluginSchema#read
      operationId: get-plugin-schema
      summary: Fetch custom plugin schema
      description: Returns information about a custom plugin from a given name.
      responses:
        '200':
          $ref: '#/components/responses/plugin-schemas'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      tags:
        - Custom Plugin Schemas
    put:
      x-speakeasy-entity-operation: GatewayCustomPluginSchema#update
      operationId: update-plugin-schemas
      summary: Create or update a custom plugin schema
      description: Create or update an individual custom plugin schema.
      requestBody:
        $ref: '#/components/requestBodies/create-plugin-schemas'
      responses:
        '200':
          $ref: '#/components/responses/plugin-schemas'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      tags:
        - Custom Plugin Schemas
    delete:
      x-speakeasy-entity-operation: GatewayCustomPluginSchema#delete
      operationId: delete-plugin-schemas
      summary: Delete custom plugin schema
      description: Delete an individual custom plugin schema.
      responses:
        '204':
          description: No Content
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      tags:
        - Custom Plugin Schemas
  /v2/control-planes/{controlPlaneId}/core-entities/plugins:
    parameters:
      - $ref: '#/components/parameters/ControlPlaneId'
    get:
      operationId: list-plugin
      summary: List all Plugins
      description: List all Plugins
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/Plugin'
                    type: array
                  offset:
                    $ref: '#/components/schemas/PaginationOffsetResponse'
                type: object
          description: A successful response listing Plugins
        '401':
          $ref: '#/components/responses/HTTP401Error'
      tags:
        - Plugins
      parameters:
        - $ref: '#/components/parameters/PaginationSize'
        - $ref: '#/components/parameters/PaginationOffset'
        - $ref: '#/components/parameters/PaginationTagsFilter'
    post:
      operationId: create-plugin
      summary: Create a new Plugin
      description: Create a new Plugin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Plugin'
        description: Description of the new Plugin for creation
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Plugin'
          description: Successfully created Plugin
        '401':
          $ref: '#/components/responses/HTTP401Error'
      tags:
        - Plugins
  /v2/control-planes/{controlPlaneId}/core-entities/plugins/{PluginId}:
    parameters:
      - $ref: '#/components/parameters/ControlPlaneId'
    get:
      operationId: get-plugin
      summary: Fetch a Plugin
      description: Get a Plugin using ID.
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Plugin'
          description: Successfully fetched Plugin
        '401':
          $ref: '#/components/responses/HTTP401Error'
        '404':
          description: Resource does not exist
      tags:
        - Plugins
      parameters:
        - $ref: '#/components/parameters/PluginId'
    put:
      operationId: upsert-plugin
      summary: Upsert a Plugin
      description: Create or Update Plugin using ID.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Plugin'
        description: Description of the Plugin
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Plugin'
          description: Successfully upserted Plugin
        '401':
          $ref: '#/components/responses/HTTP401Error'
      tags:
        - Plugins
      parameters:
        - $ref: '#/components/parameters/PluginId'
    delete:
      operationId: delete-plugin
      summary: Delete a Plugin
      description: Delete a Plugin
      responses:
        '204':
          description: Successfully deleted Plugin or the resource didn't exist
        '401':
          $ref: '#/components/responses/HTTP401Error'
      tags:
        - Plugins
      parameters:
        - $ref: '#/components/parameters/PluginId'
  /v2/control-planes/{controlPlaneId}/core-entities/routes:
    parameters:
      - $ref: '#/components/parameters/ControlPlaneId'
    get:
      operationId: list-route
      summary: List all Routes
      description: List all Routes
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/Route'
                    type: array
                  offset:
                    $ref: '#/components/schemas/PaginationOffsetResponse'
                type: object
          description: A successful response listing Routes
        '401':
          $ref: '#/components/responses/HTTP401Error'
      tags:
        - Routes
      parameters:
        - $ref: '#/components/parameters/PaginationSize'
        - $ref: '#/components/parameters/PaginationOffset'
        - $ref: '#/components/parameters/PaginationTagsFilter'
    post:
      operationId: create-route
      summary: Create a new Route
      description: Create a new Route
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Route'
        description: Description of the new Route for creation
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Route'
          description: Successfully created Route
        '401':
          $ref: '#/components/responses/HTTP401Error'
      tags:
        - Routes
  /v2/control-planes/{controlPlaneId}/core-entities/routes/{RouteId}:
    parameters:
      - $ref: '#/components/parameters/ControlPlaneId'
    get:
      operationId: get-route
      summary: Fetch a Route
      description: Get a Route using ID or name.
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Route'
          description: Successfully fetched Route
        '401':
          $ref: '#/components/responses/HTTP401Error'
        '404':
          description: Resource does not exist
      tags:
        - Routes
      parameters:
        - $ref: '#/components/parameters/RouteId'
    put:
      operationId: upsert-route
      summary: Upsert a Route
      description: Create or Update Route using ID or name.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Route'
        description: Description of the Route
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Route'
          description: Successfully upserted Route
        '401':
          $ref: '#/components/responses/HTTP401Error'
      tags:
        - Routes
      parameters:
        - $ref: '#/components/parameters/RouteId'
    delete:
      operationId: delete-route
      summary: Delete a Route
      description: Delete a Route
      responses:
        '204':
          description: Successfully deleted Route or the resource didn't exist
        '401':
          $ref: '#/components/responses/HTTP401Error'
      tags:
        - Routes
      parameters:
        - $ref: '#/components/parameters/RouteId'
  /v2/control-planes/{controlPlaneId}/core-entities/routes/{RouteId}/plugins:
    parameters:
      - $ref: '#/components/parameters/ControlPlaneId'
    get:
      operationId: list-plugin-with-route
      summary: List all Plugins associated with a Route
      description: List all Plugins associated with a a Route
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/Plugin'
                    type: array
                  offset:
                    $ref: '#/components/schemas/PaginationOffsetResponse'
                type: object
          description: A successful response listing Plugins
      tags:
        - Plugins
      parameters:
        - $ref: '#/components/parameters/RouteId'
        - $ref: '#/components/parameters/PaginationSize'
        - $ref: '#/components/parameters/PaginationOffset'
        - $ref: '#/components/parameters/PaginationTagsFilter'
    post:
      operationId: create-plugin-with-route
      summary: Create a new Plugin associated with a Route
      description: Create a new Plugin associated with a Route
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PluginWithoutParents'
        description: Description of new Plugin for creation
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Plugin'
          description: Successfully created Plugin
      tags:
        - Plugins
      parameters:
        - $ref: '#/components/parameters/RouteId'
  /v2/control-planes/{controlPlaneId}/core-entities/routes/{RouteId}/plugins/{PluginId}:
    parameters:
      - $ref: '#/components/parameters/ControlPlaneId'
    get:
      operationId: get-plugin-with-route
      summary: Fetch a Plugin associated with a Route
      description: Get a Plugin associated with a Route using ID.
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Plugin'
          description: Successfully fetched Plugin
        '404':
          description: Resource does not exist
      tags:
        - Plugins
      parameters:
        - $ref: '#/components/parameters/RouteId'
        - $ref: '#/components/parameters/PluginId'
    put:
      operationId: upsert-plugin-with-route
      summary: Upsert a Plugin associated with a Route
      description: Create or Update a Plugin associated with a Route using ID.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PluginWithoutParents'
        description: Description of the Plugin
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Plugin'
          description: Successfully upserted Plugin
      tags:
        - Plugins
      parameters:
        - $ref: '#/components/parameters/RouteId'
        - $ref: '#/components/parameters/PluginId'
    delete:
      operationId: delete-plugin-with-route
      summary: Delete a a Plugin associated with a a Route
      description: Delete a a Plugin associated with a a Route using ID.
      responses:
        '204':
          description: Successfully deleted Plugin or the resource didn't exist
      tags:
        - Plugins
      parameters:
        - $ref: '#/components/parameters/RouteId'
        - $ref: '#/components/parameters/PluginId'
  /v2/control-planes/{controlPlaneId}/core-entities/schemas/plugins/{pluginName}:
    parameters:
      - description: The name of the plugin
        in: path
        name: pluginName
        required: true
        schema:
          type: string
      - $ref: '#/components/parameters/ControlPlaneId'
    get:
      operationId: fetch-plugin-schema
      summary: Fetch plugin schema
      description: Get the schema for a plugin
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  fields:
                    items:
                      additionalProperties: true
                      type: object
                    type: array
                type: object
          description: The schema for the plugin
      tags:
        - Plugins
  /v2/control-planes/{controlPlaneId}/core-entities/services:
    parameters:
      - $ref: '#/components/parameters/ControlPlaneId'
    get:
      operationId: list-service
      summary: List all Services
      description: List all Services
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/Service'
                    type: array
                  offset:
                    $ref: '#/components/schemas/PaginationOffsetResponse'
                type: object
          description: A successful response listing Services
        '401':
          $ref: '#/components/responses/HTTP401Error'
      tags:
        - Services
      parameters:
        - $ref: '#/components/parameters/PaginationSize'
        - $ref: '#/components/parameters/PaginationOffset'
        - $ref: '#/components/parameters/PaginationTagsFilter'
    post:
      operationId: create-service
      summary: Create a new Service
      description: Create a new Service
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Service'
        description: Description of the new Service for creation
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
          description: Successfully created Service
        '401':
          $ref: '#/components/responses/HTTP401Error'
      tags:
        - Services
  /v2/control-planes/{controlPlaneId}/core-entities/services/{ServiceId}:
    parameters:
      - $ref: '#/components/parameters/ControlPlaneId'
    get:
      operationId: get-service
      summary: Fetch a Service
      description: Get a Service using ID or name.
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
          description: Successfully fetched Service
        '401':
          $ref: '#/components/responses/HTTP401Error'
        '404':
          description: Resource does not exist
      tags:
        - Services
      parameters:
        - $ref: '#/components/parameters/ServiceId'
    put:
      operationId: upsert-service
      summary: Upsert a Service
      description: Create or Update Service using ID or name.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Service'
        description: Description of the Service
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
          description: Successfully upserted Service
        '401':
          $ref: '#/components/responses/HTTP401Error'
      tags:
        - Services
      parameters:
        - $ref: '#/components/parameters/ServiceId'
    delete:
      operationId: delete-service
      summary: Delete a Service
      description: Delete a Service
      responses:
        '204':
          description: Successfully deleted Service or the resource didn't exist
        '401':
          $ref: '#/components/responses/HTTP401Error'
      tags:
        - Services
      parameters:
        - $ref: '#/components/parameters/ServiceId'
  /v2/control-planes/{controlPlaneId}/core-entities/services/{ServiceId}/plugins:
    parameters:
      - $ref: '#/components/parameters/ControlPlaneId'
    get:
      operationId: list-plugin-with-service
      summary: List all Plugins associated with a Service
      description: List all Plugins associated with a a Service
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/Plugin'
                    type: array
                  offset:
                    $ref: '#/components/schemas/PaginationOffsetResponse'
                type: object
          description: A successful response listing Plugins
      tags:
        - Plugins
      parameters:
        - $ref: '#/components/parameters/ServiceId'
        - $ref: '#/components/parameters/PaginationSize'
        - $ref: '#/components/parameters/PaginationOffset'
        - $ref: '#/components/parameters/PaginationTagsFilter'
    post:
      operationId: create-plugin-with-service
      summary: Create a new Plugin associated with a Service
      description: Create a new Plugin associated with a Service
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PluginWithoutParents'
        description: Description of new Plugin for creation
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Plugin'
          description: Successfully created Plugin
      tags:
        - Plugins
      parameters:
        - $ref: '#/components/parameters/ServiceId'
  /v2/control-planes/{controlPlaneId}/core-entities/services/{ServiceId}/plugins/{PluginId}:
    parameters:
      - $ref: '#/components/parameters/ControlPlaneId'
    get:
      operationId: get-plugin-with-service
      summary: Fetch a Plugin associated with a Service
      description: Get a Plugin associated with a Service using ID.
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Plugin'
          description: Successfully fetched Plugin
        '404':
          description: Resource does not exist
      tags:
        - Plugins
      parameters:
        - $ref: '#/components/parameters/ServiceId'
        - $ref: '#/components/parameters/PluginId'
    put:
      operationId: upsert-plugin-with-service
      summary: Upsert a Plugin associated with a Service
      description: Create or Update a Plugin associated with a Service using ID.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PluginWithoutParents'
        description: Description of the Plugin
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Plugin'
          description: Successfully upserted Plugin
      tags:
        - Plugins
      parameters:
        - $ref: '#/components/parameters/ServiceId'
        - $ref: '#/components/parameters/PluginId'
    delete:
      operationId: delete-plugin-with-service
      summary: Delete a a Plugin associated with a a Service
      description: Delete a a Plugin associated with a a Service using ID.
      responses:
        '204':
          description: Successfully deleted Plugin or the resource didn't exist
      tags:
        - Plugins
      parameters:
        - $ref: '#/components/parameters/ServiceId'
        - $ref: '#/components/parameters/PluginId'
  /v2/control-planes/{controlPlaneId}/core-entities/services/{ServiceId}/routes:
    parameters:
      - $ref: '#/components/parameters/ControlPlaneId'
    get:
      operationId: list-route-with-service
      summary: List all Routes associated with a Service
      description: List all Routes associated with a a Service
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/Route'
                    type: array
                  offset:
                    $ref: '#/components/schemas/PaginationOffsetResponse'
                type: object
          description: A successful response listing Routes
      tags:
        - Routes
      parameters:
        - $ref: '#/components/parameters/ServiceId'
        - $ref: '#/components/parameters/PaginationSize'
        - $ref: '#/components/parameters/PaginationOffset'
        - $ref: '#/components/parameters/PaginationTagsFilter'
    post:
      operationId: create-route-with-service
      summary: Create a new Route associated with a Service
      description: Create a new Route associated with a Service
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RouteWithoutParents'
        description: Description of new Route for creation
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Route'
          description: Successfully created Route
      tags:
        - Routes
      parameters:
        - $ref: '#/components/parameters/ServiceId'
  /v2/control-planes/{controlPlaneId}/core-entities/services/{ServiceId}/routes/{RouteId}:
    parameters:
      - $ref: '#/components/parameters/ControlPlaneId'
    get:
      operationId: get-route-with-service
      summary: Fetch a Route associated with a Service
      description: Get a Route associated with a Service using ID or name.
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Route'
          description: Successfully fetched Route
        '404':
          description: Resource does not exist
      tags:
        - Routes
      parameters:
        - $ref: '#/components/parameters/ServiceId'
        - $ref: '#/components/parameters/RouteId'
    put:
      operationId: upsert-route-with-service
      summary: Upsert a Route associated with a Service
      description: Create or Update a Route associated with a Service using ID or name.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RouteWithoutParents'
        description: Description of the Route
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Route'
          description: Successfully upserted Route
      tags:
        - Routes
      parameters:
        - $ref: '#/components/parameters/ServiceId'
        - $ref: '#/components/parameters/RouteId'
    delete:
      operationId: delete-route-with-service
      summary: Delete a a Route associated with a a Service
      description: Delete a a Route associated with a a Service using ID or name.
      responses:
        '204':
          description: Successfully deleted Route or the resource didn't exist
      tags:
        - Routes
      parameters:
        - $ref: '#/components/parameters/ServiceId'
        - $ref: '#/components/parameters/RouteId'
  /v2/control-planes/{controlPlaneId}/core-entities/snis:
    parameters:
      - $ref: '#/components/parameters/ControlPlaneId'
    get:
      operationId: list-sni
      summary: List all SNIs
      description: List all SNIs
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/SNI'
                    type: array
                  offset:
                    $ref: '#/components/schemas/PaginationOffsetResponse'
                type: object
          description: A successful response listing SNIs
        '401':
          $ref: '#/components/responses/HTTP401Error'
      tags:
        - SNIs
      parameters:
        - $ref: '#/components/parameters/PaginationSize'
        - $ref: '#/components/parameters/PaginationOffset'
        - $ref: '#/components/parameters/PaginationTagsFilter'
    post:
      operationId: create-sni
      summary: Create a new SNI
      description: Create a new SNI
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SNI'
        description: Description of the new SNI for creation
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SNI'
          description: Successfully created SNI
        '401':
          $ref: '#/components/responses/HTTP401Error'
      tags:
        - SNIs
  /v2/control-planes/{controlPlaneId}/core-entities/snis/{SNIId}:
    parameters:
      - $ref: '#/components/parameters/ControlPlaneId'
    get:
      operationId: get-sni
      summary: Fetch an SNI
      description: Get an SNI using ID or name.
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SNI'
          description: Successfully fetched SNI
        '401':
          $ref: '#/components/responses/HTTP401Error'
        '404':
          description: Resource does not exist
      tags:
        - SNIs
      parameters:
        - $ref: '#/components/parameters/SNIId'
    put:
      operationId: upsert-sni
      summary: Upsert a SNI
      description: Create or Update SNI using ID or name.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SNI'
        description: Description of the SNI
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SNI'
          description: Successfully upserted SNI
        '401':
          $ref: '#/components/responses/HTTP401Error'
      tags:
        - SNIs
      parameters:
        - $ref: '#/components/parameters/SNIId'
    delete:
      operationId: delete-sni
      summary: Delete an SNI
      description: Delete an SNI
      responses:
        '204':
          description: Successfully deleted SNI or the resource didn't exist
        '401':
          $ref: '#/components/responses/HTTP401Error'
      tags:
        - SNIs
      parameters:
        - $ref: '#/components/parameters/SNIId'
  /v2/control-planes/{controlPlaneId}/core-entities/upstreams:
    parameters:
      - $ref: '#/components/parameters/ControlPlaneId'
    get:
      operationId: list-upstream
      summary: List all Upstreams
      description: List all Upstreams
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/Upstream'
                    type: array
                  offset:
                    $ref: '#/components/schemas/PaginationOffsetResponse'
                type: object
          description: A successful response listing Upstreams
        '401':
          $ref: '#/components/responses/HTTP401Error'
      tags:
        - Upstreams
      parameters:
        - $ref: '#/components/parameters/PaginationSize'
        - $ref: '#/components/parameters/PaginationOffset'
        - $ref: '#/components/parameters/PaginationTagsFilter'
    post:
      operationId: create-upstream
      summary: Create a new Upstream
      description: Create a new Upstream
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Upstream'
        description: Description of the new Upstream for creation
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Upstream'
          description: Successfully created Upstream
        '401':
          $ref: '#/components/responses/HTTP401Error'
      tags:
        - Upstreams
  /v2/control-planes/{controlPlaneId}/core-entities/upstreams/{UpstreamId}:
    parameters:
      - $ref: '#/components/parameters/ControlPlaneId'
    get:
      operationId: get-upstream
      summary: Fetch an Upstream
      description: Get an Upstream using ID or name.
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Upstream'
          description: Successfully fetched Upstream
        '401':
          $ref: '#/components/responses/HTTP401Error'
        '404':
          description: Resource does not exist
      tags:
        - Upstreams
      parameters:
        - $ref: '#/components/parameters/UpstreamId'
    put:
      operationId: upsert-upstream
      summary: Upsert a Upstream
      description: Create or Update Upstream using ID or name.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Upstream'
        description: Description of the Upstream
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Upstream'
          description: Successfully upserted Upstream
        '401':
          $ref: '#/components/responses/HTTP401Error'
      tags:
        - Upstreams
      parameters:
        - $ref: '#/components/parameters/UpstreamId'
    delete:
      operationId: delete-upstream
      summary: Delete an Upstream
      description: Delete an Upstream
      responses:
        '204':
          description: Successfully deleted Upstream or the resource didn't exist
        '401':
          $ref: '#/components/responses/HTTP401Error'
      tags:
        - Upstreams
      parameters:
        - $ref: '#/components/parameters/UpstreamId'
  /v2/control-planes/{controlPlaneId}/core-entities/upstreams/{UpstreamIdForTarget}/targets:
    parameters:
      - $ref: '#/components/parameters/ControlPlaneId'
    get:
      operationId: list-target-with-upstream
      summary: List all Targets associated with an Upstream
      description: List all Targets associated with a an Upstream
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/Target'
                    type: array
                  offset:
                    $ref: '#/components/schemas/PaginationOffsetResponse'
                type: object
          description: A successful response listing Targets
      tags:
        - Targets
      parameters:
        - $ref: '#/components/parameters/UpstreamIdForTarget'
        - $ref: '#/components/parameters/PaginationSize'
        - $ref: '#/components/parameters/PaginationOffset'
        - $ref: '#/components/parameters/PaginationTagsFilter'
    post:
      operationId: create-target-with-upstream
      summary: Create a new Target associated with an Upstream
      description: Create a new Target associated with an Upstream
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TargetWithoutParents'
        description: Description of new Target for creation
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Target'
          description: Successfully created Target
      tags:
        - Targets
      parameters:
        - $ref: '#/components/parameters/UpstreamIdForTarget'
  /v2/control-planes/{controlPlaneId}/core-entities/upstreams/{UpstreamIdForTarget}/targets/{TargetId}:
    parameters:
      - $ref: '#/components/parameters/ControlPlaneId'
    get:
      operationId: get-target-with-upstream
      summary: Fetch a Target associated with an Upstream
      description: Get a Target associated with an Upstream using ID or target.
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Target'
          description: Successfully fetched Target
        '404':
          description: Resource does not exist
      tags:
        - Targets
      parameters:
        - $ref: '#/components/parameters/UpstreamIdForTarget'
        - $ref: '#/components/parameters/TargetId'
    put:
      operationId: upsert-target-with-upstream
      summary: Upsert a Target associated with an Upstream
      description: >-
        Create or Update a Target associated with an Upstream using ID or target.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TargetWithoutParents'
        description: Description of the Target
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Target'
          description: Successfully upserted Target
      tags:
        - Targets
      parameters:
        - $ref: '#/components/parameters/UpstreamIdForTarget'
        - $ref: '#/components/parameters/TargetId'
    delete:
      operationId: delete-target-with-upstream
      summary: Delete a a Target associated with a an Upstream
      description: Delete a a Target associated with a an Upstream using ID or target.
      responses:
        '204':
          description: Successfully deleted Target or the resource didn't exist
      tags:
        - Targets
      parameters:
        - $ref: '#/components/parameters/UpstreamIdForTarget'
        - $ref: '#/components/parameters/TargetId'
  /v2/control-planes/{controlPlaneId}/core-entities/vaults:
    parameters:
      - $ref: '#/components/parameters/ControlPlaneId'
    get:
      operationId: list-vault
      summary: List all Vaults
      description: List all Vaults
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/Vault'
                    type: array
                  offset:
                    $ref: '#/components/schemas/PaginationOffsetResponse'
                type: object
          description: A successful response listing Vaults
        '401':
          $ref: '#/components/responses/HTTP401Error'
      tags:
        - Vaults
      parameters:
        - $ref: '#/components/parameters/PaginationSize'
        - $ref: '#/components/parameters/PaginationOffset'
        - $ref: '#/components/parameters/PaginationTagsFilter'
    post:
      operationId: create-vault
      summary: Create a new Vault
      description: Create a new Vault
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Vault'
        description: Description of the new Vault for creation
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vault'
          description: Successfully created Vault
        '401':
          $ref: '#/components/responses/HTTP401Error'
      tags:
        - Vaults
  /v2/control-planes/{controlPlaneId}/core-entities/vaults/{VaultId}:
    parameters:
      - $ref: '#/components/parameters/ControlPlaneId'
    get:
      operationId: get-vault
      summary: Fetch a Vault
      description: Get a Vault using ID or prefix.
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vault'
          description: Successfully fetched Vault
        '401':
          $ref: '#/components/responses/HTTP401Error'
        '404':
          description: Resource does not exist
      tags:
        - Vaults
      parameters:
        - $ref: '#/components/parameters/VaultId'
    put:
      operationId: upsert-vault
      summary: Upsert a Vault
      description: Create or Update Vault using ID or prefix.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Vault'
        description: Description of the Vault
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vault'
          description: Successfully upserted Vault
        '401':
          $ref: '#/components/responses/HTTP401Error'
      tags:
        - Vaults
      parameters:
        - $ref: '#/components/parameters/VaultId'
    delete:
      operationId: delete-vault
      summary: Delete a Vault
      description: Delete a Vault
      responses:
        '204':
          description: Successfully deleted Vault or the resource didn't exist
        '401':
          $ref: '#/components/responses/HTTP401Error'
      tags:
        - Vaults
      parameters:
        - $ref: '#/components/parameters/VaultId'
  /v2/control-planes/{controlPlaneId}/dp-client-certificates:
    parameters:
      - $ref: '#/components/parameters/controlPlaneId'
    get:
      operationId: list-dp-client-certificates
      summary: List DP Client Certificates
      description: >-
        Returns a list of pinned dataplane client certificates that are associated to this control plane. A pinned dataplane certificate allows dataplanes configured with the certificate and corresponding private key to establish connection with this control plane.
      responses:
        '200':
          $ref: '#/components/responses/ListDataPlaneCertificatesResponse'
      tags:
        - DP Certificates
      parameters:
        - $ref: '#/components/parameters/PageSize'
        - $ref: '#/components/parameters/PageAfter'
    post:
      x-speakeasy-entity-operation: GatewayDataPlaneClientCertificate#create
      operationId: create-dataplane-certificate
      summary: Pin New DP Client Certificate
      description: >-
        Pin a new DP Client Certificate to this control plane. A pinned dataplane certificate allows dataplanes configured with the certificate and corresponding private key to establish connection with this control plane.
      requestBody:
        $ref: '#/components/requestBodies/DataPlaneClientCertificateRequest'
      responses:
        '201':
          $ref: '#/components/responses/DataPlaneClientCertificateResponse'
      tags:
        - DP Certificates
  /v2/control-planes/{controlPlaneId}/dp-client-certificates/{certificateId}:
    parameters:
      - $ref: '#/components/parameters/controlPlaneId'
      - $ref: '#/components/parameters/DataPlaneCertificateId'
    get:
      x-speakeasy-entity-operation: GatewayDataPlaneClientCertificate#read
      operationId: get-dataplane-certificate
      summary: Fetch DP Client Certificate
      description: >-
        Retrieve a pinned dataplane client certificate associated to this control plane. A pinned dataplane certificate allows dataplanes configured with the certificate and corresponding private key to establish connection with this control plane.
      tags:
        - DP Certificates
      responses:
        '200':
          $ref: '#/components/responses/DataPlaneClientCertificateResponse'
    delete:
      x-speakeasy-entity-operation: GatewayDataPlaneClientCertificate#delete
      operationId: delete-dataplane-certificate
      summary: Delete DP Client Certificate
      description: >-
        Remove a pinned dataplane client certificate associated to this control plane. Removing a pinned dataplane certificate would invalidate any dataplanes currently connected to this control plane using this certificate.
      responses:
        '204':
          description: No Content
      tags:
        - DP Certificates
  /v2/control-planes/{controlPlaneId}/expected-config-hash:
    parameters:
      - $ref: '#/components/parameters/controlPlaneId'
    get:
      operationId: get-expected-config-hash
      summary: Fetch Expected Config Hash
      description: >-
        Retrieve the expected config hash for this control plane. The expected config hash can be used to verify if the config hash of a data plane node is up to date with the control plane. The config hash will be the same if they are in sync.
      tags:
        - DP Nodes
      responses:
        '200':
          $ref: '#/components/responses/get-expected-config-hash'
  /v2/control-planes/{controlPlaneId}/nodes:
    parameters:
      - $ref: '#/components/parameters/controlPlaneId'
    get:
      operationId: list-dataplane-nodes
      summary: List Data Plane Node Records
      description: >-
        Returns a list of data plane node records that are associated to this control plane. A data plane node record contains metadata information for the data plane running Kong Gateway.
      responses:
        '200':
          $ref: '#/components/responses/list-nodes'
      tags:
        - DP Nodes
      parameters:
        - $ref: '#/components/parameters/PageSize'
        - $ref: '#/components/parameters/PageAfter'
  /v2/control-planes/{controlPlaneId}/nodes/{nodeId}:
    parameters:
      - schema:
          type: string
        name: nodeId
        in: path
        required: true
      - $ref: '#/components/parameters/controlPlaneId'
    get:
      operationId: get-nodes-node_id
      summary: Fetch Data Plane Node Record
      description: >-
        Retrieve a specific data plane node record associated to this control plane. A data plane node record contains all the metadata information of the Kong Gateway dataplane.
      responses:
        '200':
          $ref: '#/components/responses/get-node'
      tags:
        - DP Nodes
      parameters:
        - $ref: '#/components/parameters/pagination-size'
        - $ref: '#/components/parameters/pagination-tags-filter'
    delete:
      operationId: delete-nodes-node_id
      summary: Delete Data Plane Node Record
      description: >-
        Remove a specific data plane node record associated to this control plane. Deleting this record does not prevent the data plane node from re-connecting to the control plane.
      responses:
        '204':
          description: No Content
      tags:
        - DP Nodes
  /v2/control-planes/{controlPlaneId}/nodes/eol:
    parameters:
      - $ref: '#/components/parameters/controlPlaneId'
    get:
      operationId: get-nodes-eol
      summary: List End-of-Life Data Plane Node Records
      description: >-
        Returns a list of records of data plane nodes, whose versions are approaching End of Full Support/End of Life, that are associated with this control plane. Each record contains a data plane node's id, version, and corresponding resolution message to upgrade to the closest Long Term Support version.
      responses:
        '200':
          $ref: '#/components/responses/list-nodes-eol'
      tags:
        - DP Nodes
      parameters:
        - $ref: '#/components/parameters/PageSize'
        - $ref: '#/components/parameters/PageAfter'
  /v2/control-planes/{id}:
    parameters:
      - schema:
          type: string
          format: uuid
          example: d32d905a-ed33-46a3-a093-d8f536af9a8a
        name: id
        in: path
        required: true
        description: The control plane ID
    get:
      x-speakeasy-entity-operation: GatewayControlPlane#read
      operationId: get-control-plane
      summary: Fetch Control Plane
      description: Returns information about a team from a given team ID.
      responses:
        '200':
          $ref: '#/components/responses/RetrieveControlPlaneResponse'
        '400':
          $ref: '#/components/responses/ControlPlanesBadRequest'
        '401':
          $ref: '#/components/responses/ControlPlaneUnauthenticated'
        '403':
          $ref: '#/components/responses/ControlPlanePermissionDenied'
        '404':
          $ref: '#/components/responses/ControlPlaneNotFound'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      tags:
        - Control Planes
    patch:
      x-speakeasy-entity-operation: GatewayControlPlane#update
      operationId: update-control-plane
      summary: Update Control Plane
      description: Update an individual control plane.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateControlPlaneRequest'
      responses:
        '200':
          $ref: '#/components/responses/UpdateControlPlaneResponse'
        '400':
          $ref: '#/components/responses/ControlPlanesBadRequest'
        '401':
          $ref: '#/components/responses/ControlPlaneUnauthenticated'
        '403':
          $ref: '#/components/responses/ControlPlanePermissionDenied'
        '404':
          $ref: '#/components/responses/ControlPlaneNotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      tags:
        - Control Planes
    delete:
      x-speakeasy-entity-operation: GatewayControlPlane#delete
      operationId: delete-control-plane
      summary: Delete Control Plane
      description: Delete an individual control plane.
      responses:
        '204':
          description: No Content
        '400':
          $ref: '#/components/responses/ControlPlanesBadRequest'
        '401':
          $ref: '#/components/responses/ControlPlaneUnauthenticated'
        '403':
          $ref: '#/components/responses/ControlPlanePermissionDenied'
        '404':
          $ref: '#/components/responses/ControlPlaneNotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      tags:
        - Control Planes
  /v2/control-planes/{id}/group-member-status:
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: ID of a control plane
    get:
      operationId: get-control-planes-id-group-member-status
      summary: Control Plane Group Member Status
      description: Determines the group membership status of a control plane.
      tags:
        - Control Plane Groups
      responses:
        '200':
          $ref: '#/components/responses/GetGroupMemberStatus'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /v2/control-planes/{id}/group-memberships:
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: ID of a control plane group
    get:
      operationId: get-control-planes-id-group-memberships
      summary: List Control Plane Group Memberships
      description: >-
        Returns an array of control planes that are a member of this control plane group.
      tags:
        - Control Plane Groups
      responses:
        '200':
          $ref: '#/components/responses/ListGroupMemberships'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      parameters:
        - $ref: '#/components/parameters/PageSize'
        - $ref: '#/components/parameters/PageAfter'
  /v2/control-planes/{id}/group-memberships/add:
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: ID of a control plane group
    post:
      x-speakeasy-entity-operation: GatewayControlPlaneMembership#create
      operationId: post-control-planes-id-group-memberships-add
      summary: Add Control Plane Group Members
      description: Adds one or more control planes as a member of a control plane group.
      requestBody:
        $ref: '#/components/requestBodies/GroupMemebershipAdd'
      responses:
        '204':
          description: No Content
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      tags:
        - Control Plane Groups
  /v2/control-planes/{id}/group-memberships/remove:
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: ID of a control plane group
    post:
      x-speakeasy-entity-operation: GatewayControlPlaneMembership#delete
      operationId: post-control-planes-id-group-memberships-remove
      summary: Remove Control Plane Group Members
      description: >-
        Removes one or more control planes from the members of a control plane group.
      requestBody:
        $ref: '#/components/requestBodies/GroupMembershipRemove'
      tags:
        - Control Plane Groups
      responses:
        '204':
          description: No Content
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /v2/control-planes/{id}/group-status:
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: ID of a control plane group
    get:
      operationId: get-control-planes-id-group-status
      summary: Get Control Plane Group Status
      description: >-
        Returns the status of a control plane group, including existing conflicts.
      tags:
        - Control Plane Groups
      responses:
        '200':
          $ref: '#/components/responses/GetGroupStatus'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /v3/authenticate/{organizationLoginPath}:
    get:
      operationId: authenticate-sso
      summary: SSO Callback
      description: Callback for authenticating via an organization's IdP
      tags:
        - Authentication
      responses:
        '302':
          description: Found
        '400':
          $ref: '#/components/responses/IdentityBadRequest'
        '401':
          $ref: '#/components/responses/IdentityUnauthenticated'
      parameters:
        - in: path
          name: organizationLoginPath
          description: The login path for the organization.
          required: true
          schema:
            type: string
        - in: query
          name: return_to
          description: Return destination for the callback.
          schema:
            type: string
      servers:
        - url: https://global.api.konghq.com/
  /v3/authentication-settings:
    get:
      operationId: get-authentication-settings
      summary: Get Auth Settings
      description: >-
        Returns authentication configuration, which determines how users can log in and how they are assigned to teams.
      tags:
        - Auth Settings
      responses:
        '200':
          $ref: '#/components/responses/AuthenticationSettings'
        '401':
          $ref: '#/components/responses/IdentityUnauthenticated'
      servers:
        - url: https://global.api.konghq.com/
    patch:
      operationId: update-authentication-settings
      summary: Update Auth Settings
      description: Updates authentication configuration.
      requestBody:
        $ref: '#/components/requestBodies/UpdateAuthenticationSettings'
      tags:
        - Auth Settings
      responses:
        '200':
          $ref: '#/components/responses/AuthenticationSettings'
        '400':
          $ref: '#/components/responses/IdentityBadRequest'
        '401':
          $ref: '#/components/responses/IdentityUnauthenticated'
        '403':
          $ref: '#/components/responses/Unauthorized'
      servers:
        - url: https://global.api.konghq.com/
  /v3/identity-provider:
    parameters: []
    get:
      operationId: get-idp-configuration
      summary: Fetch IdP Configuration
      description: Fetch the IdP configuration.
      responses:
        '200':
          $ref: '#/components/responses/IdPConfiguration'
        '400':
          $ref: '#/components/responses/IdentityBadRequest'
        '401':
          $ref: '#/components/responses/IdentityUnauthenticated'
        '403':
          $ref: '#/components/responses/IdentityPermissionDenied'
        '404':
          $ref: '#/components/responses/IdentityNotFound'
      tags:
        - Auth Settings
      servers:
        - url: https://global.api.konghq.com/
    patch:
      operationId: update-idp-configuration
      summary: Update IdP Configuration
      description: Update the IdP configuration.
      requestBody:
        $ref: '#/components/requestBodies/UpdateIdPConfiguration'
      responses:
        '200':
          $ref: '#/components/responses/IdPConfiguration'
        '400':
          $ref: '#/components/responses/IdentityBadRequest'
        '401':
          $ref: '#/components/responses/IdentityUnauthenticated'
        '403':
          $ref: '#/components/responses/Unauthorized'
      tags:
        - Auth Settings
      servers:
        - url: https://global.api.konghq.com/
  /v3/identity-provider/team-group-mappings:
    get:
      operationId: get-team-group-mappings
      summary: Fetch Team Group Mappings
      description: >-
        Retrieves the mappings between Konnect Teams and Identity Provider Groups.

        Returns a 400 error if an Identity Provider has not yet been configured.
      responses:
        '200':
          $ref: '#/components/responses/TeamGroupMappingCollection'
        '400':
          $ref: '#/components/responses/IdentityBadRequest'
        '401':
          $ref: '#/components/responses/IdentityUnauthenticated'
        '403':
          $ref: '#/components/responses/IdentityPermissionDenied'
      tags:
        - Auth Settings
      parameters:
        - $ref: '#/components/parameters/PageSize'
        - $ref: '#/components/parameters/PageNumber'
      servers:
        - url: https://global.api.konghq.com/
    patch:
      operationId: patch-team-group-mappings
      summary: Patch Mappings by Team ID
      description: >-
        Allows partial updates to the mappings between Konnect Teams and Identity Provider Groups.

        The request body must be keyed on team ID. For a given team ID, the given group list is a

        complete replacement. To remove all mappings for a given team, provide an empty group list.


        Returns a 400 error if an Identity Provider has not yet been configured, or if a team ID in

        the request body is not found or is not a UUID.
      requestBody:
        $ref: '#/components/requestBodies/PatchTeamGroupMappings'
      responses:
        '200':
          $ref: '#/components/responses/TeamGroupMappingCollection'
        '400':
          $ref: '#/components/responses/IdentityBadRequest'
        '401':
          $ref: '#/components/responses/IdentityUnauthenticated'
        '403':
          $ref: '#/components/responses/IdentityPermissionDenied'
      tags:
        - Auth Settings
      servers:
        - url: https://global.api.konghq.com/
  /v3/identity-provider/team-mappings:
    get:
      operationId: get-idp-team-mappings
      summary: Fetch Team Mapping
      description: Fetch the IdP group to Konnect team mapping.
      responses:
        '200':
          $ref: '#/components/responses/TeamMappingResponse'
        '401':
          $ref: '#/components/responses/IdentityUnauthenticated'
        '403':
          $ref: '#/components/responses/IdentityPermissionDenied'
        '404':
          $ref: '#/components/responses/IdentityNotFound'
        '412':
          $ref: '#/components/responses/PreconditionFailed'
      tags:
        - Auth Settings
      parameters:
        - $ref: '#/components/parameters/PageSize'
        - $ref: '#/components/parameters/PageNumber'
      servers:
        - url: https://global.api.konghq.com/
    put:
      operationId: update-idp-team-mappings
      summary: Update Team Mappings
      description: Updates the IdP group to Konnect team mapping.
      requestBody:
        $ref: '#/components/requestBodies/UpdateTeamMappings'
      responses:
        '200':
          $ref: '#/components/responses/TeamMappingCollection'
        '400':
          $ref: '#/components/responses/IdentityBadRequest'
        '401':
          $ref: '#/components/responses/IdentityPermissionDenied'
        '404':
          $ref: '#/components/responses/IdentityNotFound'
        '412':
          $ref: '#/components/responses/PreconditionFailed'
      tags:
        - Auth Settings
      servers:
        - url: https://global.api.konghq.com/
  /v3/invites:
    post:
      operationId: invite-user
      summary: Invite User
      description: >-
        Sends an invitation email to invite a user to the Konnect organization. The email contains a link with a one time token to accept the invitation. Upon accepting the invitation, the user is directed to https://cloud.konghq.com/login to complete registration.
      requestBody:
        $ref: '#/components/requestBodies/InviteUser'
      responses:
        '201':
          description: Created
        '400':
          $ref: '#/components/responses/IdentityBadRequest'
        '409':
          $ref: '#/components/responses/IdentityConflict'
        '429':
          $ref: '#/components/responses/RateLimited'
      tags:
        - Invites
      servers:
        - url: https://global.api.konghq.com/
  /v3/organizations/impersonation:
    get:
      operationId: get-impersonation-settings
      summary: Get Impersonation Settings
      description: >-
        Returns Impersonation Settings, which determines if user impersonation is allowed for an organization.
      tags:
        - Impersonation Settings
      responses:
        '200':
          $ref: '#/components/responses/GetImpersonationSettingsResponse'
        '401':
          $ref: '#/components/responses/IdentityUnauthenticated'
        '404':
          $ref: '#/components/responses/IdentityNotFound'
      servers:
        - url: https://global.api.konghq.com/
    patch:
      operationId: update-impersonation-settings
      summary: Update Impersonation Settings
      description: Updates Impersonation Settings.
      requestBody:
        $ref: '#/components/requestBodies/UpdateImpersonationSettingsRequest'
      tags:
        - Impersonation Settings
      responses:
        '200':
          $ref: '#/components/responses/UpdateImpersonationSettingsResponse'
        '400':
          $ref: '#/components/responses/IdentityBadRequest'
        '401':
          $ref: '#/components/responses/IdentityUnauthenticated'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/IdentityNotFound'
      servers:
        - url: https://global.api.konghq.com/
  /v3/organizations/me:
    get:
      x-speakeasy-entity-operation: OrganizationsMe#get
      operationId: get-organizations-me
      summary: Retrieve My Organization
      description: >-
        Returns the organization of the user identified in the token of the request.
      tags:
        - Me
      responses:
        '200':
          $ref: '#/components/responses/MeOrganization'
        '401':
          $ref: '#/components/responses/IdentityUnauthenticated'
      servers:
        - url: https://global.api.konghq.com/
  /v3/roles:
    get:
      operationId: get-predefined-roles
      summary: Get Predefined Roles
      description: Retrieves the predefined, or system managed, roles.
      responses:
        '200':
          $ref: '#/components/responses/Roles'
        '400':
          $ref: '#/components/responses/IdentityBadRequest'
        '401':
          $ref: '#/components/responses/IdentityUnauthenticated'
      tags:
        - Roles
      servers:
        - url: https://global.api.konghq.com/
  /v3/system-accounts:
    get:
      operationId: get-system-accounts
      summary: List System Accounts
      description: >-
        Returns an array of system accounts (SA) in the organization. Returns 400 if any filter parameters are invalid.
      tags:
        - System Accounts
      responses:
        '200':
          $ref: '#/components/responses/SystemAccountCollection'
        '400':
          $ref: '#/components/responses/IdentityBadRequest'
        '401':
          $ref: '#/components/responses/IdentityUnauthenticated'
        '403':
          $ref: '#/components/responses/Unauthorized'
      parameters:
        - $ref: '#/components/parameters/PageSize'
        - $ref: '#/components/parameters/PageNumber'
        - schema:
            type: object
            properties:
              name:
                $ref: '#/components/schemas/StringFieldFilter'
              description:
                $ref: '#/components/schemas/StringFieldFilter'
              konnect_managed:
                $ref: '#/components/schemas/BooleanFieldFilter'
          in: query
          name: filter
          description: Filter system accounts returned in the response.
          required: false
          style: deepObject
      servers:
        - url: https://global.api.konghq.com/
    post:
      x-speakeasy-entity-operation: SystemAccount#create
      operationId: post-system-accounts
      summary: Create System Account
      description: >-
        Creates a system account. Returns a 409 if a system account with the same name already exists.
      requestBody:
        $ref: '#/components/requestBodies/CreateSystemAccount'
      tags:
        - System Accounts
      responses:
        '201':
          $ref: '#/components/responses/SystemAccountSingle'
        '401':
          $ref: '#/components/responses/IdentityUnauthenticated'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '409':
          $ref: '#/components/responses/IdentityConflict'
      servers:
        - url: https://global.api.konghq.com/
  /v3/system-accounts/{accountId}:
    parameters:
      - schema:
          type: string
        name: accountId
        in: path
        required: true
        description: ID of the system account.
        x-speakeasy-match: id
    get:
      x-speakeasy-entity-operation: SystemAccount#read
      operationId: get-system-accounts-id
      summary: Fetch System Account
      description: >-
        Returns the system account (SA) for the SA ID specified as a path parameter.
      tags:
        - System Accounts
      responses:
        '200':
          $ref: '#/components/responses/SystemAccountSingle'
        '401':
          $ref: '#/components/responses/IdentityUnauthenticated'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/IdentityNotFound'
      servers:
        - url: https://global.api.konghq.com/
    patch:
      x-speakeasy-entity-operation: SystemAccount#update
      operationId: patch-system-accounts-id
      summary: Update System Account
      description: >-
        Updates the specified system account. Returns a 409 if the updated name is the same as another system account in the organization.
      requestBody:
        $ref: '#/components/requestBodies/UpdateSystemAccount'
      responses:
        '200':
          $ref: '#/components/responses/SystemAccountSingle'
        '401':
          $ref: '#/components/responses/IdentityUnauthenticated'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/IdentityNotFound'
        '409':
          $ref: '#/components/responses/IdentityConflict'
      tags:
        - System Accounts
      servers:
        - url: https://global.api.konghq.com/
    delete:
      x-speakeasy-entity-operation: SystemAccount#delete
      operationId: delete-system-accounts-id
      summary: Delete System Account
      description: >-
        Deletes the specified system account. Returns 404 if the requested account was not found.
      responses:
        '204':
          description: No Content
        '401':
          $ref: '#/components/responses/IdentityUnauthenticated'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/IdentityNotFound'
      tags:
        - System Accounts
      servers:
        - url: https://global.api.konghq.com/
  /v3/system-accounts/{accountId}/access-tokens:
    parameters:
      - schema:
          type: string
        name: accountId
        in: path
        required: true
        description: ID of the system account.
    get:
      operationId: get-system-account-id-access-tokens
      summary: List System Account Access Tokens
      description: >-
        Returns the access tokens for the specified system account. Returns 400 if any filter parameters are invalid.
      tags:
        - System Accounts - Access Tokens
      responses:
        '200':
          $ref: '#/components/responses/SystemAccountAccessTokenCollection'
        '400':
          $ref: '#/components/responses/IdentityBadRequest'
        '401':
          $ref: '#/components/responses/IdentityUnauthenticated'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/IdentityNotFound'
      parameters:
        - $ref: '#/components/parameters/PageSize'
        - $ref: '#/components/parameters/PageNumber'
        - schema:
            type: object
            properties:
              name:
                $ref: '#/components/schemas/StringFieldFilter'
          in: query
          name: filter
          description: Filter access tokens returned in the response.
          required: false
          style: deepObject
      servers:
        - url: https://global.api.konghq.com/
    post:
      x-speakeasy-entity-operation: SystemAccountAccessToken#create
      operationId: post-system-accounts-id-access-tokens
      summary: Create System Account Access Token
      description: >-
        Creates an access token for the specified system account (SA). The access token can be used for authenticating API and CLI requests. The token will only be displayed once on creation. Returns a 409 if the system account already has a token with the same name.
      requestBody:
        $ref: '#/components/requestBodies/CreateSystemAccountAccessToken'
      responses:
        '201':
          $ref: '#/components/responses/SystemAccountAccessTokenCreated'
        '401':
          $ref: '#/components/responses/IdentityUnauthenticated'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/IdentityNotFound'
        '409':
          $ref: '#/components/responses/IdentityConflict'
      tags:
        - System Accounts - Access Tokens
      servers:
        - url: https://global.api.konghq.com/
  /v3/system-accounts/{accountId}/access-tokens/{tokenId}:
    parameters:
      - schema:
          type: string
        name: accountId
        in: path
        required: true
        description: ID of the system account.
      - schema:
          type: string
        name: tokenId
        in: path
        required: true
        description: ID of the system account access token.
        x-speakeasy-match: id
    get:
      x-speakeasy-entity-operation: SystemAccountAccessToken#read
      operationId: get-system-accounts-id-access-tokens-id
      summary: Fetch System Account Access Token
      description: >-
        Returns the system account (SA) access token for the SA Access Token ID specified as a path parameter.
      responses:
        '200':
          $ref: '#/components/responses/SystemAccountAccessTokenSingle'
        '401':
          $ref: '#/components/responses/IdentityUnauthenticated'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/IdentityNotFound'
      tags:
        - System Accounts - Access Tokens
      parameters: []
      servers:
        - url: https://global.api.konghq.com/
    patch:
      x-speakeasy-entity-operation: SystemAccountAccessToken#update
      operationId: patch-system-accounts-id-access-tokens-id
      summary: Update System Account Access Token
      description: >-
        Updates the specified access token. Returns a 409 if the updated name is the same as another token belonging to the specified system user.
      requestBody:
        $ref: '#/components/requestBodies/UpdateSystemAccountAccessToken'
      responses:
        '200':
          $ref: '#/components/responses/SystemAccountAccessTokenSingle'
        '401':
          $ref: '#/components/responses/IdentityUnauthenticated'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/IdentityNotFound'
        '409':
          $ref: '#/components/responses/IdentityConflict'
      tags:
        - System Accounts - Access Tokens
      servers:
        - url: https://global.api.konghq.com/
    delete:
      x-speakeasy-entity-operation: SystemAccountAccessToken#delete
      operationId: delete-system-accounts-id-access-tokens-id
      summary: Delete System Account Access Token
      description: Deletes the specified token. Returns 404 if the token was not found.
      responses:
        '204':
          description: No Content
        '401':
          $ref: '#/components/responses/IdentityUnauthenticated'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/IdentityNotFound'
      tags:
        - System Accounts - Access Tokens
      servers:
        - url: https://global.api.konghq.com/
  /v3/system-accounts/{accountId}/assigned-roles:
    parameters:
      - schema:
          type: string
        name: accountId
        in: path
        required: true
        description: ID of the system account.
    get:
      operationId: get-system-accounts-accountId-assigned-roles
      summary: Fetch Assigned Roles for System Account
      description: >-
        Lists the roles belonging to a system account. Returns 400 if any filter parameters are invalid.
      responses:
        '200':
          $ref: '#/components/responses/AssignedRoleCollection'
        '400':
          $ref: '#/components/responses/IdentityBadRequest'
        '401':
          $ref: '#/components/responses/IdentityUnauthenticated'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/IdentityNotFound'
      tags:
        - System Accounts - Roles
      parameters:
        - schema:
            type: object
            properties:
              role_name:
                $ref: '#/components/schemas/StringFieldEqualsFilter'
              entity_type_name:
                $ref: '#/components/schemas/StringFieldEqualsFilter'
          in: query
          name: filter
          description: Filter roles returned in the response.
          required: false
          style: deepObject
      servers:
        - url: https://global.api.konghq.com/
    post:
      x-speakeasy-entity-operation: SystemAccountRole#create
      operationId: post-system-accounts-accountId-assigned-roles
      summary: Create Assigned Role for System Account
      description: >-
        Assigns a role to a system account. Returns 409 if role is already assigned.
      requestBody:
        $ref: '#/components/requestBodies/AssignRole'
      responses:
        '201':
          $ref: '#/components/responses/AssignedRoleSingle'
        '401':
          $ref: '#/components/responses/IdentityUnauthenticated'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/IdentityNotFound'
        '409':
          $ref: '#/components/responses/IdentityConflict'
      tags:
        - System Accounts - Roles
      servers:
        - url: https://global.api.konghq.com/
  /v3/system-accounts/{accountId}/assigned-roles/{roleId}:
    parameters:
      - schema:
          type: string
        name: accountId
        in: path
        required: true
        description: ID of the system account.
      - schema:
          type: string
        name: roleId
        in: path
        required: true
        description: ID of the role.
        x-speakeasy-match: id
    delete:
      x-speakeasy-entity-operation: SystemAccountRole#delete
      operationId: delete-system-accounts-accountId-assigned-roles-roleId
      summary: Delete Assigned Role from System Account
      description: >-
        Removes an assigned role from a system account. Returns 404 if the system account or assigned role were not found.
      responses:
        '204':
          description: No Content
        '401':
          $ref: '#/components/responses/IdentityUnauthenticated'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/IdentityNotFound'
      tags:
        - System Accounts - Roles
      servers:
        - url: https://global.api.konghq.com/
  /v3/system-accounts/{accountId}/teams:
    parameters:
      - schema:
          type: string
        name: accountId
        in: path
        required: true
        description: ID of the system account.
    get:
      operationId: get-system-accounts-accountId-teams
      summary: List Teams for a System Account
      description: Returns a paginated list of a teams that the system account belongs to.
      responses:
        '200':
          $ref: '#/components/responses/TeamCollection'
        '401':
          $ref: '#/components/responses/IdentityUnauthenticated'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/IdentityNotFound'
      tags:
        - System Accounts - Team Membership
      parameters:
        - $ref: '#/components/parameters/PageSize'
        - $ref: '#/components/parameters/PageNumber'
        - schema:
            type: object
            properties:
              name:
                $ref: '#/components/schemas/StringFieldFilter'
          in: query
          name: filter
          description: Filter teams returned in the response.
          required: false
          style: deepObject
      servers:
        - url: https://global.api.konghq.com/
  /v3/teams:
    parameters: []
    get:
      operationId: list-teams
      summary: List Teams
      description: >-
        Returns an array of team objects containing information about the Konnect Teams.
      responses:
        '200':
          $ref: '#/components/responses/TeamCollection'
        '400':
          $ref: '#/components/responses/IdentityBadRequest'
        '404':
          $ref: '#/components/responses/IdentityNotFound'
      tags:
        - Teams
      parameters:
        - $ref: '#/components/parameters/PageSize'
        - $ref: '#/components/parameters/PageNumber'
        - schema:
            type: object
            properties:
              name:
                $ref: '#/components/schemas/StringFieldFilter'
          in: query
          name: filter
          description: Filter teams returned in the response.
          required: false
          style: deepObject
      servers:
        - url: https://global.api.konghq.com/
    post:
      x-speakeasy-entity-operation: Team#create
      operationId: create-team
      summary: Create Team
      description: 'Creates a team in the Konnect Organization. '
      requestBody:
        $ref: '#/components/requestBodies/CreateTeam'
      responses:
        '201':
          $ref: '#/components/responses/TeamSingle'
        '400':
          $ref: '#/components/responses/IdentityBadRequest'
        '403':
          $ref: '#/components/responses/IdentityPermissionDenied'
      tags:
        - Teams
      servers:
        - url: https://global.api.konghq.com/
  /v3/teams/{teamId}:
    parameters:
      - schema:
          type: string
          format: uuid
          example: d32d905a-ed33-46a3-a093-d8f536af9a8a
        name: teamId
        in: path
        required: true
        description: The team ID
        x-speakeasy-match: id
    get:
      x-speakeasy-entity-operation: Team#read
      operationId: get-team
      summary: Fetch Team
      description: Returns information about a team from a given team ID.
      responses:
        '200':
          $ref: '#/components/responses/TeamSingle'
        '400':
          $ref: '#/components/responses/IdentityBadRequest'
        '404':
          $ref: '#/components/responses/IdentityNotFound'
      tags:
        - Teams
      servers:
        - url: https://global.api.konghq.com/
    patch:
      x-speakeasy-entity-operation: Team#update
      operationId: update-team
      summary: Update Team
      description: Updates an individual team.
      requestBody:
        $ref: '#/components/requestBodies/UpdateTeam'
      responses:
        '200':
          $ref: '#/components/responses/TeamSingle'
        '400':
          $ref: '#/components/responses/IdentityBadRequest'
        '404':
          $ref: '#/components/responses/IdentityNotFound'
      tags:
        - Teams
      servers:
        - url: https://global.api.konghq.com/
    delete:
      x-speakeasy-entity-operation: Team#delete
      operationId: delete-team
      summary: Delete Team
      description: Deletes an individual team. Returns 404 if the team is not found.
      responses:
        '204':
          description: No Content
        '400':
          $ref: '#/components/responses/IdentityBadRequest'
        '404':
          $ref: '#/components/responses/IdentityNotFound'
      tags:
        - Teams
      servers:
        - url: https://global.api.konghq.com/
  /v3/teams/{teamId}/assigned-roles:
    parameters:
      - schema:
          type: string
          format: uuid
          example: e81bc3e5-e9db-4764-b7dd-e81e39072cbe
        name: teamId
        in: path
        required: true
        description: The team ID
    get:
      operationId: list-team-roles
      summary: List Team Roles
      description: >-
        Lists the roles belonging to a team. Returns 400 if any filter parameters are invalid.
      tags:
        - Roles
      responses:
        '200':
          $ref: '#/components/responses/AssignedRoleCollection'
        '400':
          $ref: '#/components/responses/IdentityBadRequest'
        '401':
          $ref: '#/components/responses/IdentityUnauthenticated'
        '403':
          $ref: '#/components/responses/IdentityPermissionDenied'
        '404':
          $ref: '#/components/responses/IdentityNotFound'
      parameters:
        - schema:
            type: object
            properties:
              role_name:
                $ref: '#/components/schemas/StringFieldEqualsFilter'
              entity_type_name:
                $ref: '#/components/schemas/StringFieldEqualsFilter'
          in: query
          name: filter
          description: Filter roles returned in the response.
          required: false
          style: deepObject
      servers:
        - url: https://global.api.konghq.com/
    post:
      x-speakeasy-entity-operation: TeamRole#create
      operationId: teams-assign-role
      summary: Assign Team Role
      description: Assigns a role to a team. Returns 409 if role is already assigned.
      requestBody:
        $ref: '#/components/requestBodies/AssignRole'
      responses:
        '201':
          $ref: '#/components/responses/AssignedRoleSingle'
        '400':
          $ref: '#/components/responses/IdentityBadRequest'
        '401':
          $ref: '#/components/responses/IdentityUnauthenticated'
        '403':
          $ref: '#/components/responses/IdentityPermissionDenied'
        '404':
          $ref: '#/components/responses/IdentityNotFound'
        '409':
          $ref: '#/components/responses/IdentityConflict'
      tags:
        - Roles
      servers:
        - url: https://global.api.konghq.com/
  /v3/teams/{teamId}/assigned-roles/{roleId}:
    parameters:
      - schema:
          type: string
          format: uuid
          example: e81bc3e5-e9db-4764-b7dd-e81e39072cbe
        name: teamId
        in: path
        required: true
        description: The team ID.
      - schema:
          type: string
          example: 8350205f-a305-4e39-abe9-bc082a80091a
          format: uuid
        name: roleId
        in: path
        required: true
        description: The role ID.
        x-speakeasy-match: id
    delete:
      x-speakeasy-entity-operation: TeamRole#delete
      operationId: teams-remove-role
      summary: Remove Team Role
      description: >-
        Removes an assigned role from a team. Returns 404 if the requested team or assigned role were not found.
      responses:
        '204':
          description: No Content
        '400':
          $ref: '#/components/responses/IdentityBadRequest'
        '401':
          $ref: '#/components/responses/IdentityUnauthenticated'
        '403':
          $ref: '#/components/responses/IdentityPermissionDenied'
        '404':
          $ref: '#/components/responses/IdentityNotFound'
      tags:
        - Roles
      servers:
        - url: https://global.api.konghq.com/
  /v3/teams/{teamId}/system-accounts:
    parameters:
      - schema:
          type: string
        name: teamId
        in: path
        required: true
        description: ID of the team.
    get:
      operationId: get-teams-teamId-system-accounts
      summary: List System Accounts on a Team
      description: >-
        Returns a paginated list of system accounts that belong to the team specified in the path parameter.
      responses:
        '200':
          $ref: '#/components/responses/SystemAccountCollection'
        '401':
          $ref: '#/components/responses/IdentityUnauthenticated'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/IdentityNotFound'
      tags:
        - System Accounts - Team Membership
      parameters:
        - $ref: '#/components/parameters/PageSize'
        - $ref: '#/components/parameters/PageNumber'
        - schema:
            type: object
            properties:
              name:
                $ref: '#/components/schemas/StringFieldFilter'
          in: query
          name: filter
          description: Filter system accounts returned in the response.
          required: false
          style: deepObject
      servers:
        - url: https://global.api.konghq.com/
    post:
      x-speakeasy-entity-operation: SystemAccountTeam#create
      operationId: post-teams-teamId-system-accounts
      summary: Add System Account to a Team
      description: >-
        Adds a system account to a team. Returns a 409 if the system account is already a member of the team.
      requestBody:
        $ref: '#/components/requestBodies/AddSystemAccountToTeam'
      responses:
        '201':
          description: Created
        '401':
          $ref: '#/components/responses/IdentityUnauthenticated'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/IdentityNotFound'
        '409':
          $ref: '#/components/responses/IdentityConflict'
      tags:
        - System Accounts - Team Membership
      servers:
        - url: https://global.api.konghq.com/
  /v3/teams/{teamId}/system-accounts/{accountId}:
    parameters:
      - schema:
          type: string
        name: teamId
        in: path
        required: true
        description: ID of the team.
      - schema:
          type: string
        name: accountId
        in: path
        required: true
        description: ID of the system account.
    delete:
      x-speakeasy-entity-operation: SystemAccountTeam#delete
      operationId: delete-teams-teamId-system-accounts-accountId
      summary: Remove System Account From Team
      description: >-
        Removes a system account from a team. Returns 404 if the team or system account were not found.
      responses:
        '204':
          description: No Content
        '401':
          $ref: '#/components/responses/IdentityUnauthenticated'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/IdentityNotFound'
      tags:
        - System Accounts - Team Membership
      servers:
        - url: https://global.api.konghq.com/
  /v3/teams/{teamId}/users:
    parameters:
      - schema:
          type: string
          example: d32d905a-ed33-46a3-a093-d8f536af9a8a
          format: uuid
        name: teamId
        in: path
        required: true
        description: ID of the team.
    get:
      operationId: list-team-users
      summary: List Team Users
      description: >-
        Returns a paginated list of users that belong to the team specified in the path parameter.
      responses:
        '200':
          $ref: '#/components/responses/UserCollection'
        '400':
          $ref: '#/components/responses/IdentityBadRequest'
        '404':
          $ref: '#/components/responses/IdentityNotFound'
      tags:
        - Team Membership
      parameters:
        - $ref: '#/components/parameters/PageSize'
        - $ref: '#/components/parameters/PageNumber'
        - schema:
            type: object
            properties:
              id:
                $ref: '#/components/schemas/StringFieldEqualsFilter'
              email:
                $ref: '#/components/schemas/StringFieldFilter'
              full_name:
                $ref: '#/components/schemas/StringFieldFilter'
              active:
                $ref: '#/components/schemas/BooleanFieldFilter'
          in: query
          name: filter
          description: Filter users returned in the response.
          required: false
          style: deepObject
      servers:
        - url: https://global.api.konghq.com/
    post:
      x-speakeasy-entity-operation: TeamUser#create
      operationId: add-user-to-team
      summary: Add User
      description: Adds a user to a team.
      requestBody:
        $ref: '#/components/requestBodies/AddUserToTeam'
      responses:
        '201':
          description: Created
        '400':
          $ref: '#/components/responses/IdentityBadRequest'
        '404':
          $ref: '#/components/responses/IdentityNotFound'
      tags:
        - Team Membership
      servers:
        - url: https://global.api.konghq.com/
  /v3/teams/{teamId}/users/{userId}:
    parameters:
      - schema:
          type: string
          format: uuid
          example: d32d905a-ed33-46a3-a093-d8f536af9a8a
        name: userId
        in: path
        required: true
        description: User ID
      - schema:
          type: string
          example: d32d905a-ed33-46a3-a093-d8f536af9a8a
          format: uuid
        name: teamId
        in: path
        required: true
        description: Team ID.
    delete:
      x-speakeasy-entity-operation: TeamUser#delete
      operationId: remove-user-from-team
      summary: Remove User
      description: >-
        Removes a user from a team.

        If the user was removed, returns a 204 empty response. Returns 404 if the user or team were not found.
      responses:
        '204':
          description: No Content
        '400':
          $ref: '#/components/responses/IdentityBadRequest'
        '404':
          $ref: '#/components/responses/IdentityNotFound'
      tags:
        - Team Membership
      servers:
        - url: https://global.api.konghq.com/
  /v3/users:
    get:
      operationId: list-users
      summary: List Users
      description: Returns a paginated list of user objects.
      tags:
        - Users
      responses:
        '200':
          $ref: '#/components/responses/UserCollection'
        '400':
          $ref: '#/components/responses/IdentityBadRequest'
      parameters:
        - $ref: '#/components/parameters/PageSize'
        - $ref: '#/components/parameters/PageNumber'
        - schema:
            type: object
            properties:
              id:
                $ref: '#/components/schemas/StringFieldEqualsFilter'
              email:
                $ref: '#/components/schemas/StringFieldFilter'
              full_name:
                $ref: '#/components/schemas/StringFieldFilter'
              active:
                $ref: '#/components/schemas/BooleanFieldFilter'
          in: query
          name: filter
          description: Filter users returned in the response.
          required: false
          style: deepObject
      servers:
        - url: https://global.api.konghq.com/
  /v3/users/{userId}:
    parameters:
      - schema:
          type: string
          format: uuid
          example: d32d905a-ed33-46a3-a093-d8f536af9a8a
        name: userId
        in: path
        required: true
        description: The ID of the user being deleted.
    get:
      operationId: get-user
      summary: Fetch User
      description: Returns the user object for the user ID specified as a path parameter.
      tags:
        - Users
      responses:
        '200':
          $ref: '#/components/responses/UserSingle'
        '400':
          $ref: '#/components/responses/IdentityBadRequest'
        '404':
          $ref: '#/components/responses/IdentityNotFound'
      servers:
        - url: https://global.api.konghq.com/
    patch:
      operationId: update-user
      summary: Update User
      description: Update an individual user.
      requestBody:
        $ref: '#/components/requestBodies/UpdateUser'
      responses:
        '200':
          $ref: '#/components/responses/UserSingle'
        '401':
          $ref: '#/components/responses/IdentityUnauthenticated'
        '403':
          $ref: '#/components/responses/IdentityPermissionDenied'
        '404':
          $ref: '#/components/responses/IdentityNotFound'
      tags:
        - Users
      servers:
        - url: https://global.api.konghq.com/
    delete:
      operationId: delete-user
      summary: Delete User
      description: >-
        Deletes an individual user. Returns 404 if the requested user was not found.
      responses:
        '204':
          description: No Content
        '404':
          $ref: '#/components/responses/IdentityNotFound'
      tags:
        - Users
      servers:
        - url: https://global.api.konghq.com/
  /v3/users/{userId}/assigned-roles:
    parameters:
      - schema:
          type: string
          format: uuid
          example: e81bc3e5-e9db-4764-b7dd-e81e39072cbe
        name: userId
        in: path
        required: true
        description: The user ID
    get:
      operationId: list-user-roles
      summary: List User Roles
      description: >-
        Lists the roles assigned to a user.  Returns 400 if any filter parameters are invalid.
      tags:
        - Roles
      responses:
        '200':
          $ref: '#/components/responses/AssignedRoleCollection'
        '400':
          $ref: '#/components/responses/IdentityBadRequest'
        '404':
          $ref: '#/components/responses/IdentityNotFound'
      parameters:
        - schema:
            type: object
            properties:
              role_name:
                $ref: '#/components/schemas/StringFieldEqualsFilter'
              entity_type_name:
                $ref: '#/components/schemas/StringFieldEqualsFilter'
          in: query
          name: filter
          description: Filter roles returned in the response.
          required: false
          style: deepObject
      servers:
        - url: https://global.api.konghq.com/
    post:
      operationId: users-assign-role
      summary: Assign Role
      description: Assigns a role to a user. Returns 409 if role is already assigned.
      requestBody:
        $ref: '#/components/requestBodies/AssignRole'
      responses:
        '201':
          $ref: '#/components/responses/AssignedRoleSingle'
        '400':
          $ref: '#/components/responses/IdentityBadRequest'
        '401':
          $ref: '#/components/responses/IdentityUnauthenticated'
        '403':
          $ref: '#/components/responses/IdentityPermissionDenied'
        '404':
          $ref: '#/components/responses/IdentityNotFound'
        '409':
          $ref: '#/components/responses/IdentityConflict'
      tags:
        - Roles
      servers:
        - url: https://global.api.konghq.com/
  /v3/users/{userId}/assigned-roles/{roleId}:
    parameters:
      - schema:
          type: string
          format: uuid
          example: e81bc3e5-e9db-4764-b7dd-e81e39072cbe
        name: userId
        in: path
        required: true
        description: ID of the user.
      - schema:
          type: string
          example: 8350205f-a305-4e39-abe9-bc082a80091a
          format: uuid
        name: roleId
        in: path
        required: true
        description: ID of the role.
    delete:
      operationId: users-remove-role
      summary: Remove Role
      description: >-
        Removes an assigned role from a user. Returns 404 if the requested user or assigned role were not found.
      responses:
        '204':
          description: No Content
        '400':
          $ref: '#/components/responses/IdentityBadRequest'
        '401':
          $ref: '#/components/responses/IdentityUnauthenticated'
        '404':
          $ref: '#/components/responses/IdentityNotFound'
      tags:
        - Roles
      servers:
        - url: https://global.api.konghq.com/
  /v3/users/{userId}/teams:
    parameters:
      - schema:
          type: string
          example: d32d905a-ed33-46a3-a093-d8f536af9a8a
          format: uuid
        name: userId
        in: path
        required: true
        description: The user ID.
    get:
      operationId: list-user-teams
      summary: List User Teams
      description: Returns a paginated list of a teams that the user belongs to.
      responses:
        '200':
          $ref: '#/components/responses/TeamCollection'
        '404':
          $ref: '#/components/responses/IdentityNotFound'
      tags:
        - Team Membership
      parameters:
        - $ref: '#/components/parameters/PageSize'
        - $ref: '#/components/parameters/PageNumber'
        - schema:
            type: object
            properties:
              name:
                $ref: '#/components/schemas/StringFieldFilter'
          in: query
          name: filter
          description: Filter teams returned in the response.
          required: false
          style: deepObject
      servers:
        - url: https://global.api.konghq.com/
components:
  parameters:
    ACLId:
      description: ID of the ACL to lookup
      example: f28acbfa-c866-4587-b688-0208ac24df21
      in: path
      name: ACLId
      required: true
      schema:
        type: string
    BasicAuthId:
      description: ID of the Basic-auth credential to lookup
      example: 80db1b58-ca7c-4d21-b92a-64eb07725872
      in: path
      name: BasicAuthId
      required: true
      schema:
        type: string
    CACertificateId:
      description: ID of the CA Certificate to lookup
      example: 3c31f18a-f27a-4f9b-8cd4-bf841554612f
      in: path
      name: CACertificateId
      required: true
      schema:
        type: string
    CertificateId:
      description: ID of the Certificate to lookup
      example: ddf3cdaa-3329-4961-822a-ce6dbd38eff7
      in: path
      name: CertificateId
      required: true
      schema:
        type: string
    ConsumerGroupId:
      description: ID of the Consumer Group to lookup
      example: ''
      in: path
      name: ConsumerGroupId
      required: true
      schema:
        type: string
    ConsumerId:
      description: ID of the Consumer to lookup
      example: c1059869-6fa7-4329-a5f5-5946d14ca2c5
      in: path
      name: ConsumerId
      required: true
      schema:
        type: string
    ConsumerIdForNestedEntities:
      description: Consumer ID for nested entities
      example: f28acbfa-c866-4587-b688-0208ac24df21
      in: path
      name: ConsumerIdForNestedEntities
      required: true
      schema:
        type: string
    controlPlaneId:
      name: controlPlaneId
      in: path
      required: true
      schema:
        type: string
        format: uuid
        example: 9524ec7d-36d9-465d-a8c5-83a3c9390458
      description: >-
        The UUID of your control plane. This variable is available in the Konnect manager
    ControlPlaneId:
      description: >-
        The UUID of your control plane. This variable is available in the Konnect manager.
      example: 9524ec7d-36d9-465d-a8c5-83a3c9390458
      in: path
      name: controlPlaneId
      required: true
      schema:
        format: uuid
        type: string
    ControlPlaneSort:
      name: sort
      description: |
        Sorts a collection of control-planes. Supported sort attributes are:
          - created_at
      required: false
      in: query
      schema:
        $ref: '#/components/schemas/SortQuery'
    DataPlaneCertificateId:
      name: certificateId
      in: path
      schema:
        type: string
      required: true
      x-speakeasy-match: id
    FilterByClusterTypeEquality:
      name: filter[cluster_type][eq]
      description: >-
        Filter by direct equality comparison of the cluster_type property with a supplied value.
      in: query
      required: false
      schema:
        type: string
      example: CLUSTER_TYPE_CONTROL_PLANE
    FilterByClusterTypeEqualityShort:
      name: filter[cluster_type]
      description: >-
        Filter by direct equality comparison (short-hand) of the cluster_type property with a supplied value.
      in: query
      required: false
      schema:
        type: string
        example: CLUSTER_TYPE_CONTROL_PLANE
    FilterByClusterTypeNotEquals:
      name: filter[cluster_type][neq]
      description: >-
        Filter by non-equality comparison of the cluster_type property with a supplied value.
      in: query
      required: false
      schema:
        type: string
        example: test
    FilterByIdEquality:
      name: filter[id][eq]
      description: >-
        Filter by direct equality comparison of the id property with a supplied value.
      in: query
      required: false
      schema:
        type: string
        example: 7f9fd312-a987-4628-b4c5-bb4f4fddd5f7
    FilterByIdEqualityShort:
      name: filter[id]
      description: >-
        Filter by direct equality comparison (short-hand) of the id property with a supplied value.
      in: query
      required: false
      schema:
        type: string
        example: 7f9fd312-a987-4628-b4c5-bb4f4fddd5f7
    FilterByIdsEquality:
      name: filter[id][oeq]
      description: >-
        Filter by direct equality comparison of id property with multiple supplied values.
      in: query
      required: false
      schema:
        type: string
        example: some-value,some-other-value
    FilterByLabels:
      name: labels
      description: Filter control planes in the response by associated labels.
      in: query
      required: false
      schema:
        type: string
        example: key:value,existCheck
    FilterByNameContains:
      name: filter[name][contains]
      description: >-
        Filter by contains comparison of the name property with a supplied substring.
      in: query
      required: false
      schema:
        type: string
        example: test
    FilterByNameEquality:
      name: filter[name][eq]
      description: >-
        Filter by direct equality comparison of the name property with a supplied value.
      in: query
      required: false
      schema:
        type: string
        example: test
    FilterByNameEqualityShort:
      name: filter[name]
      description: >-
        Filter by direct equality comparison (short-hand) of the name property with a supplied value.
      in: query
      required: false
      schema:
        type: string
        example: test
    FilterByNameNotEquals:
      name: filter[name][neq]
      description: >-
        Filter by non-equality comparison of the name property with a supplied value.
      in: query
      required: false
      schema:
        type: string
        example: test
    FilterSCGWByLabels:
      name: labels
      description: Filter serverless cloud gateways in the response by associated labels.
      in: query
      required: false
      schema:
        type: string
        example: filter[labels][eq]=env:prod
    HMACAuthId:
      description: ID of the HMAC-auth credential to lookup
      example: 70e7b00b-72f2-471b-a5ce-9c4171775360
      in: path
      name: HMACAuthId
      required: true
      schema:
        type: string
    JWTId:
      description: ID of the JWT to lookup
      example: 4a7f5faa-8c96-46d6-8214-c87573ef2ac4
      in: path
      name: JWTId
      required: true
      schema:
        type: string
    KeyAuthId:
      description: ID of the API-key to lookup
      example: ''
      in: path
      name: KeyAuthId
      required: true
      schema:
        type: string
    KeyId:
      description: ID of the Key to lookup
      example: bba22c06-a632-42be-a018-1b9ff357b5b9
      in: path
      name: KeyId
      required: true
      schema:
        type: string
    KeySetId:
      description: ID of the KeySet to lookup
      example: 6cc34248-50b4-4a81-9201-3bdf7a83f712
      in: path
      name: KeySetId
      required: true
      schema:
        type: string
    PageAfter:
      name: page[after]
      description: >-
        Request the next page of data, starting with the item after this parameter.
      required: false
      in: query
      allowEmptyValue: true
      schema:
        type: string
        example: ewogICJpZCI6ICJoZWxsbyB3b3JsZCIKfQ
    PageNumber:
      name: page[number]
      description: Determines which page of the entities to retrieve.
      required: false
      in: query
      allowEmptyValue: true
      schema:
        type: integer
        example: 1
    PageSize:
      name: page[size]
      description: >-
        The maximum number of items to include per page. The last page of a collection may include fewer items.
      required: false
      in: query
      allowEmptyValue: true
      schema:
        type: integer
        example: 10
    pagination-size:
      description: Number of resources to be returned.
      in: query
      name: size
      schema:
        default: 100
        maximum: 1000
        minimum: 1
        type: integer
    pagination-tags-filter:
      description: >-
        A list of tags to filter the list of resources on. Multiple tags can be concatenated using ',' to mean AND or using '/' to mean OR.
      example: tag1,tag2
      in: query
      name: tags
      schema:
        type: string
    PaginationOffset:
      description: >-
        Offset from which to return the next set of resources. Use the value of the 'offset' field from the response of a list operation as input here to paginate through all the resources
      in: query
      name: offset
      schema:
        type: string
    PaginationSize:
      description: Number of resources to be returned.
      in: query
      name: size
      schema:
        default: 100
        maximum: 1000
        minimum: 1
        type: integer
    PaginationTagsFilter:
      description: >-
        A list of tags to filter the list of resources on. Multiple tags can be concatenated using ',' to mean AND or using '/' to mean OR.
      example: tag1,tag2
      in: query
      name: tags
      schema:
        type: string
    PluginId:
      description: ID of the Plugin to lookup
      example: 3473c251-5b6c-4f45-b1ff-7ede735a366d
      in: path
      name: PluginId
      required: true
      schema:
        type: string
    RouteId:
      description: ID of the Route to lookup
      example: a4326a41-aa12-44e3-93e4-6b6e58bfb9d7
      in: path
      name: RouteId
      required: true
      schema:
        type: string
    ServiceId:
      description: ID of the Service to lookup
      example: 7fca84d6-7d37-4a74-a7b0-93e576089a41
      in: path
      name: ServiceId
      required: true
      schema:
        type: string
    SNIId:
      description: ID of the SNI to lookup
      example: 64c17a1a-b7d7-4a65-a5a4-42e4a7016e7f
      in: path
      name: SNIId
      required: true
      schema:
        type: string
    TargetId:
      description: ID of the Target to lookup
      example: 5a078780-5d4c-4aae-984a-bdc6f52113d8
      in: path
      name: TargetId
      required: true
      schema:
        type: string
    UpstreamId:
      description: ID of the Upstream to lookup
      example: 426d620c-7058-4ae6-aacc-f85a3204a2c5
      in: path
      name: UpstreamId
      required: true
      schema:
        type: string
    UpstreamIdForTarget:
      description: ID or target of the Target to lookup
      example: 5a078780-5d4c-4aae-984a-bdc6f52113d8
      in: path
      name: UpstreamIdForTarget
      required: true
      schema:
        type: string
    VaultId:
      description: ID of the Vault to lookup
      example: 9d4d6d19-77c6-428e-a965-9bc9647633e9
      in: path
      name: VaultId
      required: true
      schema:
        type: string
  responses:
    AssignedRoleCollection:
      description: A paginated list response for a collection of assigned roles.
      content:
        application/json:
          schema:
            type: object
            title: Assigned Role Collection Response
            properties:
              meta:
                $ref: '#/components/schemas/PaginatedMeta'
              data:
                type: array
                description: An Array
                items:
                  $ref: '#/components/schemas/AssignedRole'
    AssignedRoleSingle:
      description: A get action response of a single assigned role.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AssignedRole'
    AuthenticationSettings:
      description: Response for authentication settings endpoint
      content:
        application/json:
          schema:
            type: object
            title: Authentication Settings Response
            properties:
              basic_auth_enabled:
                type: boolean
                example: true
                description: The organization has basic auth enabled.
              oidc_auth_enabled:
                type: boolean
                example: false
                description: The organization has OIDC disabled.
              idp_mapping_enabled:
                type: boolean
                example: true
                description: IdP groups determine the Konnect teams a user has.
              konnect_mapping_enabled:
                type: boolean
                example: false
                description: A Konnect Identity Admin assigns teams to a user.
    BadRequest:
      description: Bad Request
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/BadRequestError'
    Conflict:
      description: Conflict
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ConflictError'
    ControlPlaneConflict:
      description: Conflict
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ConflictError'
    ControlPlaneNotFound:
      description: Not Found
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/NotFoundError'
    ControlPlanePermissionDenied:
      description: Permission denied
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ForbiddenError'
    ControlPlanesBadRequest:
      description: Bad Request
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/BadRequestError'
    ControlPlaneUnauthenticated:
      description: Unauthenticated
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/UnauthorizedError'
    CreateControlPlaneResponse:
      description: A response to creating a control plane.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ControlPlane'
    CreateServerlessCloudGatewayResponse:
      description: A response to creating a serverless cloud gateway.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ServerlessCloudGateway'
    DataPlaneClientCertificateResponse:
      description: Response body for retrieving a dp-client-certificate.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DataPlaneClientCertificate'
    Forbidden:
      description: Forbidden
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ForbiddenError'
    get-expected-config-hash:
      description: >-
        Response body for retrieving the expected config hash of the control plane.
      content:
        application/json:
          schema:
            type: object
            properties:
              expected_hash:
                type: string
                description: The expected configuration hash.
              created_at:
                type: integer
                description: Date the control plane configuration was created.
              updated_at:
                type: integer
                description: Date the control plane configuration was last updated.
    get-node:
      description: Example response
      content:
        application/json:
          schema:
            type: object
            properties:
              item:
                type: object
                properties:
                  id:
                    type: string
                  version:
                    type: string
                  hostname:
                    type: string
                  last_ping:
                    type: integer
                  type:
                    type: string
                  created_at:
                    type: integer
                  updated_at:
                    type: integer
                  config_hash:
                    type: string
                  compatibility_status:
                    type: object
                    properties:
                      state:
                        type: string
    GetGroupMemberStatus:
      description: Determines the group membership status of a control plane.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GroupMemberStatus'
    GetGroupStatus:
      description: Status of a control plane group, including existing conflicts.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GroupStatus'
    GetImpersonationSettingsResponse:
      description: Response for Get Impersonation Settings endpoint
      content:
        application/json:
          schema:
            type: object
            title: Get Impersonation Settings Response
            properties:
              enabled:
                type: boolean
                example: true
                description: The organization has user impersonation enabled.
    HTTP401Error:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GatewayUnauthorizedError'
      description: Unauthorized
    IdentityBadRequest:
      description: Bad Request
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/BadRequestError'
    IdentityConflict:
      description: Conflict
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ConflictError'
    IdentityNotFound:
      description: Not Found
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/NotFoundError'
    IdentityPermissionDenied:
      description: Permission denied
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ForbiddenError'
    IdentityUnauthenticated:
      description: Unauthenticated
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/UnauthorizedError'
    IdPConfiguration:
      description: A get action response of the IdP configuration.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/IdP'
    InternalServerError:
      description: Internal Server Error
      content:
        application/problem+json:
          schema:
            title: InternalServerError
            type: object
            description: The error response object.
            properties:
              status:
                type: integer
                description: The HTTP status code.
                example: 500
                enum:
                  - 500
              title:
                type: string
                description: The error response code.
                example: Internal Server Error
              instance:
                type: string
                example: konnect:trace:2287285207635123011
                description: The Konnect traceback code
              detail:
                type: string
                example: >-
                  Could not propagate control plane changes to control plane cluster service.
                description: Details about the error.
            required:
              - status
              - title
              - instance
    list-nodes:
      description: Example response
      content:
        application/json:
          schema:
            type: object
            properties:
              items:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                    version:
                      type: string
                    hostname:
                      type: string
                    last_ping:
                      type: integer
                    type:
                      type: string
                    created_at:
                      type: integer
                    updated_at:
                      type: integer
                    config_hash:
                      type: string
                    compatibility_status:
                      type: object
                      properties:
                        state:
                          type: string
              page:
                type: object
                properties:
                  total:
                    type: integer
                  next:
                    type: string
    list-nodes-eol:
      description: Example response
      content:
        application/json:
          schema:
            type: object
            properties:
              items:
                type: array
                items:
                  type: object
                  properties:
                    node_id:
                      type: string
                    node_version:
                      type: string
                    message:
                      type: string
              page:
                type: object
                properties:
                  total:
                    type: integer
    list-plugin-schemas:
      description: A paginated list response for a collection of custom plugin schemas.
      content:
        application/json:
          schema:
            type: object
            properties:
              items:
                type: array
                items:
                  type: object
                  properties:
                    lua_schema:
                      type: string
                      description: The custom plugin schema; `jq -Rs '.' schema.lua`.
                      example: >-
                        return { name = \"myplugin\", fields = { { config = { type = \"record\", fields = { } } } } }
                    name:
                      type: string
                      description: >-
                        The custom plugin name determined by the custom plugin schema.
                      example: myplugin
                    created_at:
                      type: integer
                      description: >-
                        An ISO-8604 timestamp representation of custom plugin schema creation date.
                      example: 1422386534
                    updated_at:
                      type: integer
                      description: >-
                        An ISO-8604 timestamp representation of custom plugin schema update date.
                      example: 1422412345
              page:
                type: object
                properties:
                  total:
                    type: integer
    ListControlPlanesResponse:
      description: A paginated list response for a collection of control planes.
      content:
        application/json:
          schema:
            title: ListControlPlanesResponse
            type: object
            additionalProperties: false
            properties:
              meta:
                $ref: '#/components/schemas/PaginatedMeta'
              data:
                type: array
                items:
                  $ref: '#/components/schemas/ControlPlane'
            required:
              - meta
              - data
    ListDataPlaneCertificatesResponse:
      description: Example response
      content:
        application/json:
          schema:
            type: object
            properties:
              items:
                type: array
                items:
                  $ref: '#/components/schemas/DataPlaneClientCertificate'
              page:
                type: object
                properties:
                  total:
                    type: integer
    ListGroupMemberships:
      description: >-
        A paginated list response for a collection of control plane group memberships.
      content:
        application/json:
          schema:
            type: object
            properties:
              meta:
                $ref: '#/components/schemas/CursorPaginatedMetaWithSizeAndTotal'
              data:
                type: array
                description: >-
                  Array of control planes summary who are a child to this control plane group.
                items:
                  $ref: '#/components/schemas/ControlPlaneSummary'
    ListServerlessCloudGatewaysResponse:
      description: A paginated list response for a collection of serverless cloud gateways.
      content:
        application/json:
          schema:
            title: ListServerlessCloudGatewaysResponse
            type: object
            properties:
              meta:
                $ref: '#/components/schemas/PaginatedMeta'
              data:
                type: array
                items:
                  $ref: '#/components/schemas/ServerlessCloudGateway'
    MeOrganization:
      description: Me Organization
      content:
        application/json:
          schema:
            type: object
            title: Me Organization Response
            example:
              id: d99c041a-c7cf-46a2-bf3a-44bb5f75400e
              name: string
              owner_id: 1c9c3848-5897-4f2c-beed-df6f3e3adb37
              created_at: '2023-01-23T17:22:52.150Z'
              updated_at: '2023-01-23T17:22:52.150Z'
              state: active
              retention_period_days: 90
            properties:
              id:
                type: string
                description: UUID of the organization.
                format: uuid
                readOnly: true
              name:
                type: string
                description: Name of the organization.
              owner_id:
                type: string
                description: Owner ID of the organization.
              login_path:
                type: string
                description: >-
                  Path to organization-specific login when single sign on (SSO) is enabled. Blank otherwise.
              created_at:
                type: string
                description: Date the organization was created.
                format: date-time
                readOnly: true
              updated_at:
                type: string
                description: Date the organization was last updated.
                format: date-time
                readOnly: true
              state:
                type: string
                description: State of the organization
                enum:
                  - active
                  - inactive
              retention_period_days:
                type: integer
                description: >-
                  The number of days an organization spends inactive before being deleted.
    NotFound:
      description: Not Found
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/NotFoundError'
    plugin-schemas:
      description: A response for a single custom plugin schema.
      content:
        application/json:
          schema:
            type: object
            properties:
              item:
                x-speakeasy-entity: GatewayCustomPluginSchema
                type: object
                properties:
                  lua_schema:
                    type: string
                    description: The custom plugin schema; `jq -Rs '.' schema.lua`.
                    example: >-
                      return { name = \"myplugin\", fields = { { config = { type = \"record\", fields = { } } } } }
                  name:
                    type: string
                    description: >-
                      The custom plugin name determined by the custom plugin schema.
                    example: myplugin
                  created_at:
                    type: integer
                    description: >-
                      An ISO-8604 timestamp representation of custom plugin schema creation date.
                    example: 1422386534
                  updated_at:
                    type: integer
                    description: >-
                      An ISO-8604 timestamp representation of custom plugin schema update date.
                    example: 1422412345
    PreconditionFailed:
      description: Precondition Failed
      content:
        application/problem+json:
          schema:
            type: object
            title: Precondition Failed Response
            description: The error response object.
            properties:
              status:
                type: integer
                description: The HTTP status code.
                example: 412
              title:
                type: string
                description: The error response code.
                example: Precondition Failed
              instance:
                type: string
                description: The Konnect traceback code.
                example: konnect:trace:1896611024257578096
              detail:
                type: string
                description: Details about the error response.
                example: IdP configuration not found
    RateLimited:
      description: Rate Limited
      content:
        application/problem+json:
          schema:
            type: object
            title: Rate Limited Response
            description: The error object
            properties:
              status:
                type: integer
                description: The HTTP response code
                example: 429
              title:
                type: string
                example: Rate Limited
                description: The Error response
              instance:
                type: string
                description: The Konnect traceback ID.
                example: konnect:trace:3674017986744198214
              detail:
                type: string
                description: Detailed explanation of the error response.
                example: Too many requests
    RetrieveControlPlaneResponse:
      description: A response to retrieving a single control plane.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ControlPlane'
    RetrieveServerlessCloudGatewayResponse:
      description: A response to retrieving a serverless cloud gateway.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ServerlessCloudGateway'
    Roles:
      description: The predefined, or system managed, roles.
      content:
        application/json:
          schema:
            type: object
            title: Roles Response
            properties:
              control_planes:
                type: object
                additionalProperties: false
                required:
                  - name
                  - roles
                properties:
                  name:
                    type: string
                    enum:
                      - Control Planes
                  roles:
                    type: object
                    properties:
                      admin:
                        type: object
                        additionalProperties: false
                        required:
                          - name
                          - description
                        properties:
                          name:
                            type: string
                            enum:
                              - Admin
                          description:
                            type: string
                            example: >-
                              This role grants full write access to all entities within a control plane.
                            enum:
                              - >-
                                This role grants full write access to all entities within a control plane.
                      certificate_admin:
                        type: object
                        additionalProperties: false
                        required:
                          - name
                          - description
                        properties:
                          name:
                            type: string
                            enum:
                              - Certificate Admin
                          description:
                            type: string
                            example: >-
                              This role grants full write access to administer certificates.
                            enum:
                              - >-
                                This role grants full write access to administer certificates.
                      consumer_admin:
                        type: object
                        additionalProperties: false
                        required:
                          - name
                          - description
                        properties:
                          name:
                            type: string
                            enum:
                              - Consumer Admin
                          description:
                            type: string
                            example: >-
                              This role grants full write access to administer consumers.
                            enum:
                              - >-
                                This role grants full write access to administer consumers.
                      creator:
                        type: object
                        additionalProperties: false
                        required:
                          - name
                          - description
                        properties:
                          name:
                            type: string
                            enum:
                              - Creator
                          description:
                            type: string
                            example: >-
                              Creates a new Control Plane in an organization. The creator becomes the owner of the Control Plane they create.
                            enum:
                              - >-
                                Creates a new Control Plane in an organization. The creator becomes the owner of the Control Plane they create.
                      deployer:
                        type: object
                        additionalProperties: false
                        required:
                          - name
                          - description
                        properties:
                          name:
                            type: string
                            enum:
                              - Deployer
                          description:
                            type: string
                            example: >-
                              This role grants full write access to administer services, routes and plugins necessary to deploy services in Service Hub.
                            enum:
                              - >-
                                This role grants full write access to administer services, routes and plugins necessary to deploy services in Service Hub.
                      gateway_service_admin:
                        type: object
                        additionalProperties: false
                        required:
                          - name
                          - description
                        properties:
                          name:
                            type: string
                            enum:
                              - Gateway Service Admin
                          description:
                            type: string
                            example: >-
                              This role grants full write access to administer gateway services.
                            enum:
                              - >-
                                This role grants full write access to administer gateway services.
                      plugin_admin:
                        type: object
                        additionalProperties: false
                        required:
                          - name
                          - description
                        properties:
                          name:
                            type: string
                            enum:
                              - Plugin Admin
                          description:
                            type: string
                            example: >-
                              This role grants full write access to administer plugins.
                            enum:
                              - >-
                                This role grants full write access to administer plugins.
                      route_admin:
                        type: object
                        additionalProperties: false
                        required:
                          - name
                          - description
                        properties:
                          name:
                            type: string
                            enum:
                              - Route Admin
                          description:
                            type: string
                            example: >-
                              This role grants full write access to administer routes.
                            enum:
                              - >-
                                This role grants full write access to administer routes.
                      sni_admin:
                        type: object
                        additionalProperties: false
                        required:
                          - name
                          - description
                        properties:
                          name:
                            type: string
                            enum:
                              - SNI Admin
                          description:
                            type: string
                            example: >-
                              This role grants full write access to administer SNIs.
                            enum:
                              - >-
                                This role grants full write access to administer SNIs.
                      upstream_admin:
                        type: object
                        additionalProperties: false
                        required:
                          - name
                          - description
                        properties:
                          name:
                            type: string
                            enum:
                              - Upstream Admin
                          description:
                            type: string
                            example: >-
                              This role grants full write access to administer upstreams.
                            enum:
                              - >-
                                This role grants full write access to administer upstreams.
                      viewer:
                        type: object
                        additionalProperties: false
                        required:
                          - name
                          - description
                        properties:
                          name:
                            type: string
                            enum:
                              - Viewer
                          description:
                            type: string
                            example: >-
                              This role grants read only access to all entities within a control plane.
                            enum:
                              - >-
                                This role grants read only access to all entities within a control plane.
              api_products:
                type: object
                additionalProperties: false
                required:
                  - name
                  - roles
                properties:
                  name:
                    type: string
                    enum:
                      - API Products
                  roles:
                    type: object
                    properties:
                      admin:
                        type: object
                        additionalProperties: false
                        required:
                          - name
                          - description
                        properties:
                          name:
                            type: string
                            enum:
                              - Admin
                          description:
                            type: string
                            example: >-
                              This role grants full write access to an API product and its versions.
                            enum:
                              - >-
                                This role grants full write access to an API product and its versions.
                      application_registration:
                        type: object
                        additionalProperties: false
                        required:
                          - name
                          - description
                        properties:
                          name:
                            type: string
                            enum:
                              - Application Registration
                          description:
                            type: string
                            example: >-
                              This role grants permission to enable and disable application registration on an API product.
                            enum:
                              - >-
                                This role grants permission to enable and disable application registration on an API product.
                      creator:
                        type: object
                        additionalProperties: false
                        required:
                          - name
                          - description
                        properties:
                          name:
                            type: string
                            enum:
                              - Creator
                          description:
                            type: string
                            example: >-
                              This access is required to create API products. This access is not for creating sub-entities such as versions, API specs, etc.
                            enum:
                              - >-
                                This access is required to create API products. This access is not for creating sub-entities such as versions, API specs, etc.
                      deployer:
                        type: object
                        additionalProperties: false
                        required:
                          - name
                          - description
                        properties:
                          name:
                            type: string
                            enum:
                              - Deployer
                          description:
                            type: string
                            example: >-
                              This role grants permission to deploy and remove an API product from a control plane.
                            enum:
                              - >-
                                This role grants permission to deploy and remove an API product from a control plane.
                      maintainer:
                        type: object
                        additionalProperties: false
                        required:
                          - name
                          - description
                        properties:
                          name:
                            type: string
                            enum:
                              - Maintainer
                          description:
                            type: string
                            example: >-
                              This role grants all write permission to manage an API product and to administer plugins.
                            enum:
                              - >-
                                This role grants all write permission to manage an API product and to administer plugins.
                      plugins_admin:
                        type: object
                        additionalProperties: false
                        required:
                          - name
                          - description
                        properties:
                          name:
                            type: string
                            enum:
                              - Plugins Admin
                          description:
                            type: string
                            example: >-
                              This role grants full write permission to administer plugins.
                            enum:
                              - >-
                                This role grants full write permission to administer plugins.
                      publisher:
                        type: object
                        additionalProperties: false
                        required:
                          - name
                          - description
                        properties:
                          name:
                            type: string
                            enum:
                              - Publisher
                          description:
                            type: string
                            example: >-
                              This role grants permission to publish an API product to one or more portals.
                            enum:
                              - >-
                                This role grants permission to publish an API product to one or more portals.
                      viewer:
                        type: object
                        additionalProperties: false
                        required:
                          - name
                          - description
                        properties:
                          name:
                            type: string
                            enum:
                              - Viewer
                          description:
                            type: string
                            example: >-
                              Viewer has read-only access to an API product and its sub-entities.
                            enum:
                              - >-
                                Viewer has read-only access to an API product and its sub-entities.
              audit_logs:
                type: object
                additionalProperties: false
                required:
                  - name
                  - roles
                properties:
                  name:
                    type: string
                    enum:
                      - Audit Logs
                  roles:
                    type: object
                    properties:
                      admin:
                        type: object
                        additionalProperties: false
                        required:
                          - name
                          - description
                        properties:
                          name:
                            type: string
                            enum:
                              - Admin
                          description:
                            type: string
                            example: >-
                              This role grants full write access to the Audit log configuration.
                            enum:
                              - >-
                                This role grants full write access to the Audit log configuration.
              identity:
                type: object
                additionalProperties: false
                required:
                  - name
                  - roles
                properties:
                  name:
                    type: string
                    enum:
                      - Identity
                  roles:
                    type: object
                    properties:
                      admin:
                        type: object
                        additionalProperties: false
                        required:
                          - name
                          - description
                        properties:
                          name:
                            type: string
                            enum:
                              - Admin
                          description:
                            type: string
                            example: >-
                              This role grants full write access to the Identity configuration.
                            enum:
                              - >-
                                This role grants full write access to the Identity configuration.
              mesh_control_planes:
                type: object
                additionalProperties: false
                required:
                  - name
                  - roles
                properties:
                  name:
                    type: string
                    enum:
                      - Mesh Control Plane
                  roles:
                    type: object
                    properties:
                      admin:
                        type: object
                        additionalProperties: false
                        required:
                          - name
                          - description
                        properties:
                          name:
                            type: string
                            enum:
                              - Admin
                          description:
                            type: string
                            example: >-
                              This role grants full write access to the related to Mesh control planes.
                            enum:
                              - >-
                                This role grants full write access to the related to Mesh control planes.
                      creator:
                        type: object
                        additionalProperties: false
                        required:
                          - name
                          - description
                        properties:
                          name:
                            type: string
                            enum:
                              - Creator
                          description:
                            type: string
                            example: >-
                              This role grants access to create new Mesh control planes.
                            enum:
                              - >-
                                This role grants access to create new Mesh control planes.
                      viewer:
                        type: object
                        additionalProperties: false
                        required:
                          - name
                          - description
                        properties:
                          name:
                            type: string
                            enum:
                              - Viewer
                          description:
                            type: string
                            example: >-
                              This role grants access to read-only permissions to Mesh control planes.
                            enum:
                              - >-
                                This role grants access to read-only permissions to Mesh control planes.
    ServiceUnavailable:
      description: Service Unavailable
      content:
        application/problem+json:
          schema:
            title: ServiceUnavailableError
            type: object
            description: Error response for temporary service unavailability.
            properties:
              status:
                type: integer
                description: The HTTP status code.
                example: 503
                enum:
                  - 503
              title:
                type: string
                description: The error response code.
                example: Service Unavailable
              instance:
                type: string
                example: konnect:trace:2287285207635123011
                description: The Konnect traceback code
              detail:
                type: string
                example: >-
                  Could not retrieve permissions to check resource accessibility.
                description: Details about the error.
            required:
              - status
              - title
              - instance
    SystemAccountAccessTokenCollection:
      description: >-
        A paginated list response for a collection of system accounts access tokens.
      content:
        application/json:
          schema:
            type: object
            title: System Account Access Token Collection Reponse
            properties:
              meta:
                $ref: '#/components/schemas/PaginatedMeta'
              data:
                type: array
                items:
                  $ref: '#/components/schemas/SystemAccountAccessToken'
    SystemAccountAccessTokenCreated:
      description: >-
        A response including a single system account access token with the token.
      content:
        application/json:
          schema:
            x-speakeasy-entity: SystemAccountAccessToken
            type: object
            title: System Account Access Token Created Response
            example:
              id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
              name: Sample Access Token
              created_at: '2022-08-01T14:16:09Z'
              updated_at: '2022-08-02T08:35:49Z'
              expires_at: '2022-12-31T12:52:23Z'
              last_used_at: '2022-10-24T13:05:42Z'
            properties:
              id:
                type: string
                description: ID of the system account access token.
                format: uuid
                readOnly: true
              name:
                type: string
                description: Name of the system account access token.
              created_at:
                type: string
                description: Timestamp of when the system account access token was created.
                format: date-time
                readOnly: true
              updated_at:
                type: string
                description: >-
                  Timestamp of when the system account access token was last updated.
                format: date-time
                readOnly: true
              expires_at:
                type: string
                description: Timestamp of when the system account access token will expire.
                format: date-time
                readOnly: true
              last_used_at:
                type: string
                description: >-
                  Timestamp of when the system account access token was last used.
                format: date-time
                readOnly: true
              token:
                type: string
                description: The token of the system account access token.
                readOnly: true
    SystemAccountAccessTokenSingle:
      description: A response including a single system account access token.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SystemAccountAccessToken'
    SystemAccountCollection:
      description: A paginated list response for a collection of system accounts.
      content:
        application/json:
          schema:
            type: object
            title: System Account Collection Response
            properties:
              meta:
                $ref: '#/components/schemas/PaginatedMeta'
              data:
                type: array
                items:
                  $ref: '#/components/schemas/SystemAccount'
    SystemAccountSingle:
      description: A response including a single system account.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SystemAccount'
    TeamCollection:
      description: A paginated list response for a collection of users.
      content:
        application/json:
          schema:
            type: object
            title: Team Collection Response
            properties:
              meta:
                $ref: '#/components/schemas/PaginatedMeta'
              data:
                type: array
                items:
                  $ref: '#/components/schemas/Team'
    TeamGroupMappingCollection:
      description: A paginated collection of mappings grouped by team_id.
      content:
        application/json:
          schema:
            type: object
            title: Team Group Mapping Collection Response
            properties:
              meta:
                $ref: '#/components/schemas/PaginatedMeta'
              data:
                type: array
                items:
                  $ref: '#/components/schemas/TeamGroupMapping'
    TeamMappingCollection:
      description: A paginated list response for a collection of team mappings.
      content:
        application/json:
          schema:
            type: object
            title: Team Mapping Collection Response
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/TeamMapping'
    TeamMappingResponse:
      description: A paginated list response for a collection of team mappings.
      content:
        application/json:
          schema:
            type: object
            title: Team Mapping Response
            properties:
              meta:
                type: object
                description: Contains pagination data.
                properties:
                  page:
                    type: object
                    description: The page object.
                    properties:
                      number:
                        type: integer
                        description: Page number.
                        example: 1
                      size:
                        type: integer
                        description: Page size.
                        example: 9
                      total:
                        type: integer
                        description: Total number of results.
                        example: 5
              data:
                type: array
                items:
                  type: object
                  properties:
                    group:
                      type: string
                      description: Group names.
                      example: 111(@&*$)(@*#_@(gfds re gdsf dfg
                    team_ids:
                      type: array
                      description: Team ID's that belong to the specified group.
                      items:
                        type: string
                        example: 3df49db8-39ff-490d-9fe1-251a3361fb13
    TeamSingle:
      description: A response including a single team.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Team'
    Unauthorized:
      description: Unauthorized
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/UnauthorizedError'
            type: object
            title: Unauthorized Response
            description: The error response object.
            properties:
              status:
                type: integer
                example: 403
                description: The HTTP status code.
              title:
                type: string
                description: The Error Response.
                example: Unauthorized
              instance:
                type: string
                description: The Konnect traceback code.
                example: konnect:trace:952172606039454040
              detail:
                type: string
                description: Details about the error response.
                example: You do not have permission to perform this action
    UpdateControlPlaneResponse:
      description: A response to updating a control plane.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ControlPlane'
    UpdateImpersonationSettingsResponse:
      description: Response for Update Impersonation Settings endpoint
      content:
        application/json:
          schema:
            type: object
            title: Update Impersonation Settings Response
            properties:
              enabled:
                type: boolean
                example: true
                description: The organization has user impersonation enabled.
    UserCollection:
      description: A paginated list response for a collection of users.
      content:
        application/json:
          schema:
            type: object
            title: User Collection Response
            properties:
              meta:
                $ref: '#/components/schemas/PaginatedMeta'
              data:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    UserSingle:
      description: A get action response of a single user.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'
  schemas:
    ACL:
      allOf:
        - $ref: '#/components/schemas/ACLWithoutParents'
        - properties:
            consumer:
              additionalProperties: false
              properties:
                id:
                  type: string
              type: object
              x-foreign: true
          type: object
    ACLWithoutParents:
      properties:
        created_at:
          description: Unix epoch when the resource was created.
          readOnly: true
          type: integer
        group:
          type: string
        id:
          readOnly: true
          type: string
        tags:
          items:
            type: string
          type: array
      type: object
    AssignedRole:
      title: AssignedRole
      type: object
      description: An assigned role is a role that has been assigned to a user or team.
      example:
        id: 54cc6168-ebb1-4300-8168-d62a0dd08fc8
        role_name: Viewer
        entity_id: 18ee2573-dec0-4b83-be99-fa7700bcdc61
        entity_type_name: Control Planes
        entity_region: us
      properties:
        id:
          type: string
          format: uuid
          example: eaf7adf1-32c8-4bbf-b960-d1f8456afe67
          description: The ID of the role assignment.
        role_name:
          type: string
          example: Viewer
          description: Name of the role being assigned.
        entity_id:
          type: string
          format: uuid
          example: 817d0422-45c9-4d88-8d64-45aef05c1ae7
          description: A RBAC entity ID.
        entity_type_name:
          type: string
          example: Control Planes
          description: Name of the entity type the role is being assigned to.
        entity_region:
          type: string
          enum:
            - us
            - eu
            - au
            - '*'
          example: eu
          description: Region of the entity.
    BadRequestError:
      allOf:
        - $ref: '#/components/schemas/BaseError'
        - type: object
          required:
            - invalid_parameters
          properties:
            invalid_parameters:
              $ref: '#/components/schemas/InvalidParameters'
    BaseError:
      type: object
      title: Error
      description: standard error
      required:
        - status
        - title
        - instance
        - detail
      properties:
        status:
          type: integer
          description: >
            The HTTP status code of the error. Useful when passing the response

            body to child properties in a frontend UI. Must be returned as an integer.

          readOnly: true
        title:
          type: string
          description: |
            A short, human-readable summary of the problem. It should not
            change between occurences of a problem, except for localization.
            Should be provided as "Sentence case" for direct use in the UI.
          readOnly: true
        type:
          type: string
          description: The error type.
          readOnly: true
        instance:
          type: string
          description: |
            Used to return the correlation ID back to the user, in the format
            kong:trace:<correlation_id>. This helps us find the relevant logs
            when a customer reports an issue.
          readOnly: true
        detail:
          type: string
          description: >
            A human readable explanation specific to this occurence of the problem.

            This field may contain request/entity data to help the user understand

            what went wrong. Enclose variable values in square brackets. Should be

            provided as "Sentence case" for direct use in the UI.

          readOnly: true
    BasicAuth:
      allOf:
        - $ref: '#/components/schemas/BasicAuthWithoutParents'
        - properties:
            consumer:
              additionalProperties: false
              properties:
                id:
                  type: string
              type: object
              x-foreign: true
          type: object
    BasicAuthWithoutParents:
      properties:
        created_at:
          description: Unix epoch when the resource was created.
          readOnly: true
          type: integer
        id:
          readOnly: true
          type: string
        password:
          type: string
        tags:
          items:
            type: string
          type: array
        username:
          type: string
      type: object
    BooleanFieldFilter:
      example: true
      title: BooleanFieldFilter
      description: Filter by a boolean value (true/false).
      type: boolean
    CACertificate:
      properties:
        cert:
          description: PEM-encoded public certificate of the CA.
          type: string
        cert_digest:
          description: >-
            SHA256 hex digest of the public certificate. This field is read-only and it cannot be set by the caller, the value is automatically computed.
          type: string
        created_at:
          description: Unix epoch when the resource was created.
          readOnly: true
          type: integer
        id:
          readOnly: true
          type: string
        tags:
          description: >-
            An optional set of strings associated with the Certificate for grouping and filtering.
          items:
            type: string
          type: array
        updated_at:
          description: Unix epoch when the resource was last updated.
          readOnly: true
          type: integer
      type: object
    Certificate:
      properties:
        cert:
          description: >-
            PEM-encoded public certificate chain of the SSL key pair. This field is _referenceable_, which means it can be securely stored as a [secret](/gateway/latest/plan-and-deploy/security/secrets-management/getting-started) in a vault. References must follow a [specific format](/gateway/latest/plan-and-deploy/security/secrets-management/reference-format).
          type: string
        cert_alt:
          description: >-
            PEM-encoded public certificate chain of the alternate SSL key pair. This should only be set if you have both RSA and ECDSA types of certificate available and would like Kong to prefer serving using ECDSA certs when client advertises support for it. This field is _referenceable_, which means it can be securely stored as a [secret](/gateway/latest/plan-and-deploy/security/secrets-management/getting-started) in a vault. References must follow a [specific format](/gateway/latest/plan-and-deploy/security/secrets-management/reference-format).
          type: string
        created_at:
          description: Unix epoch when the resource was created.
          readOnly: true
          type: integer
        id:
          readOnly: true
          type: string
        key:
          description: >-
            PEM-encoded private key of the SSL key pair. This field is _referenceable_, which means it can be securely stored as a [secret](/gateway/latest/plan-and-deploy/security/secrets-management/getting-started) in a vault. References must follow a [specific format](/gateway/latest/plan-and-deploy/security/secrets-management/reference-format).
          type: string
        key_alt:
          description: >-
            PEM-encoded private key of the alternate SSL key pair. This should only be set if you have both RSA and ECDSA types of certificate available and would like Kong to prefer serving using ECDSA certs when client advertises support for it. This field is _referenceable_, which means it can be securely stored as a [secret](/gateway/latest/plan-and-deploy/security/secrets-management/getting-started) in a vault. References must follow a [specific format](/gateway/latest/plan-and-deploy/security/secrets-management/reference-format).
          type: string
        tags:
          description: >-
            An optional set of strings associated with the Certificate for grouping and filtering.
          items:
            type: string
          type: array
        updated_at:
          description: Unix epoch when the resource was last updated.
          readOnly: true
          type: integer
      type: object
    ConflictError:
      allOf:
        - $ref: '#/components/schemas/BaseError'
        - type: object
          properties:
            status:
              example: 409
            title:
              example: Conflict
            type:
              example: https://httpstatuses.com/409
            instance:
              example: kong:trace:1234567890
            detail:
              example: Conflict
    Consumer:
      properties:
        created_at:
          description: Unix epoch when the resource was created.
          readOnly: true
          type: integer
        custom_id:
          description: >-
            Field for storing an existing unique ID for the Consumer - useful for mapping Kong with users in your existing database. You must send either this field or `username` with the request.
          type: string
        id:
          readOnly: true
          type: string
        tags:
          description: >-
            An optional set of strings associated with the Consumer for grouping and filtering.
          items:
            type: string
          type: array
        updated_at:
          description: Unix epoch when the resource was last updated.
          readOnly: true
          type: integer
        username:
          description: >-
            The unique username of the Consumer. You must send either this field or `custom_id` with the request.
          type: string
      type: object
    ConsumerGroup:
      properties:
        created_at:
          description: Unix epoch when the resource was created.
          readOnly: true
          type: integer
        id:
          readOnly: true
          type: string
        name:
          type: string
        tags:
          items:
            type: string
          type: array
        updated_at:
          description: Unix epoch when the resource was last updated.
          readOnly: true
          type: integer
      type: object
    ControlPlane:
      x-speakeasy-entity: GatewayControlPlane
      allOf:
        - $ref: '#/components/schemas/ControlPlaneSummary'
        - type: object
          properties:
            labels:
              $ref: '#/components/schemas/Labels'
            config:
              x-speakeasy-param-suppress-computed-diff: true
              type: object
              description: CP configuration object for related access endpoints.
              properties:
                control_plane_endpoint:
                  type: string
                  format: url
                  example: https://acfe5f253f.cp0.konghq.com
                  description: Control Plane Endpoint.
                  readOnly: true
                telemetry_endpoint:
                  type: string
                  format: url
                  example: https://acfe5f253f.tp0.konghq.com
                  description: Telemetry Endpoint.
                  readOnly: true
            created_at:
              x-speakeasy-terraform-ignore: true
              type: string
              format: date-time
              example: '2022-11-04T20:10:06.927Z'
              description: >-
                An ISO-8604 timestamp representation of control plane creation date.
              readOnly: true
            updated_at:
              x-speakeasy-terraform-ignore: true
              type: string
              format: date-time
              example: '2022-11-04T20:10:06.927Z'
              description: >-
                An ISO-8604 timestamp representation of control plane update date.
              readOnly: true
    ControlPlaneSummary:
      title: ControlPlaneSummary
      type: object
      description: >-
        The control plane object contains information about a Kong control plane.
      additionalProperties: false
      properties:
        id:
          x-speakeasy-param-suppress-computed-diff: true
          type: string
          format: uuid
          example: 7f9fd312-a987-4628-b4c5-bb4f4fddd5f7
          description: The control plane ID.
          readOnly: true
        name:
          type: string
          example: Test Control Plane
          description: The name of the control plane.
        description:
          type: string
          example: A test control plane for exploration.
          description: The description of the control plane in Konnect.
        labels:
          $ref: '#/components/schemas/Labels'
        config:
          type: object
          description: CP configuration object for related access endpoints.
          additionalProperties: false
          properties:
            control_plane_endpoint:
              type: string
              format: url
              example: https://acfe5f253f.cp0.konghq.com
              description: Control Plane Endpoint.
              readOnly: true
            telemetry_endpoint:
              type: string
              format: url
              example: https://acfe5f253f.tp0.konghq.com
              description: Telemetry Endpoint.
              readOnly: true
            cluster_type:
              type: string
              description: >-
                The ClusterType value of the cluster associated with the Control Plane.
              example: CLUSTER_TYPE_CONTROL_PLANE
              enum:
                - CLUSTER_TYPE_CONTROL_PLANE
                - CLUSTER_TYPE_HYBRID
                - CLUSTER_TYPE_K8S_INGRESS_CONTROLLER
                - CLUSTER_TYPE_CONTROL_PLANE_GROUP
              readOnly: true
            auth_type:
              type: string
              description: >-
                The auth type value of the cluster associated with the Runtime Group.
              example: pinned_client_certs
              enum:
                - pinned_client_certs
                - pki_client_certs
              readOnly: true
            cloud_gateway:
              type: boolean
              description: Whether the Control Plane can be used for cloud-gateways.
              readOnly: true
            proxy_urls:
              $ref: '#/components/schemas/ProxyURLs'
          required:
            - control_plane_endpoint
            - telemetry_endpoint
            - cluster_type
            - auth_type
            - cloud_gateway
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    CpRegion:
      title: Control plane region
      type: string
      description: The control plane region.
      example: us
      enum:
        - us
        - eu
        - au
      x-enum-varnames:
        - US
        - Europe
        - Aus
    CreateControlPlaneRequest:
      x-speakeasy-entity: GatewayControlPlane
      title: CreateControlPlaneRequest
      description: |-
        The request schema for the create control plane request.
      type: object
      additionalProperties: false
      properties:
        name:
          type: string
          example: Test Control Plane
          description: The name of the control plane.
        description:
          type: string
          example: A test control plane for exploration.
          description: The description of the control plane in Konnect.
        cluster_type:
          type: string
          description: >-
            The ClusterType value of the cluster associated with the Control Plane.
          example: CLUSTER_TYPE_CONTROL_PLANE
          enum:
            - CLUSTER_TYPE_CONTROL_PLANE
            - CLUSTER_TYPE_HYBRID
            - CLUSTER_TYPE_K8S_INGRESS_CONTROLLER
            - CLUSTER_TYPE_CONTROL_PLANE_GROUP
            - CLUSTER_TYPE_SERVERLESS
        auth_type:
          type: string
          description: >-
            The auth type value of the cluster associated with the Runtime Group.
          example: pinned_client_certs
          enum:
            - pinned_client_certs
            - pki_client_certs
        cloud_gateway:
          type: boolean
          description: Whether this control-plane can be used for cloud-gateways.
          example: false
        proxy_urls:
          $ref: '#/components/schemas/ProxyURLs'
        labels:
          $ref: '#/components/schemas/Labels'
      required:
        - name
    CreateServerlessCloudGatewayRequest:
      x-speakeasy-entity: ServerlessCloudGateway
      type: object
      title: CreateServerlessCloudGatewayRequest
      description: Schema to create a serverless cloud gateway.
      required:
        - control_plane
        - cluster_cert
        - cluster_cert_key
      additionalProperties: false
      properties:
        control_plane:
          $ref: '#/components/schemas/ServerlessControlPlane'
        cluster_cert:
          type: string
          description: The cluster certificate (public key).
          example: >
            -----BEGIN CERTIFICATE----- MIICRDCCAa2gAwIBAgIBADANBgkqhkiG9w0BAQ0FADA/MQswCQYDVQQGEwJ1czEL MAkGA1UECAwCVFgxDTALBgNVBAoMBFRlc3QxFDASBgNVBAMMC2V4YW1wbGUuY29t MB4XDTI0MDQyNjA5NTA1OVoXDTI1MDQyNjA5NTA1OVowPzELMAkGA1UEBhMCdXMx CzAJBgNVBAgMAlRYMQ0wCwYDVQQKDARUZXN0MRQwEgYDVQQDDAtleGFtcGxlLmNv bTCBnzANBgkqhkiG9w0BAQEFAAOBjQAwgYkCgYEA8FaJZmPsthBT1XkTyqUJiuQV 4p4KaLpNMioNQtIdeGKFXelmZlVfW0bfLGBgFmkwo19KIzFtOlITUjb0Qqlub2Dn TIPoDs7rXA8aw6umJu73Z6647U3+alxNCpwTuYOY2CJQ+HWEIuOuwAdtQkndEp9r 7ZWA2xLatQKBYEvEmykCAwEAAaNQME4wHQYDVR0OBBYEFGUznNeZK74vlA4bqKHb 706tyMwcMB8GA1UdIwQYMBaAFGUznNeZK74vlA4bqKHb706tyMwcMAwGA1UdEwQF MAMBAf8wDQYJKoZIhvcNAQENBQADgYEARmnu/2vUcmJYLlg86MN0prXGC3CGXsem fDtPF4SBPxfchdG7HJKywTloIiCBKGEQALkCHiJcQJNcSHmzH3/Qk+SrOJNH01gt HsKA4SNFJZR5fCRpT6USCukyE2Wlr+PWPscrFCWbLXhK4Ql/t0oog1255B10HqKk 1qDkNrzCd/o= -----END CERTIFICATE-----

        cluster_cert_key:
          type: string
          description: The cluster certificate key (private key).
          example: >
            -----BEGIN PRIVATE KEY----- MIICeAIBADANBgkqhkiG9w0BAQEFAASCAmIwggJeAgEAAoGBAPBWiWZj7LYQU9V5 E8qlCYrkFeKeCmi6TTIqDULSHXhihV3pZmZVX1tG3yxgYBZpMKNfSiMxbTpSE1I2 9EKpbm9g50yD6A7O61wPGsOrpibu92euuO1N/mpcTQqcE7mDmNgiUPh1hCLjrsAH bUJJ3RKfa+2VgNsS2rUCgWBLxJspAgMBAAECgYEAvA7qqozL/1ZdUu/P1cQ36E86 9L03ZeVJXFRdVgj2eGqW8vob3z00RUb6gE3VQhQDNALvDwSw9G6eoblQfgz31Hju sb+j6bGOm2BqzYrx6rpcgme7k9ScV0tEbtiBNX0E/ToHvNywHtdOBvDocN2wh42Z 6bS9um51H+SXR036mgUCQQD4T7WrJHL97Hj8TtHnTw895xWKaGn94H7ZQa2lo1nk 7CQ4Oi8rFX5tDdyV7UU6fekBWuhpmIhSGJhyHD7UThBjAkEA98ef9ey2Qx+j+R8S tgpgJAF3LVNJJicEHCS/Vltgc84X/vidVAMa2+TYPxPrrUjxBr0STCeB5wZhvvsB D8cOAwJBAJ5JqaQPUx1dDe7Ai/vooO20Dj4xu0c0QYha3sfU7qwIgDo7lO/g/ruj 93a3TscvlkXf3oHZ0ySKOzual86ciMMCQQDGOLgaWHVy+4QFTzt70I8bHuUFqKRT VlEuZqN/ZXijDFQcES5jwFwjYE8zHy+ioEDaIDXcIJsGhA98Zndx9M+bAkA4IFdx 4YIDhuk1MJAYPqVQs5szEF/0BGymLNVYlIox48bZg+TH3uXwTVRVySxvpRa8dd3O 0gHs3EIV6GFUl7ev -----END PRIVATE KEY-----

        labels:
          $ref: '#/components/schemas/SCGWLabels'
    CursorMetaWithSizeAndTotal:
      type: object
      required:
        - size
        - next
        - total
      properties:
        next:
          description: URI to the next page
          type: string
          format: path
          nullable: true
        size:
          description: Requested page size
          type: number
          example: 10
        total:
          description: >-
            Total number of objects in the collection; will only be present on the first page
          type: number
          example: 974
          nullable: true
    CursorPaginatedMetaWithSizeAndTotal:
      type: object
      title: CursorPaginatedMetaWithSizeAndTotal
      description: returns the pagination information
      properties:
        page:
          $ref: '#/components/schemas/CursorMetaWithSizeAndTotal'
      required:
        - page
    DataPlaneClientCertificate:
      type: object
      properties:
        item:
          x-speakeasy-entity: GatewayDataPlaneClientCertificate
          type: object
          properties:
            id:
              type: string
              description: Unique ID of the certificate entity.
            created_at:
              type: integer
              description: Date certificate was created.
            updated_at:
              type: integer
              description: Date certificate was last updated.
            cert:
              type: string
              description: JSON escaped string of the certificate.
    ForbiddenError:
      allOf:
        - $ref: '#/components/schemas/BaseError'
        - type: object
          properties:
            status:
              example: 403
            title:
              example: Forbidden
            type:
              example: https://httpstatuses.com/403
            instance:
              example: kong:trace:1234567890
            detail:
              example: Forbidden
    GatewayUnauthorizedError:
      properties:
        message:
          type: string
        status:
          type: integer
      required:
        - message
        - status
      type: object
    GroupConflict:
      title: GroupConflict
      type: object
      description: >-
        The Group Conflict object contains information about a conflict in a control plane group.
      properties:
        cluster_id:
          type: string
          format: uuid
          example: 7f9fd312-a987-4628-b4c5-bb4f4fddd5f7
          description: The ID of a control plane member of a control plane group.
          readOnly: true
        description:
          type: string
          example: >-
            conflicting entity found: ID=38d790ad-8b08-4ff5-a074-2e1e9e64d8bd, Name=foo
          description: The description of the conflict.
          readOnly: true
        resource:
          $ref: '#/components/schemas/GroupConflictResource'
    GroupConflictResource:
      title: GroupConflictResource
      type: object
      description: A resource causing a conflict in a control plane group.
      properties:
        id:
          type: string
          format: uuid
          example: 7f9fd312-a987-4628-b4c5-bb4f4fddd5f7
          description: The ID of the resource.
          readOnly: true
        type:
          type: string
          example: service
          description: The type of the resource.
          readOnly: true
      required:
        - id
        - type
    GroupMembership:
      x-speakeasy-entity: GatewayControlPlaneMembership
      type: object
      properties:
        members:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
    GroupMemberStatus:
      title: GroupMemberStatus
      type: object
      description: >-
        Object with information determining the group membership status of a control plane.
      properties:
        is_member:
          type: boolean
          example: true
          description: >-
            Boolean indicating if a control plane is a member of a control plane group.
          readOnly: true
      required:
        - is_member
    GroupStatus:
      title: GroupStatus
      type: object
      description: >-
        The Group Status object contains information about the status of a control plane group.
      properties:
        id:
          type: string
          format: uuid
          example: 7f9fd312-a987-4628-b4c5-bb4f4fddd5f7
          description: The control plane group ID.
          readOnly: true
        created_at:
          type: string
          format: date-time
          example: '2022-11-04T20:10:06.927Z'
          description: >-
            An ISO-8604 timestamp representation of control plane group status creation date.
          readOnly: true
        updated_at:
          type: string
          format: date-time
          example: '2022-11-04T20:10:06.927Z'
          description: >-
            An ISO-8604 timestamp representation of control plane group status update date.
          readOnly: true
        conflicts:
          type: array
          maxItems: 256
          items:
            $ref: '#/components/schemas/GroupConflict'
        state:
          type: string
          description: The state of the control plane group.
          example: CONFLICT
          readOnly: true
          enum:
            - OK
            - CONFLICT
            - UNKNOWN
    HMACAuth:
      allOf:
        - $ref: '#/components/schemas/HMACAuthWithoutParents'
        - properties:
            consumer:
              additionalProperties: false
              properties:
                id:
                  type: string
              type: object
              x-foreign: true
          type: object
    HMACAuthWithoutParents:
      properties:
        created_at:
          description: Unix epoch when the resource was created.
          readOnly: true
          type: integer
        id:
          readOnly: true
          type: string
        secret:
          type: string
        tags:
          items:
            type: string
          type: array
        username:
          type: string
      type: object
    IdP:
      title: IdP Configuration
      type: object
      description: >-
        The IdP object contains the configuration data for the OIDC authentication integration.


        NOTE: The `openid` scope is required. Removing it could break the OIDC integration.
      properties:
        issuer:
          type: string
          format: uri
          example: https://myidp.com/oauth2
        login_path:
          type: string
          example: myapp
        client_id:
          type: string
          example: YOUR_CLIENT_ID
        scopes:
          type: array
          default:
            - email
            - openid
            - profile
          items:
            type: string
        claim_mappings:
          type: object
          minProperties: 3
          properties:
            name:
              type: string
              example: name
              default: name
            email:
              type: string
              example: email
              default: email
            groups:
              type: string
              default: groups
              example: custom-groups-claim
    InvalidParameterChoiceItem:
      type: object
      additionalProperties: false
      properties:
        field:
          type: string
          example: name
          readOnly: true
        rule:
          description: invalid parameters rules
          type: string
          readOnly: true
          nullable: false
          enum:
            - enum
        reason:
          type: string
          example: is a required field
          readOnly: true
        choices:
          type: array
          uniqueItems: true
          readOnly: true
          nullable: false
          minimum: 1
          items: {}
        source:
          type: string
          example: body
      required:
        - field
        - reason
        - rule
        - choices
    InvalidParameterDependentItem:
      type: object
      additionalProperties: false
      properties:
        field:
          type: string
          example: name
          readOnly: true
        rule:
          description: invalid parameters rules
          type: string
          readOnly: true
          nullable: true
          enum:
            - dependent_fields
        reason:
          type: string
          example: is a required field
          readOnly: true
        dependents:
          type: array
          uniqueItems: true
          nullable: true
          items: {}
          readOnly: true
        source:
          type: string
          example: body
      required:
        - field
        - rule
        - reason
        - dependents
    InvalidParameterMinimumLength:
      type: object
      additionalProperties: false
      properties:
        field:
          type: string
          example: name
          readOnly: true
        rule:
          description: invalid parameters rules
          type: string
          readOnly: true
          nullable: false
          enum:
            - min_length
            - min_digits
            - min_lowercase
            - min_uppercase
            - min_symbols
        minimum:
          type: integer
          example: 8
        source:
          type: string
          example: body
        reason:
          type: string
          example: is a required field
          readOnly: true
      required:
        - field
        - reason
        - rule
        - minimum
    InvalidParameters:
      type: array
      nullable: false
      uniqueItems: true
      minItems: 1
      description: invalid parameters
      items:
        oneOf:
          - $ref: '#/components/schemas/InvalidParameterStandard'
          - $ref: '#/components/schemas/InvalidParameterMinimumLength'
          - $ref: '#/components/schemas/InvalidParameterChoiceItem'
          - $ref: '#/components/schemas/InvalidParameterDependentItem'
    InvalidParameterStandard:
      type: object
      additionalProperties: false
      properties:
        field:
          type: string
          example: name
          readOnly: true
        rule:
          $ref: '#/components/schemas/InvalidRules'
        source:
          type: string
          example: body
        reason:
          type: string
          example: is a required field
          readOnly: true
      required:
        - field
        - reason
    InvalidRules:
      description: invalid parameters rules
      type: string
      readOnly: true
      nullable: true
      enum:
        - required
        - max_length
        - is_array
        - is_base64
        - is_boolean
        - is_date_time
        - is_integer
        - is_null
        - is_number
        - is_object
        - is_string
        - is_uuid
        - is_fqdn
        - is_arn
        - unknown_property
        - is_label
        - matches_regex
        - invalid
        - is_supported_network_availability_zone_list
        - is_supported_network_cidr_block
        - is_supported_provider_region
    JWT:
      allOf:
        - $ref: '#/components/schemas/JWTWithoutParents'
        - properties:
            consumer:
              additionalProperties: false
              properties:
                id:
                  type: string
              type: object
              x-foreign: true
          type: object
    JWTWithoutParents:
      properties:
        algorithm:
          default: HS256
          enum:
            - HS256
            - HS384
            - HS512
            - RS256
            - RS384
            - RS512
            - ES256
            - ES384
            - ES512
            - PS256
            - PS384
            - PS512
            - EdDSA
          type: string
        created_at:
          description: Unix epoch when the resource was created.
          readOnly: true
          type: integer
        id:
          readOnly: true
          type: string
        key:
          type: string
        rsa_public_key:
          type: string
        secret:
          type: string
        tags:
          items:
            type: string
          type: array
      type: object
    Key:
      properties:
        created_at:
          description: Unix epoch when the resource was created.
          readOnly: true
          type: integer
        id:
          readOnly: true
          type: string
        jwk:
          description: A JSON Web Key represented as a string.
          type: string
        kid:
          description: A unique identifier for a key.
          type: string
        name:
          description: The name to associate with the given keys.
          type: string
        pem:
          description: A keypair in PEM format.
          properties:
            private_key:
              type: string
            public_key:
              type: string
          type: object
        set:
          additionalProperties: false
          description: The id (an UUID) of the key-set with which to associate the key.
          properties:
            id:
              type: string
          type: object
          x-foreign: true
        tags:
          description: >-
            An optional set of strings associated with the Key for grouping and filtering.
          items:
            type: string
          type: array
        updated_at:
          description: Unix epoch when the resource was last updated.
          readOnly: true
          type: integer
      type: object
    KeyAuth:
      allOf:
        - $ref: '#/components/schemas/KeyAuthWithoutParents'
        - properties:
            consumer:
              additionalProperties: false
              properties:
                id:
                  type: string
              type: object
              x-foreign: true
          type: object
    KeyAuthWithoutParents:
      properties:
        created_at:
          description: Unix epoch when the resource was created.
          readOnly: true
          type: integer
        id:
          readOnly: true
          type: string
        key:
          type: string
        tags:
          items:
            type: string
          type: array
      type: object
    KeySet:
      properties:
        created_at:
          description: Unix epoch when the resource was created.
          readOnly: true
          type: integer
        id:
          readOnly: true
          type: string
        name:
          type: string
        tags:
          items:
            type: string
          type: array
        updated_at:
          description: Unix epoch when the resource was last updated.
          readOnly: true
          type: integer
      type: object
    Labels:
      title: Labels
      type: object
      example:
        env: test
      description: "Labels store metadata of an entity that can be used for filtering an entity list or for searching across entity types. \n\nKeys must be of length 1-63 characters, and cannot start with \"kong\", \"konnect\", \"mesh\", \"kic\", or \"_\".\n"
      additionalProperties:
        type: string
        pattern: ^[a-z0-9A-Z]{1}([a-z0-9A-Z-._]*[a-z0-9A-Z]+)?$
        minLength: 1
        maxLength: 63
      maxProperties: 50
    LabelsUpdate:
      type: object
      nullable: true
      description: "Labels store metadata of an entity that can be used for filtering an entity list or for searching across entity types. \n\nKeys must be of length 1-63 characters, and cannot start with \"kong\", \"konnect\", \"mesh\", \"kic\", or \"_\".\n"
      example:
        env: test
      maxProperties: 50
      additionalProperties:
        type: string
        pattern: ^[a-z0-9A-Z]{1}([a-z0-9A-Z-._]*[a-z0-9A-Z]+)?$
        minLength: 1
        maxLength: 63
        nullable: true
      writeOnly: true
    NotFoundError:
      allOf:
        - $ref: '#/components/schemas/BaseError'
        - type: object
          properties:
            status:
              example: 404
            title:
              example: Not Found
            type:
              example: https://httpstatuses.com/404
            instance:
              example: kong:trace:1234567890
            detail:
              example: Not found
    PageMeta:
      type: object
      description: >-
        Contains pagination query parameters and the total number of objects returned.
      required:
        - number
        - size
        - total
      properties:
        number:
          type: number
          example: 1
        size:
          type: number
          example: 10
        total:
          type: number
          example: 100
    PaginatedMeta:
      type: object
      title: PaginatedMeta
      description: returns the pagination information
      properties:
        page:
          $ref: '#/components/schemas/PageMeta'
      required:
        - page
    PaginationOffsetResponse:
      description: >-
        Offset is used to paginate through the API. Provide this value to the next list operation to fetch the next page
      type: string
    Plugin:
      allOf:
        - $ref: '#/components/schemas/PluginWithoutParents'
        - properties:
            consumer:
              additionalProperties: false
              description: >-
                If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
              properties:
                id:
                  type: string
              type: object
              x-foreign: true
            consumer_group:
              additionalProperties: false
              properties:
                id:
                  type: string
              type: object
              x-foreign: true
            route:
              additionalProperties: false
              description: >-
                If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
              properties:
                id:
                  type: string
              type: object
              x-foreign: true
            service:
              additionalProperties: false
              description: >-
                If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
              properties:
                id:
                  type: string
              type: object
              x-foreign: true
          type: object
    PluginWithoutParents:
      properties:
        config:
          additionalProperties: true
          description: >-
            The configuration properties for the Plugin which can be found on the plugins documentation page in the [Kong Hub](https://docs.konghq.com/hub/).
          type: object
        created_at:
          description: Unix epoch when the resource was created.
          readOnly: true
          type: integer
        enabled:
          default: true
          description: Whether the plugin is applied.
          type: boolean
        id:
          readOnly: true
          type: string
        instance_name:
          type: string
        name:
          description: >-
            The name of the Plugin that's going to be added. Currently, the Plugin must be installed in every Kong instance separately.
          type: string
        ordering:
          additionalProperties: true
          type: object
        protocols:
          default:
            - grpc
            - grpcs
            - http
            - https
          description: >-
            A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
          items:
            enum:
              - grpc
              - grpcs
              - http
              - https
              - tcp
              - tls
              - tls_passthrough
              - udp
              - ws
              - wss
            type: string
          type: array
        tags:
          description: >-
            An optional set of strings associated with the Plugin for grouping and filtering.
          items:
            type: string
          type: array
        updated_at:
          description: Unix epoch when the resource was last updated.
          readOnly: true
          type: integer
      type: object
    ProxyURL:
      title: ProxyURL
      description: >-
        Proxy URL associated with reaching the data-planes connected to a control-plane.
      type: object
      additionalProperties: false
      properties:
        host:
          type: string
          description: Hostname of the proxy URL.
        port:
          type: integer
          description: Port of the proxy URL.
        protocol:
          type: string
          description: Protocol of the proxy URL.
      required:
        - host
        - port
        - protocol
      example:
        host: example.com
        port: 443
        protocol: https
    ProxyURLs:
      title: ProxyURLs
      description: >-
        Array of proxy URLs associated with reaching the data-planes connected to a control-plane.
      type: array
      items:
        $ref: '#/components/schemas/ProxyURL'
      example:
        - host: example.com
          port: 443
          protocol: https
    Route:
      allOf:
        - $ref: '#/components/schemas/RouteWithoutParents'
        - properties:
            service:
              additionalProperties: false
              description: >-
                The Service this Route is associated to. This is where the Route proxies traffic to.
              properties:
                id:
                  type: string
              type: object
          type: object
    RouteWithoutParents:
      description: The request schema for the create route's request.
      properties:
        created_at:
          description: Unix epoch when the resource was created.
          readOnly: true
          type: integer
        destinations:
          description: >-
            A list of IP destinations of incoming connections that match this Route when using stream routing. Each entry is an object with fields "ip" (optionally in CIDR range notation) and/or "port".
          items:
            properties:
              ip:
                type: string
              port:
                type: integer
            type: object
          type: array
        headers:
          additionalProperties:
            type: string
          description: >-
            One or more lists of values indexed by header name that will cause this Route to match if present in the request. The `Host` header cannot be used with this attribute: hosts should be specified using the `hosts` attribute. When `headers` contains only one value and that value starts with the special prefix `~*`, the value is interpreted as a regular expression.
          type: object
        hosts:
          description: >-
            A list of domain names that match this Route. Note that the hosts value is case sensitive.
          items:
            type: string
          type: array
        https_redirect_status_code:
          default: 426
          description: >-
            The status code Kong responds with when all properties of a Route match except the protocol i.e. if the protocol of the request is `HTTP` instead of `HTTPS`. `Location` header is injected by Kong if the field is set to 301, 302, 307 or 308. Note: This config applies only if the Route is configured to only accept the `https` protocol.
          enum:
            - 426
            - 301
            - 302
            - 307
            - 308
          type: integer
        id:
          readOnly: true
          type: string
        methods:
          description: A list of HTTP methods that match this Route.
          items:
            type: string
          type: array
        name:
          description: >-
            The name of the Route. Route names must be unique, and they are case sensitive. For example, there can be two different Routes named "test" and "Test".
          type: string
        path_handling:
          default: v0
          description: >-
            Controls how the Service path, Route path and requested path are combined when sending a request to the upstream. See above for a detailed description of each behavior.
          enum:
            - v0
            - v1
          type: string
        paths:
          description: A list of paths that match this Route.
          items:
            type: string
          type: array
        preserve_host:
          default: false
          description: >-
            When matching a Route via one of the `hosts` domain names, use the request `Host` header in the upstream request headers. If set to `false`, the upstream `Host` header will be that of the Service's `host`.
          type: boolean
        protocols:
          default:
            - http
            - https
          description: >-
            An array of the protocols this Route should allow. See the [Route Object](#route-object) section for a list of accepted protocols. When set to only `"https"`, HTTP requests are answered with an upgrade error. When set to only `"http"`, HTTPS requests are answered with an error.
          items:
            enum:
              - grpc
              - grpcs
              - http
              - https
              - tcp
              - tls
              - tls_passthrough
              - udp
              - ws
              - wss
            type: string
          type: array
        regex_priority:
          default: 0
          description: >-
            A number used to choose which route resolves a given request when several routes match it using regexes simultaneously. When two routes match the path and have the same `regex_priority`, the older one (lowest `created_at`) is used. Note that the priority for non-regex routes is different (longer non-regex routes are matched before shorter ones).
          type: integer
        request_buffering:
          default: true
          description: >-
            Whether to enable request body buffering or not. With HTTP 1.1, it may make sense to turn this off on services that receive data with chunked transfer encoding.
          type: boolean
        response_buffering:
          default: true
          description: >-
            Whether to enable response body buffering or not. With HTTP 1.1, it may make sense to turn this off on services that send data with chunked transfer encoding.
          type: boolean
        snis:
          description: A list of SNIs that match this Route when using stream routing.
          items:
            type: string
          type: array
        sources:
          description: >-
            A list of IP sources of incoming connections that match this Route when using stream routing. Each entry is an object with fields "ip" (optionally in CIDR range notation) and/or "port".
          items:
            properties:
              ip:
                type: string
              port:
                type: integer
            type: object
          type: array
        strip_path:
          default: true
          description: >-
            When matching a Route via one of the `paths`, strip the matching prefix from the upstream request URL.
          type: boolean
        tags:
          description: >-
            An optional set of strings associated with the Route for grouping and filtering.
          items:
            type: string
          type: array
        updated_at:
          description: Unix epoch when the resource was last updated.
          readOnly: true
          type: integer
      type: object
    SCGWLabels:
      title: Labels
      type: object
      example:
        env: test
      description: >-
        Labels to facilitate tagged search on serverless cloud gateways. Keys must be of length 1-63 characters, and cannot start with 'kong', 'konnect', 'mesh', 'kic', or '_'.
      additionalProperties:
        type: string
        pattern: ^[a-z0-9A-Z]{1}([a-z0-9A-Z\-\.\_]*[a-z0-9A-Z]+)?$
        minLength: 1
        maxLength: 63
    ServerlessCloudGateway:
      x-speakeasy-entity: ServerlessCloudGateway
      type: object
      title: ServerlessCloudGateway
      description: A serverless cloud gateway
      required:
        - control_plane
        - gateway_endpoint
        - updated_at
        - created_at
      properties:
        control_plane:
          $ref: '#/components/schemas/ServerlessControlPlane'
        gateway_endpoint:
          type: string
          format: hostname
          description: Endpoint for the serverless cloud gateway.
          example: us-kong-4594857kpl.kongcloud.dev
          readOnly: true
        created_at:
          type: string
          format: date-time
          example: '2023-01-11T02:30:42.227Z'
          readOnly: true
        updated_at:
          type: string
          format: date-time
          example: '2023-01-11T02:30:42.227Z'
          readOnly: true
        labels:
          $ref: '#/components/schemas/SCGWLabels'
    ServerlessControlPlane:
      type: object
      title: Control plane
      x-go-name: ControlPlane
      required:
        - id
        - prefix
        - region
      properties:
        id:
          type: string
          format: uuid
          description: ID of the serverless cloud gateway CP.
          example: d32d905a-ed33-46a3-a093-d8f536af9a8a
        prefix:
          type: string
          description: The prefix of the serverless cloud gateway CP.
          example: 518da50bf7
        region:
          $ref: '#/components/schemas/CpRegion'
    Service:
      description: The request schema for the create control plane's request.
      properties:
        ca_certificates:
          description: >-
            Array of `CA Certificate` object UUIDs that are used to build the trust store while verifying upstream server's TLS certificate. If set to `null` when Nginx default is respected. If default CA list in Nginx are not specified and TLS verification is enabled, then handshake with upstream server will always fail (because no CA are trusted).
          items:
            type: string
          type: array
        client_certificate:
          additionalProperties: false
          description: >-
            Certificate to be used as client certificate while TLS handshaking to the upstream server.
          properties:
            id:
              type: string
          type: object
        connect_timeout:
          default: 60000
          description: >-
            The timeout in milliseconds for establishing a connection to the upstream server.
          type: integer
        created_at:
          description: Unix epoch when the resource was created.
          readOnly: true
          type: integer
        enabled:
          default: true
          description: >-
            Whether the Service is active. If set to `false`, the proxy behavior will be as if any routes attached to it do not exist (404). Default: `true`.
          type: boolean
        host:
          description: >-
            The host of the upstream server. Note that the host value is case sensitive.
          type: string
        id:
          readOnly: true
          type: string
        name:
          description: The Service name.
          type: string
        path:
          description: The path to be used in requests to the upstream server.
          type: string
        port:
          default: 80
          description: The upstream server port.
          type: integer
        protocol:
          default: http
          description: The protocol used to communicate with the upstream.
          enum:
            - grpc
            - grpcs
            - http
            - https
            - tcp
            - tls
            - tls_passthrough
            - udp
            - ws
            - wss
          type: string
        read_timeout:
          default: 60000
          description: >-
            The timeout in milliseconds between two successive read operations for transmitting a request to the upstream server.
          type: integer
        retries:
          default: 5
          description: The number of retries to execute upon failure to proxy.
          type: integer
        tags:
          description: >-
            An optional set of strings associated with the Service for grouping and filtering.
          items:
            type: string
          type: array
        tls_verify:
          description: >-
            Whether to enable verification of upstream server TLS certificate. If set to `null`, then the Nginx default is respected.
          type: boolean
        tls_verify_depth:
          description: >-
            Maximum depth of chain while verifying Upstream server's TLS certificate. If set to `null`, then the Nginx default is respected.
          type: integer
        updated_at:
          description: Unix epoch when the resource was last updated.
          readOnly: true
          type: integer
        url:
          description: >-
            Helper field to set `protocol`, `host`, `port` and `path` using a URL. This field is write-only and is not returned in responses.
          type: string
          writeOnly: true
        write_timeout:
          default: 60000
          description: >-
            The timeout in milliseconds between two successive write operations for transmitting a request to the upstream server.
          type: integer
      type: object
      required:
        - host
    SNI:
      allOf:
        - $ref: '#/components/schemas/SNIWithoutParents'
        - properties:
            certificate:
              additionalProperties: false
              description: >-
                The id (a UUID) of the certificate with which to associate the SNI hostname. The Certificate must have a valid private key associated with it to be used by the SNI object.
              properties:
                id:
                  type: string
              type: object
              x-foreign: true
          type: object
    SNIWithoutParents:
      properties:
        created_at:
          description: Unix epoch when the resource was created.
          readOnly: true
          type: integer
        id:
          readOnly: true
          type: string
        name:
          description: The SNI name to associate with the given certificate.
          type: string
        tags:
          description: >-
            An optional set of strings associated with the SNIs for grouping and filtering.
          items:
            type: string
          type: array
        updated_at:
          description: Unix epoch when the resource was last updated.
          readOnly: true
          type: integer
      type: object
    SortQuery:
      title: SortQuery
      type: string
      example: name,created_at desc
      description: >
        The `asc` suffix is optional as the default sort order is ascending.

        The `desc` suffix is used to specify a descending order.

        Multiple sort attributes may be provided via a comma separated list.

        JSONPath notation may be used to specify a sub-attribute (eg: 'foo.bar desc').

    StringFieldContainsFilter:
      type: object
      title: StringFieldContainsFilter
      description: Filter a string value field by partial contains.
      properties:
        contains:
          type: string
      required:
        - contains
    StringFieldEqualsFilter:
      title: StringFieldEqualsFilter
      description: Filter a string value by exact match.
      type: string
    StringFieldFilter:
      title: StringFieldFilter
      description: Filter a string value field either by exact match or partial contains.
      oneOf:
        - $ref: '#/components/schemas/StringFieldEqualsFilter'
        - $ref: '#/components/schemas/StringFieldContainsFilter'
    SystemAccount:
      x-speakeasy-entity: SystemAccount
      title: System Account
      type: object
      example:
        id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
        name: Example System Account
        description: This is a sample system account description.
        created_at: '2022-08-24T14:15:22Z'
        updated_at: '2022-10-05T10:33:49Z'
        konnect_managed: false
      description: Schema of the system account.
      properties:
        id:
          type: string
          format: uuid
          description: ID of the system account.
          readOnly: true
        name:
          type: string
          description: Name of the system account.
        description:
          type: string
          description: Description of the system account.
        created_at:
          type: string
          format: date-time
          description: Timestamp of when the system account was created.
          readOnly: true
        updated_at:
          type: string
          format: date-time
          description: Timestamp of when the system account was last updated.
          readOnly: true
        konnect_managed:
          type: boolean
          description: The system account is managed by Konnect (true/false).
    SystemAccountAccessToken:
      x-speakeasy-entity: SystemAccountAccessToken
      title: System Account Access Token
      example:
        id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
        name: Sample Access Token
        created_at: '2022-08-01T14:16:09Z'
        updated_at: '2022-08-02T08:35:49Z'
        expires_at: '2022-12-31T12:52:23Z'
        last_used_at: '2022-10-24T13:05:42Z'
      description: Schema of the system account access token.
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: ID of the system account access token.
          readOnly: true
        name:
          type: string
          description: Name of the system account access token.
        created_at:
          type: string
          format: date-time
          description: Timestamp of when the system account access token was created.
          readOnly: true
        updated_at:
          type: string
          format: date-time
          description: Timestamp of when the system account access token was last updated.
          readOnly: true
        expires_at:
          type: string
          format: date-time
          description: Timestamp of when the system account access token will expire.
        last_used_at:
          type: string
          format: date-time
          description: Timestamp of when the system account access token was last used.
          readOnly: true
    Target:
      allOf:
        - $ref: '#/components/schemas/TargetWithoutParents'
        - properties:
            upstream:
              additionalProperties: false
              properties:
                id:
                  type: string
              type: object
              x-foreign: true
          type: object
    TargetWithoutParents:
      properties:
        created_at:
          description: Unix epoch when the resource was created.
          readOnly: true
          type: number
        id:
          readOnly: true
          type: string
        tags:
          description: >-
            An optional set of strings associated with the Target for grouping and filtering.
          items:
            type: string
          type: array
        target:
          description: >-
            The target address (ip or hostname) and port. If the hostname resolves to an SRV record, the `port` value will be overridden by the value from the DNS record.
          type: string
        updated_at:
          description: Unix epoch when the resource was last updated.
          readOnly: true
          type: number
        weight:
          default: 100
          description: >-
            The weight this target gets within the upstream loadbalancer (`0`-`65535`). If the hostname resolves to an SRV record, the `weight` value will be overridden by the value from the DNS record.
          type: integer
      type: object
    Team:
      x-speakeasy-entity: Team
      title: Team
      type: object
      description: The team object contains information about a group of users.
      example:
        id: 7f9fd312-a987-4628-b4c5-bb4f4fddd5f7
        name: IDM - Developers
        description: The developers for the IDM API.
        system_team: false
        labels:
          env: test
        created_at: '1992-02-07T17:46:57.52Z'
        updated_at: '2022-08-31T17:00:00.52Z'
      properties:
        id:
          type: string
          format: uuid
          example: 7f9fd312-a987-4628-b4c5-bb4f4fddd5f7
          description: The team ID.
          readOnly: true
        name:
          type: string
          pattern: ^[\w \W]+$
          example: IDM - Developers
          maxLength: 250
          description: The name of the team.
        description:
          type: string
          example: The developers for the IDM API.
          maxLength: 250
          description: The team description in Konnect.
        system_team:
          type: boolean
          default: false
          description: >-
            Returns True if a user belongs to a `system_team`. System teams are teams that can manage Konnect objects, like "Organization Admin", or "Service"
          readOnly: true
        labels:
          $ref: '#/components/schemas/Labels'
        created_at:
          type: string
          format: date-time
          example: '1992-02-07T17:46:57.52Z'
          description: A Unix timestamp representation of team creation.
          readOnly: true
        updated_at:
          type: string
          format: date-time
          example: '2022-02-07T17:00:00.52Z'
          description: >
            A Unix timestamp representation of the most recent change to the team object in Konnect.

          readOnly: true
    TeamGroupMapping:
      title: TeamGroupMapping
      type: object
      description: A map of Konnect Team to IdP groups.
      example:
        team_id: 6801e673-cc10-498a-94cd-4271de07a0d3
        groups:
          - Tech Leads
          - API Engineers
      properties:
        team_id:
          type: string
          format: uuid
          example: 6801e673-cc10-498a-94cd-4271de07a0d3
          description: The Konnect team ID.
        groups:
          type: array
          uniqueItems: true
          description: The IdP groups that are mapped to the specified team.
          items:
            type: string
            example: API Engineers
    TeamMapping:
      title: TeamMapping
      type: object
      description: A team assignment is a mapping of an IdP group to a Konnect Team.
      example:
        group: Service Developers
        team_ids:
          - 6801e673-cc10-498a-94cd-4271de07a0d3
      properties:
        group:
          type: string
          example: Service Developers
          description: The IdP group.
        team_ids:
          type: array
          uniqueItems: true
          description: An array of ID's that are mapped to the specified group.
          items:
            type: string
            format: uuid
            example: 6801e673-cc10-498a-94cd-4271de07a0d3
    UnauthorizedError:
      allOf:
        - $ref: '#/components/schemas/BaseError'
        - type: object
          properties:
            status:
              example: 401
            title:
              example: Unauthorized
            type:
              example: https://httpstatuses.com/401
            instance:
              example: kong:trace:1234567890
            detail:
              example: Invalid credentials
    UpdateControlPlaneRequest:
      title: UpdateControlPlaneRequest
      description: The request schema for the update control plane request.
      type: object
      additionalProperties: false
      properties:
        name:
          type: string
          example: Test Control Plane
          description: The name of the control plane.
        description:
          type: string
          example: A test control plane for exploration.
          description: The description of the control plane in Konnect.
        auth_type:
          type: string
          description: >-
            The auth type value of the cluster associated with the Runtime Group.
          example: pinned_client_certs
          enum:
            - pinned_client_certs
            - pki_client_certs
        proxy_urls:
          $ref: '#/components/schemas/ProxyURLs'
        labels:
          $ref: '#/components/schemas/Labels'
    Upstream:
      properties:
        algorithm:
          default: round-robin
          description: Which load balancing algorithm to use.
          enum:
            - consistent-hashing
            - least-connections
            - round-robin
            - latency
          type: string
        client_certificate:
          additionalProperties: false
          description: >-
            If set, the certificate to be used as client certificate while TLS handshaking to the upstream server.
          properties:
            id:
              type: string
          type: object
        created_at:
          description: Unix epoch when the resource was created.
          readOnly: true
          type: integer
        hash_fallback:
          default: none
          description: >-
            What to use as hashing input if the primary `hash_on` does not return a hash (eg. header is missing, or no Consumer identified). Not available if `hash_on` is set to `cookie`.
          enum:
            - none
            - consumer
            - ip
            - header
            - cookie
            - path
            - query_arg
            - uri_capture
          type: string
        hash_fallback_header:
          description: >-
            The header name to take the value from as hash input. Only required when `hash_fallback` is set to `header`.
          type: string
        hash_fallback_query_arg:
          description: >-
            The name of the query string argument to take the value from as hash input. Only required when `hash_fallback` is set to `query_arg`.
          type: string
        hash_fallback_uri_capture:
          description: >-
            The name of the route URI capture to take the value from as hash input. Only required when `hash_fallback` is set to `uri_capture`.
          type: string
        hash_on:
          default: none
          description: >-
            What to use as hashing input. Using `none` results in a weighted-round-robin scheme with no hashing.
          enum:
            - none
            - consumer
            - ip
            - header
            - cookie
            - path
            - query_arg
            - uri_capture
          type: string
        hash_on_cookie:
          description: >-
            The cookie name to take the value from as hash input. Only required when `hash_on` or `hash_fallback` is set to `cookie`. If the specified cookie is not in the request, Kong will generate a value and set the cookie in the response.
          type: string
        hash_on_cookie_path:
          default: /
          description: >-
            The cookie path to set in the response headers. Only required when `hash_on` or `hash_fallback` is set to `cookie`.
          type: string
        hash_on_header:
          description: >-
            The header name to take the value from as hash input. Only required when `hash_on` is set to `header`.
          type: string
        hash_on_query_arg:
          description: >-
            The name of the query string argument to take the value from as hash input. Only required when `hash_on` is set to `query_arg`.
          type: string
        hash_on_uri_capture:
          description: >-
            The name of the route URI capture to take the value from as hash input. Only required when `hash_on` is set to `uri_capture`.
          type: string
        healthchecks:
          properties:
            active:
              properties:
                concurrency:
                  default: 10
                  type: integer
                headers:
                  additionalProperties: true
                  type: object
                healthy:
                  properties:
                    http_statuses:
                      default:
                        - 200
                        - 302
                      items:
                        type: integer
                      type: array
                    interval:
                      default: 0
                      type: number
                    successes:
                      default: 0
                      type: integer
                  type: object
                http_path:
                  default: /
                  type: string
                https_sni:
                  type: string
                https_verify_certificate:
                  default: true
                  type: boolean
                timeout:
                  default: 1
                  type: number
                type:
                  default: http
                  enum:
                    - tcp
                    - http
                    - https
                    - grpc
                    - grpcs
                  type: string
                unhealthy:
                  properties:
                    http_failures:
                      default: 0
                      type: integer
                    http_statuses:
                      default:
                        - 429
                        - 404
                        - 500
                        - 501
                        - 502
                        - 503
                        - 504
                        - 505
                      items:
                        type: integer
                      type: array
                    interval:
                      default: 0
                      type: number
                    tcp_failures:
                      default: 0
                      type: integer
                    timeouts:
                      default: 0
                      type: integer
                  type: object
              type: object
            passive:
              properties:
                healthy:
                  properties:
                    http_statuses:
                      default:
                        - 200
                        - 201
                        - 202
                        - 203
                        - 204
                        - 205
                        - 206
                        - 207
                        - 208
                        - 226
                        - 300
                        - 301
                        - 302
                        - 303
                        - 304
                        - 305
                        - 306
                        - 307
                        - 308
                      items:
                        type: integer
                      type: array
                    successes:
                      default: 0
                      type: integer
                  type: object
                type:
                  default: http
                  enum:
                    - tcp
                    - http
                    - https
                    - grpc
                    - grpcs
                  type: string
                unhealthy:
                  properties:
                    http_failures:
                      default: 0
                      type: integer
                    http_statuses:
                      default:
                        - 429
                        - 500
                        - 503
                      items:
                        type: integer
                      type: array
                    tcp_failures:
                      default: 0
                      type: integer
                    timeouts:
                      default: 0
                      type: integer
                  type: object
              type: object
            threshold:
              default: 0
              type: number
          type: object
        host_header:
          description: >-
            The hostname to be used as `Host` header when proxying requests through Kong.
          type: string
        id:
          readOnly: true
          type: string
        name:
          description: This is a hostname, which must be equal to the `host` of a Service.
          type: string
        slots:
          default: 10000
          description: >-
            The number of slots in the load balancer algorithm. If `algorithm` is set to `round-robin`, this setting determines the maximum number of slots. If `algorithm` is set to `consistent-hashing`, this setting determines the actual number of slots in the algorithm. Accepts an integer in the range `10`-`65536`.
          type: integer
        tags:
          description: >-
            An optional set of strings associated with the Upstream for grouping and filtering.
          items:
            type: string
          type: array
        updated_at:
          description: Unix epoch when the resource was last updated.
          readOnly: true
          type: integer
        use_srv_name:
          default: false
          description: >-
            If set, the balancer will use SRV hostname(if DNS Answer has SRV record) as the proxy upstream `Host`.
          type: boolean
      type: object
    User:
      title: User
      type: object
      description: >-
        The user object contains information about an individual user who can use the Konnect application and API.
      example:
        id: 7f9fd312-a987-4628-b4c5-bb4f4fddd5f7
        email: user@email.com
        full_name: Test User
        preferred_name: test
        active: true
        created_at: '2022-02-07T17:46:57.52Z'
        updated_at: '2022-10-08T17:00:00.52Z'
      properties:
        id:
          type: string
          format: uuid
          example: 7f9fd312-a987-4628-b4c5-bb4f4fddd5f7
          description: The User ID.
          readOnly: true
        email:
          type: string
          format: email
          example: user@email.com
          maxLength: 250
          description: The email registered to the user.
        full_name:
          type: string
          pattern: ^[\w \W]+$
          maxLength: 250
          description: The User's full name.
          example: Jane Doe
        preferred_name:
          type: string
          example: Jane
          maxLength: 250
          description: The User's preferred name.
        active:
          type: boolean
          default: true
          description: Returns True if a user has verified their email address.
          readOnly: true
        created_at:
          type: string
          format: date-time
          example: '2022-02-07T17:46:57.52Z'
          description: The time stamp for the date the account was registered.
          readOnly: true
        updated_at:
          type: string
          format: date-time
          example: '2022-10-08T17:00:00.52Z'
          description: >-
            A Unix timestamp representation of the most recent change to the User account.
          readOnly: true
    Vault:
      properties:
        config:
          description: >-
            The configuration properties for the Vault which can be found on the vaults' documentation page.
          type: object
        created_at:
          description: Unix epoch when the resource was created.
          readOnly: true
          type: integer
        description:
          description: The description of the Vault entity.
          type: string
        id:
          readOnly: true
          type: string
        name:
          description: >-
            The name of the Vault that's going to be added. Currently, the Vault implementation must be installed in every Kong instance.
          type: string
        prefix:
          description: >-
            The unique prefix (or identifier) for this Vault configuration. The prefix is used to load the right Vault configuration and implementation when referencing secrets with the other entities.
          type: string
        tags:
          description: >-
            An optional set of strings associated with the Vault for grouping and filtering.
          items:
            type: string
          type: array
        updated_at:
          description: Unix epoch when the resource was last updated.
          readOnly: true
          type: integer
      type: object
    CreateServiceWithoutParents:
      description: |-
        The request schema for the create service request.
    CreateRouteWithoutParents:
      description: |2-
        The request schema for the create route request.
  securitySchemes:
    konnectAccessToken:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: >-
        The Konnect access token is meant to be used by the Konnect dashboard and the decK CLI to authenticate with.
    personalAccessToken:
      type: http
      scheme: bearer
      bearerFormat: Token
      description: >-
        The personal access token is meant to be used as an alternative to basic-auth when accessing Konnect via APIs. You can generate a Personal Access Token (PAT) from the personal access token page in the Konnect dashboard.
    systemAccountAccessToken:
      type: http
      scheme: bearer
      bearerFormat: Token
      description: >
        The system account access token is meant for automations and integrations that are not directly associated with a human identity.

        You can generate a system account Access Token by creating a system account and then obtaining a system account access token for that account.

        The access token must be passed in the header of a request, for example:

        `curl -X GET 'https://global.api.konghq.com/v2/users/' --header 'Authorization: Bearer spat_i2Ej...'`

  requestBodies:
    AddSystemAccountToTeam:
      content:
        application/json:
          schema:
            x-speakeasy-entity: SystemAccountTeam
            type: object
            properties:
              id:
                x-speakeasy-name-override: account_id
                type: string
                description: ID of the system account.
                format: uuid
      description: The request schema for adding a system account to a team.
    AddUserToTeam:
      description: The request schema for adding a user to a team.
      content:
        application/json:
          schema:
            type: object
            properties:
              id:
                type: string
                example: df120cb4-f60b-47bc-a2f8-6a28e6a3c63b
                format: uuid
                description: The user ID for the user being added to a team.
                writeOnly: true
                x-speakeasy-name-override: user_id
            required:
              - id
    AssignRole:
      content:
        application/json:
          schema:
            type: object
            description: >-
              An assigned role is a role that has been assigned to a user or team.
            properties:
              role_name:
                type: string
                example: Viewer
                description: The desired role.
                enum:
                  - Admin
                  - Appearance Maintainer
                  - Application Registration
                  - Certificate Admin
                  - Cloud Gateway Cluster Admin
                  - Cloud Gateway Cluster Viewer
                  - Consumer Admin
                  - Creator
                  - Deployer
                  - Discovery Admin
                  - Discovery Viewer
                  - Gateway Service Admin
                  - Integration Admin
                  - Integration Viewer
                  - Key Admin
                  - Maintainer
                  - Network Admin
                  - Network Creator
                  - Network Viewer
                  - Plugin Admin
                  - Plugins Admin
                  - Product Publisher
                  - Publisher
                  - Route Admin
                  - SNI Admin
                  - Service Admin
                  - Service Creator
                  - Service Viewer
                  - Upstream Admin
                  - Vault Admin
                  - Viewer
              entity_id:
                type: string
                format: uuid
                example: e67490ce-44dc-4cbd-b65e-b52c746fc26a
                description: The ID of the entity.
              entity_type_name:
                type: string
                example: Control Planes
                description: The type of entity.
                enum:
                  - API Products
                  - Application Auth Strategies
                  - Audit Logs
                  - Control Planes
                  - DCR Providers
                  - Identity
                  - Mesh Control Planes
                  - Networks
                  - Portals
                  - Service Hub
              entity_region:
                type: string
                enum:
                  - us
                  - eu
                  - au
                  - '*'
                example: eu
                description: The region of the team.
      description: The request schema for assigning a role.
    create-plugin-schemas:
      content:
        application/json:
          schema:
            x-speakeasy-entity: GatewayCustomPluginSchema
            type: object
            properties:
              lua_schema:
                type: string
                description: |
                  The custom plugin schema; `jq -Rs '.' schema.lua`.
                example: >-
                  return { name = \"myplugin\", fields = { { config = { type = \"record\", fields = { } } } } }
            required:
              - lua_schema
    CreateSystemAccount:
      content:
        application/json:
          schema:
            x-speakeasy-entity: SystemAccount
            type: object
            required:
              - name
              - description
            properties:
              name:
                type: string
                description: Name of the system account.
              description:
                type: string
                description: >-
                  Description of the system account. Useful when the system account name is not sufficient to differentiate one system account from another.
              konnect_managed:
                type: boolean
                description: The system account is managed by Konnect (true/false).
      description: The request schema to create a system account.
    CreateSystemAccountAccessToken:
      content:
        application/json:
          schema:
            x-speakeasy-entity: SystemAccountAccessToken
            type: object
            properties:
              name:
                type: string
              expires_at:
                type: string
                format: date-time
      description: The request body to create a system account access token.
    CreateTeam:
      description: >-
        The request schema for the create team request.


        If you pass the same `name` and `description` of an existing team in the request, a team with the same `name` and `description` will be created. The two teams will have different `team_id` values to differentiate them.
      content:
        application/json:
          schema:
            x-speakeasy-entity: Team
            type: object
            properties:
              name:
                type: string
                example: IDM - Developers
                pattern: ^[\w \W]+$
                description: A name for the team being created.
                writeOnly: true
              description:
                type: string
                maxLength: 250
                example: The Identity Management (IDM) team.
                description: The description of the new team.
                writeOnly: true
              labels:
                $ref: '#/components/schemas/Labels'
            required:
              - name
    DataPlaneClientCertificateRequest:
      content:
        application/json:
          schema:
            type: object
            properties:
              cert:
                type: string
                description: JSON escaped string of the certificate.
            required:
              - cert
      description: Request body for creating a dp-client-certificate.
    GroupMembershipRemove:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GroupMembership'
      description: >-
        Request body for removing a list of child control planes from a control plane group membership.
    GroupMemebershipAdd:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GroupMembership'
      description: >-
        Request body for adding a list of child control planes to a control plane group membership.
    InviteUser:
      content:
        application/json:
          schema:
            type: object
            properties:
              email:
                type: string
                format: email
                example: james.c.woods@example.com
                writeOnly: true
            required:
              - email
      description: >-
        The request schema for the invite user request.


        If you pass an `email` that is not already an active user in the request, a fresh invitation email will be created and sent to the new user.
    PatchTeamGroupMappings:
      content:
        application/json:
          schema:
            type: object
            example:
              data:
                - group: Service Developers
                  team_ids:
                    - af91db4c-6e51-403e-a2bf-33d27ae50c0a
            properties:
              data:
                type: array
                description: The IdP groups to map to the given team.
                items:
                  type: object
                  properties:
                    team_id:
                      type: string
                      format: uuid
                    groups:
                      type: array
                      items:
                        type: string
      description: >-
        The request schema for a partial update of mappings from Konnect Teams to IdP Groups.
    UpdateAuthenticationSettings:
      description: The request schema to update an organization's authentication settings.
      content:
        application/json:
          schema:
            type: object
            properties:
              basic_auth_enabled:
                type: boolean
                example: true
                description: The organization has basic auth enabled.
              oidc_auth_enabled:
                type: boolean
                example: false
                description: The organization has OIDC disabled.
              idp_mapping_enabled:
                type: boolean
                example: true
                description: Whether IdP groups determine the Konnect teams a user has.
              konnect_mapping_enabled:
                type: boolean
                example: false
                description: Whether a Konnect Identity Admin assigns teams to a user.
    UpdateIdPConfiguration:
      content:
        application/json:
          schema:
            type: object
            properties:
              issuer:
                type: string
                format: uri
                example: https://myidp.com/oauth2
              login_path:
                type: string
                example: myapp
              client_id:
                type: string
                example: YOUR_CLIENT_ID
              client_secret:
                type: string
                example: YOUR_CLIENT_SECRET
              scopes:
                type: array
                default:
                  - email
                  - openid
                  - profile
                items:
                  type: string
                  default: openid
              claim_mappings:
                type: object
                minProperties: 3
                properties:
                  name:
                    type: string
                    example: name
                    default: name
                  email:
                    type: string
                    example: email
                    default: email
                  groups:
                    type: string
                    default: groups
                    example: custom-group-claim
      description: The request schema for the update IdP configuration request.
    UpdateImpersonationSettingsRequest:
      content:
        application/json:
          schema:
            type: object
            properties:
              enabled:
                type: boolean
                example: true
                description: >-
                  Indicates if user impersonation is allowed for the organization.
      description: The request schema for adding a system account to a team.
    UpdateSystemAccount:
      content:
        application/json:
          schema:
            x-speakeasy-entity: SystemAccount
            type: object
            properties:
              name:
                type: string
                description: Name of the system account.
              description:
                type: string
                description: Description of the system account.
      description: The request schema for the update system account request.
    UpdateSystemAccountAccessToken:
      content:
        application/json:
          schema:
            x-speakeasy-entity: SystemAccountAccessToken
            type: object
            properties:
              name:
                type: string
                description: Name of the system account access token.
    UpdateTeam:
      description: The request schema for the update team request.
      content:
        application/json:
          schema:
            x-speakeasy-entity: Team
            type: object
            properties:
              name:
                type: string
                example: IDM - Developers
                pattern: ^[\w \W]+$
                description: The name of the team.
                writeOnly: true
              description:
                type: string
                maxLength: 250
                example: The Identity Management (IDM) API team.
                description: The description of the team.
                writeOnly: true
              labels:
                $ref: '#/components/schemas/LabelsUpdate'
    UpdateTeamMappings:
      content:
        application/json:
          schema:
            type: object
            example:
              mappings:
                - group: Service Developers
                  team_ids:
                    - af91db4c-6e51-403e-a2bf-33d27ae50c0a
            properties:
              mappings:
                type: array
                description: The mappings object.
                items:
                  type: object
                  properties:
                    group:
                      type: string
                    team_ids:
                      type: array
                      items:
                        type: string
      description: The request schema for updating IdP team mappings.
    UpdateUser:
      description: The request schema for the update user request.
      content:
        application/json:
          schema:
            type: object
            properties:
              full_name:
                type: string
                pattern: ^[\w \W]+$
                example: James C. Woods
                description: The user's full name.
                writeOnly: true
              preferred_name:
                type: string
                maxLength: 250
                example: Jimmy
                description: The user's desired name.
                writeOnly: true
security:
  - personalAccessToken: []
  - systemAccountAccessToken: []
  - konnectAccessToken: []
tags:
  - name: Control Planes
  - name: Control Plane Groups
  - name: Auth Settings
  - name: Invites
  - name: Roles
  - name: Team Membership
  - name: Teams
  - name: Users
  - name: System Accounts
  - name: System Accounts - Access Tokens
  - name: System Accounts - Roles
  - name: System Accounts - Team Membership
  - name: Me
  - name: Authentication
  - name: Impersonation Settings
  - name: Serverless Cloud Gateways
  - description: DP Nodes
    name: DP Nodes
  - description: DP Certificates
    name: DP Certificates
  - description: Custom Plugin Schemas
    name: Custom Plugin Schemas
  - description: >
      Service entities are abstractions of your microservice interfaces or formal APIs. For example, a service could be a data transformation microservice or a billing API.

      <br><br>

      The main attribute of a service is the destination URL for proxying traffic. This URL can be set as a single string or by specifying its protocol, host, port and path individually.

      <br><br>

      Services are associated to routes, and a single service can have many routes associated with it. Routes are entrypoints in Kong Gateway which define rules to match client requests. Once a route is matched, Kong Gateway proxies the request to its associated service. See the [Proxy Reference](https://docs.konghq.com/gateway/latest/how-kong-works/routing-traffic/) for a detailed explanation of how Kong proxies traffic.

      <br><br>

      Services can be both [tagged and filtered by tags](https://docs.konghq.com/gateway/latest/admin-api/#tags).

    name: Services
  - description: >
      Route entities define rules to match client requests. Each route is associated with a service, and a service may have multiple routes associated to it. Every request matching a given route will be proxied to the associated service. You need at least one matching rule that applies to the protocol being matched by the route.

      <br><br>

      The combination of routes and services, and the separation of concerns between them, offers a powerful routing mechanism with which it is possible to define fine-grained entrypoints in Kong Gateway leading to different upstream services of your infrastructure.

      <br><br>

      Depending on the protocol, one of the following attributes must be set:

      <br>


      - `http`: At least one of `methods`, `hosts`, `headers`, or `paths`

      - `https`: At least one of `methods`, `hosts`, `headers`, `paths`, or `snis`

      - `tcp`: At least one of `sources` or `destinations`

      - `tls`: at least one of `sources`, `destinations`, or `snis`

      - `tls_passthrough`: set `snis`

      - `grpc`: At least one of `hosts`, `headers`, or `paths`

      - `grpcs`: At least one of `hosts`, `headers`, `paths`, or `snis`

      - `ws`: At least one of `hosts`, `headers`, or `paths`

      - `wss`: At least one of `hosts`, `headers`, `paths`, or `snis`






        <br>
        A route can't have both `tls` and `tls_passthrough` protocols at same time.
        <br><br>
        Learn more about the router:
      - [Configure routes using expressions](https://docs.konghq.com/gateway/latest/key-concepts/routes/expressions)

      - [Router Expressions language reference](https://docs.konghq.com/gateway/latest/reference/router-expressions-language/)

    name: Routes
  - description: >
      A plugin entity represents a plugin configuration that will be executed during the HTTP request/response lifecycle. Plugins let you add functionality to services that run behind a Kong Gateway instance, like authentication or rate limiting.

      You can find more information about available plugins and which values each plugin accepts at the [Plugin Hub](https://docs.konghq.com/hub/).

      <br><br>

      When adding a plugin configuration to a service, the plugin will run on every request made by a client to that service. If a plugin needs to be tuned to different values for some specific consumers, you can do so by creating a separate plugin instance that specifies both the service and the consumer, through the service and consumer fields.

      <br><br>

      Plugins can be both [tagged and filtered by tags](https://docs.konghq.com/gateway/latest/admin-api/#tags).

    name: Plugins
  - description: >
      The consumer object represents a consumer - or a user - of a service.

      You can either rely on Kong Gateway as the primary datastore, or you can map the consumer list with your database to keep consistency between Kong Gateway and your existing primary datastore.

    name: Consumers
  - description: "Consumer groups enable the organization and categorization of consumers (users or applications) within an API ecosystem. \nBy grouping consumers together, you eliminate the need to manage them individually, providing a scalable, efficient approach to managing configurations."
    name: Consumer Groups
  - description: >
      A certificate object represents a public certificate, and can be optionally paired with the corresponding private key. These objects are used by Kong Gateway to handle SSL/TLS termination for encrypted requests, or for use as a trusted CA store when validating peer certificate of client/service.

      <br><br>

      Certificates are optionally associated with SNI objects to tie a cert/key pair to one or more hostnames.

      <br><br>

      If intermediate certificates are required in addition to the main certificate, they should be concatenated together into one string.

    name: Certificates
  - description: "An SNI object represents a many-to-one mapping of hostnames to a certificate. \n<br><br>\nA certificate object can have many hostnames associated with it. When Kong Gateway receives an SSL request, it uses the SNI field in the Client Hello to look up the certificate object based on the SNI associated with the certificate."
    name: SNIs
  - description: "A CA certificate object represents a trusted certificate authority. \nThese objects are used by Kong Gateway to verify the validity of a client or server certificate."
    name: CA Certificates
  - description: "The upstream object represents a virtual hostname and can be used to load balance incoming requests over multiple services (targets). \n<br><br>\nAn upstream also includes a [health checker](https://docs.konghq.com/gateway/latest/how-kong-works/health-checks/), which can enable and disable targets based on their ability or inability to serve requests. \nThe configuration for the health checker is stored in the upstream object, and applies to all of its targets."
    name: Upstreams
  - description: >
      Vault objects are used to configure different vault connectors for [managing secrets](https://docs.konghq.com/gateway/latest/kong-enterprise/secrets-management/).

      Configuring a vault lets you reference secrets from other entities.

      This allows for a proper separation of secrets and configuration and prevents secret sprawl.

      <br><br>

      For example, you could store a certificate and a key in a vault, then reference them from a certificate entity. This way, the certificate and key are not stored in the entity directly and are more secure.

      <br><br>

      Secrets rotation can be managed using [TTLs](https://docs.konghq.com/gateway/latest/kong-enterprise/secrets-management/advanced-usage/).

    name: Vaults
  - description: >
      A key object holds a representation of asymmetric keys in various formats. When Kong Gateway or a Kong plugin requires a specific public or private key to perform certain operations, it can use this entity.

    name: Keys
  - description: >
      A JSON Web key set. Key sets are the preferred way to expose keys to plugins because they tell the plugin where to look for keys or have a scoping mechanism to restrict plugins to specific keys.

    name: KeySets
  - name: API-keys
  - name: Basic-auth credentials
  - name: JWTs
  - name: HMAC-auth credentials
  - name: ACLs
externalDocs:
  description: Documentation for Kong Gateway and its APIs
  url: https://docs.konghq.com
