// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"errors"
	"fmt"
	"mockserver/internal/sdk/utils"
	"time"
)

// GetApplicationResponsePortal2 - Information about the portal the application is in.
type GetApplicationResponsePortal2 struct {
	// Contains a unique identifier used for this resource.
	ID string `json:"id"`
}

func (o *GetApplicationResponsePortal2) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

type GetApplicationResponseKeyAuthApplication struct {
	// Contains a unique identifier used for this resource.
	ID string `json:"id"`
	// An ISO-8601 timestamp representation of entity creation date.
	CreatedAt time.Time `json:"created_at"`
	// An ISO-8601 timestamp representation of entity update date.
	UpdatedAt time.Time `json:"updated_at"`
	// The name of the application.
	Name string `json:"name"`
	// A description of the application.
	Description *string `json:"description"`
	// KeyAuth Auth strategy that the application uses.
	AuthStrategy AuthStrategyKeyAuth `json:"auth_strategy"`
	// Information about the portal the application is in.
	Portal GetApplicationResponsePortal2 `json:"portal"`
	// The number of API registrations that are associated with the application. Registrations of any status are included in the count.
	RegistrationCount float64 `json:"registration_count"`
}

func (g GetApplicationResponseKeyAuthApplication) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetApplicationResponseKeyAuthApplication) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *GetApplicationResponseKeyAuthApplication) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetApplicationResponseKeyAuthApplication) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *GetApplicationResponseKeyAuthApplication) GetUpdatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.UpdatedAt
}

func (o *GetApplicationResponseKeyAuthApplication) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *GetApplicationResponseKeyAuthApplication) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *GetApplicationResponseKeyAuthApplication) GetAuthStrategy() AuthStrategyKeyAuth {
	if o == nil {
		return AuthStrategyKeyAuth{}
	}
	return o.AuthStrategy
}

func (o *GetApplicationResponseKeyAuthApplication) GetPortal() GetApplicationResponsePortal2 {
	if o == nil {
		return GetApplicationResponsePortal2{}
	}
	return o.Portal
}

func (o *GetApplicationResponseKeyAuthApplication) GetRegistrationCount() float64 {
	if o == nil {
		return 0.0
	}
	return o.RegistrationCount
}

// GetApplicationResponseDcrProvider - Information about the DCR provider this application uses, if using DCR.
type GetApplicationResponseDcrProvider struct {
	// Contains a unique identifier used for this resource.
	ID string `json:"id"`
}

func (o *GetApplicationResponseDcrProvider) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

// GetApplicationResponsePortal1 - Information about the portal the application is in.
type GetApplicationResponsePortal1 struct {
	// Contains a unique identifier used for this resource.
	ID string `json:"id"`
}

func (o *GetApplicationResponsePortal1) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

type GetApplicationResponseClientCredentialsApplication struct {
	// Contains a unique identifier used for this resource.
	ID string `json:"id"`
	// An ISO-8601 timestamp representation of entity creation date.
	CreatedAt time.Time `json:"created_at"`
	// An ISO-8601 timestamp representation of entity update date.
	UpdatedAt time.Time `json:"updated_at"`
	// The name of the application.
	Name string `json:"name"`
	// A description of the application.
	Description *string `json:"description"`
	// The ID used to linked the portal application to an Identity Provider application.
	ClientID string `json:"client_id"`
	// The number of API registrations that are associated with the application. Registrations of any status are included in the count.
	RegistrationCount float64 `json:"registration_count"`
	// Information about the DCR provider this application uses, if using DCR.
	DcrProvider *GetApplicationResponseDcrProvider `json:"dcr_provider"`
	// Information about the portal the application is in.
	Portal GetApplicationResponsePortal1 `json:"portal"`
	// Client Credential Auth strategy that the application uses.
	AuthStrategy AuthStrategyClientCredentials `json:"auth_strategy"`
	// List of granted scopes for the application. Null if application type does not support returning granted scopes.
	GrantedScopes []string `json:"granted_scopes"`
}

func (g GetApplicationResponseClientCredentialsApplication) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetApplicationResponseClientCredentialsApplication) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *GetApplicationResponseClientCredentialsApplication) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetApplicationResponseClientCredentialsApplication) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *GetApplicationResponseClientCredentialsApplication) GetUpdatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.UpdatedAt
}

func (o *GetApplicationResponseClientCredentialsApplication) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *GetApplicationResponseClientCredentialsApplication) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *GetApplicationResponseClientCredentialsApplication) GetClientID() string {
	if o == nil {
		return ""
	}
	return o.ClientID
}

func (o *GetApplicationResponseClientCredentialsApplication) GetRegistrationCount() float64 {
	if o == nil {
		return 0.0
	}
	return o.RegistrationCount
}

func (o *GetApplicationResponseClientCredentialsApplication) GetDcrProvider() *GetApplicationResponseDcrProvider {
	if o == nil {
		return nil
	}
	return o.DcrProvider
}

func (o *GetApplicationResponseClientCredentialsApplication) GetPortal() GetApplicationResponsePortal1 {
	if o == nil {
		return GetApplicationResponsePortal1{}
	}
	return o.Portal
}

func (o *GetApplicationResponseClientCredentialsApplication) GetAuthStrategy() AuthStrategyClientCredentials {
	if o == nil {
		return AuthStrategyClientCredentials{}
	}
	return o.AuthStrategy
}

func (o *GetApplicationResponseClientCredentialsApplication) GetGrantedScopes() []string {
	if o == nil {
		return nil
	}
	return o.GrantedScopes
}

type GetApplicationResponseType string

const (
	GetApplicationResponseTypeGetApplicationResponseClientCredentialsApplication GetApplicationResponseType = "GetApplicationResponse_Client Credentials Application"
	GetApplicationResponseTypeGetApplicationResponseKeyAuthApplication           GetApplicationResponseType = "GetApplicationResponse_Key Auth Application"
)

// GetApplicationResponse - Details about an application in a portal.
type GetApplicationResponse struct {
	GetApplicationResponseClientCredentialsApplication *GetApplicationResponseClientCredentialsApplication `queryParam:"inline"`
	GetApplicationResponseKeyAuthApplication           *GetApplicationResponseKeyAuthApplication           `queryParam:"inline"`

	Type GetApplicationResponseType
}

func CreateGetApplicationResponseGetApplicationResponseClientCredentialsApplication(getApplicationResponseClientCredentialsApplication GetApplicationResponseClientCredentialsApplication) GetApplicationResponse {
	typ := GetApplicationResponseTypeGetApplicationResponseClientCredentialsApplication

	return GetApplicationResponse{
		GetApplicationResponseClientCredentialsApplication: &getApplicationResponseClientCredentialsApplication,
		Type: typ,
	}
}

func CreateGetApplicationResponseGetApplicationResponseKeyAuthApplication(getApplicationResponseKeyAuthApplication GetApplicationResponseKeyAuthApplication) GetApplicationResponse {
	typ := GetApplicationResponseTypeGetApplicationResponseKeyAuthApplication

	return GetApplicationResponse{
		GetApplicationResponseKeyAuthApplication: &getApplicationResponseKeyAuthApplication,
		Type:                                     typ,
	}
}

func (u *GetApplicationResponse) UnmarshalJSON(data []byte) error {

	var getApplicationResponseKeyAuthApplication GetApplicationResponseKeyAuthApplication = GetApplicationResponseKeyAuthApplication{}
	if err := utils.UnmarshalJSON(data, &getApplicationResponseKeyAuthApplication, "", true, true); err == nil {
		u.GetApplicationResponseKeyAuthApplication = &getApplicationResponseKeyAuthApplication
		u.Type = GetApplicationResponseTypeGetApplicationResponseKeyAuthApplication
		return nil
	}

	var getApplicationResponseClientCredentialsApplication GetApplicationResponseClientCredentialsApplication = GetApplicationResponseClientCredentialsApplication{}
	if err := utils.UnmarshalJSON(data, &getApplicationResponseClientCredentialsApplication, "", true, true); err == nil {
		u.GetApplicationResponseClientCredentialsApplication = &getApplicationResponseClientCredentialsApplication
		u.Type = GetApplicationResponseTypeGetApplicationResponseClientCredentialsApplication
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetApplicationResponse", string(data))
}

func (u GetApplicationResponse) MarshalJSON() ([]byte, error) {
	if u.GetApplicationResponseClientCredentialsApplication != nil {
		return utils.MarshalJSON(u.GetApplicationResponseClientCredentialsApplication, "", true)
	}

	if u.GetApplicationResponseKeyAuthApplication != nil {
		return utils.MarshalJSON(u.GetApplicationResponseKeyAuthApplication, "", true)
	}

	return nil, errors.New("could not marshal union type GetApplicationResponse: all fields are null")
}
