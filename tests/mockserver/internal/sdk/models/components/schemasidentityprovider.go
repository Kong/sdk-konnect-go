// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"errors"
	"fmt"
	"mockserver/internal/sdk/utils"
	"time"
)

type SchemasIdentityProviderConfigType string

const (
	SchemasIdentityProviderConfigTypeSchemasOIDCIdentityProviderConfig SchemasIdentityProviderConfigType = "schemas-OIDCIdentityProviderConfig"
	SchemasIdentityProviderConfigTypeSchemasSAMLIdentityProviderConfig SchemasIdentityProviderConfigType = "schemas-SAMLIdentityProviderConfig"
)

type SchemasIdentityProviderConfig struct {
	SchemasOIDCIdentityProviderConfig *SchemasOIDCIdentityProviderConfig `queryParam:"inline"`
	SchemasSAMLIdentityProviderConfig *SchemasSAMLIdentityProviderConfig `queryParam:"inline"`

	Type SchemasIdentityProviderConfigType
}

func CreateSchemasIdentityProviderConfigSchemasOIDCIdentityProviderConfig(schemasOIDCIdentityProviderConfig SchemasOIDCIdentityProviderConfig) SchemasIdentityProviderConfig {
	typ := SchemasIdentityProviderConfigTypeSchemasOIDCIdentityProviderConfig

	return SchemasIdentityProviderConfig{
		SchemasOIDCIdentityProviderConfig: &schemasOIDCIdentityProviderConfig,
		Type:                              typ,
	}
}

func CreateSchemasIdentityProviderConfigSchemasSAMLIdentityProviderConfig(schemasSAMLIdentityProviderConfig SchemasSAMLIdentityProviderConfig) SchemasIdentityProviderConfig {
	typ := SchemasIdentityProviderConfigTypeSchemasSAMLIdentityProviderConfig

	return SchemasIdentityProviderConfig{
		SchemasSAMLIdentityProviderConfig: &schemasSAMLIdentityProviderConfig,
		Type:                              typ,
	}
}

func (u *SchemasIdentityProviderConfig) UnmarshalJSON(data []byte) error {

	var schemasOIDCIdentityProviderConfig SchemasOIDCIdentityProviderConfig = SchemasOIDCIdentityProviderConfig{}
	if err := utils.UnmarshalJSON(data, &schemasOIDCIdentityProviderConfig, "", true, true); err == nil {
		u.SchemasOIDCIdentityProviderConfig = &schemasOIDCIdentityProviderConfig
		u.Type = SchemasIdentityProviderConfigTypeSchemasOIDCIdentityProviderConfig
		return nil
	}

	var schemasSAMLIdentityProviderConfig SchemasSAMLIdentityProviderConfig = SchemasSAMLIdentityProviderConfig{}
	if err := utils.UnmarshalJSON(data, &schemasSAMLIdentityProviderConfig, "", true, true); err == nil {
		u.SchemasSAMLIdentityProviderConfig = &schemasSAMLIdentityProviderConfig
		u.Type = SchemasIdentityProviderConfigTypeSchemasSAMLIdentityProviderConfig
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for SchemasIdentityProviderConfig", string(data))
}

func (u SchemasIdentityProviderConfig) MarshalJSON() ([]byte, error) {
	if u.SchemasOIDCIdentityProviderConfig != nil {
		return utils.MarshalJSON(u.SchemasOIDCIdentityProviderConfig, "", true)
	}

	if u.SchemasSAMLIdentityProviderConfig != nil {
		return utils.MarshalJSON(u.SchemasSAMLIdentityProviderConfig, "", true)
	}

	return nil, errors.New("could not marshal union type SchemasIdentityProviderConfig: all fields are null")
}

// SchemasIdentityProvider - The identity provider that contains configuration data for authentication integration.
type SchemasIdentityProvider struct {
	// Contains a unique identifier used for this resource.
	ID *string `json:"id,omitempty"`
	// Specifies the type of identity provider.
	Type *IdentityProviderType `json:"type,omitempty"`
	// Indicates whether the identity provider is enabled.
	// Only one identity provider can be active at a time, such as SAML or OIDC.
	//
	Enabled *bool                          `default:"false" json:"enabled"`
	Config  *SchemasIdentityProviderConfig `json:"config,omitempty"`
	// An ISO-8601 timestamp representation of entity creation date.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// An ISO-8601 timestamp representation of entity update date.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

func (s SchemasIdentityProvider) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SchemasIdentityProvider) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SchemasIdentityProvider) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *SchemasIdentityProvider) GetType() *IdentityProviderType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *SchemasIdentityProvider) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

func (o *SchemasIdentityProvider) GetConfig() *SchemasIdentityProviderConfig {
	if o == nil {
		return nil
	}
	return o.Config
}

func (o *SchemasIdentityProvider) GetCreatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *SchemasIdentityProvider) GetUpdatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}
