// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"errors"
	"fmt"
	"mockserver/internal/sdk/utils"
)

type UpdateIdentityProviderConfigType string

const (
	UpdateIdentityProviderConfigTypeConfigureOIDCIdentityProviderConfig UpdateIdentityProviderConfigType = "ConfigureOIDCIdentityProviderConfig"
	UpdateIdentityProviderConfigTypeSAMLIdentityProviderConfigInput     UpdateIdentityProviderConfigType = "SAMLIdentityProviderConfig_input"
)

type UpdateIdentityProviderConfig struct {
	ConfigureOIDCIdentityProviderConfig *ConfigureOIDCIdentityProviderConfig `queryParam:"inline"`
	SAMLIdentityProviderConfigInput     *SAMLIdentityProviderConfigInput     `queryParam:"inline"`

	Type UpdateIdentityProviderConfigType
}

func CreateUpdateIdentityProviderConfigConfigureOIDCIdentityProviderConfig(configureOIDCIdentityProviderConfig ConfigureOIDCIdentityProviderConfig) UpdateIdentityProviderConfig {
	typ := UpdateIdentityProviderConfigTypeConfigureOIDCIdentityProviderConfig

	return UpdateIdentityProviderConfig{
		ConfigureOIDCIdentityProviderConfig: &configureOIDCIdentityProviderConfig,
		Type:                                typ,
	}
}

func CreateUpdateIdentityProviderConfigSAMLIdentityProviderConfigInput(samlIdentityProviderConfigInput SAMLIdentityProviderConfigInput) UpdateIdentityProviderConfig {
	typ := UpdateIdentityProviderConfigTypeSAMLIdentityProviderConfigInput

	return UpdateIdentityProviderConfig{
		SAMLIdentityProviderConfigInput: &samlIdentityProviderConfigInput,
		Type:                            typ,
	}
}

func (u *UpdateIdentityProviderConfig) UnmarshalJSON(data []byte) error {

	var samlIdentityProviderConfigInput SAMLIdentityProviderConfigInput = SAMLIdentityProviderConfigInput{}
	if err := utils.UnmarshalJSON(data, &samlIdentityProviderConfigInput, "", true, true); err == nil {
		u.SAMLIdentityProviderConfigInput = &samlIdentityProviderConfigInput
		u.Type = UpdateIdentityProviderConfigTypeSAMLIdentityProviderConfigInput
		return nil
	}

	var configureOIDCIdentityProviderConfig ConfigureOIDCIdentityProviderConfig = ConfigureOIDCIdentityProviderConfig{}
	if err := utils.UnmarshalJSON(data, &configureOIDCIdentityProviderConfig, "", true, true); err == nil {
		u.ConfigureOIDCIdentityProviderConfig = &configureOIDCIdentityProviderConfig
		u.Type = UpdateIdentityProviderConfigTypeConfigureOIDCIdentityProviderConfig
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UpdateIdentityProviderConfig", string(data))
}

func (u UpdateIdentityProviderConfig) MarshalJSON() ([]byte, error) {
	if u.ConfigureOIDCIdentityProviderConfig != nil {
		return utils.MarshalJSON(u.ConfigureOIDCIdentityProviderConfig, "", true)
	}

	if u.SAMLIdentityProviderConfigInput != nil {
		return utils.MarshalJSON(u.SAMLIdentityProviderConfigInput, "", true)
	}

	return nil, errors.New("could not marshal union type UpdateIdentityProviderConfig: all fields are null")
}

// UpdateIdentityProvider - The identity provider that contains configuration data for updating an authentication integration.
type UpdateIdentityProvider struct {
	// Indicates whether the identity provider is enabled.
	// Only one identity provider can be active at a time, such as SAML or OIDC.
	//
	Enabled *bool `default:"false" json:"enabled"`
	// The path used for initiating login requests with the identity provider.
	LoginPath *string                       `json:"login_path,omitempty"`
	Config    *UpdateIdentityProviderConfig `json:"config,omitempty"`
}

func (u UpdateIdentityProvider) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UpdateIdentityProvider) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *UpdateIdentityProvider) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

func (o *UpdateIdentityProvider) GetLoginPath() *string {
	if o == nil {
		return nil
	}
	return o.LoginPath
}

func (o *UpdateIdentityProvider) GetConfig() *UpdateIdentityProviderConfig {
	if o == nil {
		return nil
	}
	return o.Config
}
