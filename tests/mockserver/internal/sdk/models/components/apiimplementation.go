// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"errors"
	"fmt"
	"mockserver/internal/sdk/utils"
)

type APIImplementationType string

const (
	APIImplementationTypeServiceReferenceInput APIImplementationType = "Service Reference_input"
)

// APIImplementation - An entity that implements an API
type APIImplementation struct {
	ServiceReferenceInput *ServiceReferenceInput `queryParam:"inline"`

	Type APIImplementationType
}

func CreateAPIImplementationServiceReferenceInput(serviceReferenceInput ServiceReferenceInput) APIImplementation {
	typ := APIImplementationTypeServiceReferenceInput

	return APIImplementation{
		ServiceReferenceInput: &serviceReferenceInput,
		Type:                  typ,
	}
}

func (u *APIImplementation) UnmarshalJSON(data []byte) error {

	var serviceReferenceInput ServiceReferenceInput = ServiceReferenceInput{}
	if err := utils.UnmarshalJSON(data, &serviceReferenceInput, "", true, true); err == nil {
		u.ServiceReferenceInput = &serviceReferenceInput
		u.Type = APIImplementationTypeServiceReferenceInput
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for APIImplementation", string(data))
}

func (u APIImplementation) MarshalJSON() ([]byte, error) {
	if u.ServiceReferenceInput != nil {
		return utils.MarshalJSON(u.ServiceReferenceInput, "", true)
	}

	return nil, errors.New("could not marshal union type APIImplementation: all fields are null")
}
