// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

// InvalidParameterMinimumLengthRule - invalid parameters rules
type InvalidParameterMinimumLengthRule string

const (
	InvalidParameterMinimumLengthRuleMinLength    InvalidParameterMinimumLengthRule = "min_length"
	InvalidParameterMinimumLengthRuleMinDigits    InvalidParameterMinimumLengthRule = "min_digits"
	InvalidParameterMinimumLengthRuleMinLowercase InvalidParameterMinimumLengthRule = "min_lowercase"
	InvalidParameterMinimumLengthRuleMinUppercase InvalidParameterMinimumLengthRule = "min_uppercase"
	InvalidParameterMinimumLengthRuleMinSymbols   InvalidParameterMinimumLengthRule = "min_symbols"
	InvalidParameterMinimumLengthRuleMinItems     InvalidParameterMinimumLengthRule = "min_items"
	InvalidParameterMinimumLengthRuleMin          InvalidParameterMinimumLengthRule = "min"
)

func (e InvalidParameterMinimumLengthRule) ToPointer() *InvalidParameterMinimumLengthRule {
	return &e
}
func (e *InvalidParameterMinimumLengthRule) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "min_length":
		fallthrough
	case "min_digits":
		fallthrough
	case "min_lowercase":
		fallthrough
	case "min_uppercase":
		fallthrough
	case "min_symbols":
		fallthrough
	case "min_items":
		fallthrough
	case "min":
		*e = InvalidParameterMinimumLengthRule(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InvalidParameterMinimumLengthRule: %v", v)
	}
}

type InvalidParameterMinimumLength struct {
	Field string `json:"field"`
	// invalid parameters rules
	Rule    InvalidParameterMinimumLengthRule `json:"rule"`
	Minimum int64                             `json:"minimum"`
	Source  *string                           `json:"source,omitempty"`
	Reason  string                            `json:"reason"`
}

func (o *InvalidParameterMinimumLength) GetField() string {
	if o == nil {
		return ""
	}
	return o.Field
}

func (o *InvalidParameterMinimumLength) GetRule() InvalidParameterMinimumLengthRule {
	if o == nil {
		return InvalidParameterMinimumLengthRule("")
	}
	return o.Rule
}

func (o *InvalidParameterMinimumLength) GetMinimum() int64 {
	if o == nil {
		return 0
	}
	return o.Minimum
}

func (o *InvalidParameterMinimumLength) GetSource() *string {
	if o == nil {
		return nil
	}
	return o.Source
}

func (o *InvalidParameterMinimumLength) GetReason() string {
	if o == nil {
		return ""
	}
	return o.Reason
}
