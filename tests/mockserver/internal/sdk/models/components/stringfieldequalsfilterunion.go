// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"errors"
	"fmt"
	"mockserver/internal/sdk/utils"
)

type StringFieldEqualsFilter struct {
}

type StringFieldEqualsFilterUnion1Type string

const (
	StringFieldEqualsFilterUnion1TypeStringFieldEqualsFilter StringFieldEqualsFilterUnion1Type = "StringFieldEqualsFilter"
	StringFieldEqualsFilterUnion1TypeStr                     StringFieldEqualsFilterUnion1Type = "str"
)

type StringFieldEqualsFilterUnion1 struct {
	StringFieldEqualsFilter *StringFieldEqualsFilter `queryParam:"inline"`
	Str                     *string                  `queryParam:"inline"`

	Type StringFieldEqualsFilterUnion1Type
}

func CreateStringFieldEqualsFilterUnion1StringFieldEqualsFilter(stringFieldEqualsFilter StringFieldEqualsFilter) StringFieldEqualsFilterUnion1 {
	typ := StringFieldEqualsFilterUnion1TypeStringFieldEqualsFilter

	return StringFieldEqualsFilterUnion1{
		StringFieldEqualsFilter: &stringFieldEqualsFilter,
		Type:                    typ,
	}
}

func CreateStringFieldEqualsFilterUnion1Str(str string) StringFieldEqualsFilterUnion1 {
	typ := StringFieldEqualsFilterUnion1TypeStr

	return StringFieldEqualsFilterUnion1{
		Str:  &str,
		Type: typ,
	}
}

func (u *StringFieldEqualsFilterUnion1) UnmarshalJSON(data []byte) error {

	var stringFieldEqualsFilter StringFieldEqualsFilter = StringFieldEqualsFilter{}
	if err := utils.UnmarshalJSON(data, &stringFieldEqualsFilter, "", true, true); err == nil {
		u.StringFieldEqualsFilter = &stringFieldEqualsFilter
		u.Type = StringFieldEqualsFilterUnion1TypeStringFieldEqualsFilter
		return nil
	}

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = StringFieldEqualsFilterUnion1TypeStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for StringFieldEqualsFilterUnion1", string(data))
}

func (u StringFieldEqualsFilterUnion1) MarshalJSON() ([]byte, error) {
	if u.StringFieldEqualsFilter != nil {
		return utils.MarshalJSON(u.StringFieldEqualsFilter, "", true)
	}

	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	return nil, errors.New("could not marshal union type StringFieldEqualsFilterUnion1: all fields are null")
}

type StringFieldEqualsFilterUnionType string

const (
	StringFieldEqualsFilterUnionTypeStr                           StringFieldEqualsFilterUnionType = "str"
	StringFieldEqualsFilterUnionTypeStringFieldEqualsFilterUnion1 StringFieldEqualsFilterUnionType = "StringFieldEqualsFilter_union_1"
)

// StringFieldEqualsFilterUnion - Filters on the given string field value by exact match.
type StringFieldEqualsFilterUnion struct {
	Str                           *string                        `queryParam:"inline"`
	StringFieldEqualsFilterUnion1 *StringFieldEqualsFilterUnion1 `queryParam:"inline"`

	Type StringFieldEqualsFilterUnionType
}

func CreateStringFieldEqualsFilterUnionStr(str string) StringFieldEqualsFilterUnion {
	typ := StringFieldEqualsFilterUnionTypeStr

	return StringFieldEqualsFilterUnion{
		Str:  &str,
		Type: typ,
	}
}

func CreateStringFieldEqualsFilterUnionStringFieldEqualsFilterUnion1(stringFieldEqualsFilterUnion1 StringFieldEqualsFilterUnion1) StringFieldEqualsFilterUnion {
	typ := StringFieldEqualsFilterUnionTypeStringFieldEqualsFilterUnion1

	return StringFieldEqualsFilterUnion{
		StringFieldEqualsFilterUnion1: &stringFieldEqualsFilterUnion1,
		Type:                          typ,
	}
}

func (u *StringFieldEqualsFilterUnion) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = StringFieldEqualsFilterUnionTypeStr
		return nil
	}

	var stringFieldEqualsFilterUnion1 StringFieldEqualsFilterUnion1 = StringFieldEqualsFilterUnion1{}
	if err := utils.UnmarshalJSON(data, &stringFieldEqualsFilterUnion1, "", true, true); err == nil {
		u.StringFieldEqualsFilterUnion1 = &stringFieldEqualsFilterUnion1
		u.Type = StringFieldEqualsFilterUnionTypeStringFieldEqualsFilterUnion1
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for StringFieldEqualsFilterUnion", string(data))
}

func (u StringFieldEqualsFilterUnion) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.StringFieldEqualsFilterUnion1 != nil {
		return utils.MarshalJSON(u.StringFieldEqualsFilterUnion1, "", true)
	}

	return nil, errors.New("could not marshal union type StringFieldEqualsFilterUnion: all fields are null")
}
