// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"errors"
	"fmt"
	"mockserver/internal/sdk/utils"
	"time"
)

// CreateDcrProviderResponseDcrProviderHTTPDcrConfig - The DCR configuration for this DCR provider.
type CreateDcrProviderResponseDcrProviderHTTPDcrConfig struct {
}

// CreateDCRProviderResponseDCRProviderHTTP - A DCR provider for HTTP -- only properties not included in DcrProviderBase
type CreateDCRProviderResponseDCRProviderHTTP struct {
	// The type of DCR provider. Can be one of the following - auth0, azureAd, curity, okta, http
	ProviderType string `json:"provider_type"`
	// The DCR configuration for this DCR provider.
	DcrConfig CreateDcrProviderResponseDcrProviderHTTPDcrConfig `json:"dcr_config"`
	// Contains a unique identifier used by the API for this resource.
	ID string `json:"id"`
	// The name of the DCR provider. This is used to identify the DCR provider in the Konnect UI.
	//
	Name string `json:"name"`
	// The display name of the DCR provider. This is used to identify the DCR provider in the Portal UI.
	//
	DisplayName *string `json:"display_name,omitempty"`
	// The issuer of the DCR provider.
	Issuer string `json:"issuer"`
	// At least one active auth strategy is using this DCR provider.
	Active bool `json:"active"`
	// Labels store metadata of an entity that can be used for filtering an entity list or for searching across entity types.
	//
	// Keys must be of length 1-63 characters, and cannot start with "kong", "konnect", "mesh", "kic", or "_".
	//
	Labels map[string]string `json:"labels,omitempty"`
	// An ISO-8601 timestamp representation of entity creation date.
	CreatedAt time.Time `json:"created_at"`
	// An ISO-8601 timestamp representation of entity update date.
	UpdatedAt time.Time `json:"updated_at"`
}

func (c CreateDCRProviderResponseDCRProviderHTTP) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateDCRProviderResponseDCRProviderHTTP) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CreateDCRProviderResponseDCRProviderHTTP) GetProviderType() string {
	if o == nil {
		return ""
	}
	return o.ProviderType
}

func (o *CreateDCRProviderResponseDCRProviderHTTP) GetDcrConfig() CreateDcrProviderResponseDcrProviderHTTPDcrConfig {
	if o == nil {
		return CreateDcrProviderResponseDcrProviderHTTPDcrConfig{}
	}
	return o.DcrConfig
}

func (o *CreateDCRProviderResponseDCRProviderHTTP) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CreateDCRProviderResponseDCRProviderHTTP) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CreateDCRProviderResponseDCRProviderHTTP) GetDisplayName() *string {
	if o == nil {
		return nil
	}
	return o.DisplayName
}

func (o *CreateDCRProviderResponseDCRProviderHTTP) GetIssuer() string {
	if o == nil {
		return ""
	}
	return o.Issuer
}

func (o *CreateDCRProviderResponseDCRProviderHTTP) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *CreateDCRProviderResponseDCRProviderHTTP) GetLabels() map[string]string {
	if o == nil {
		return nil
	}
	return o.Labels
}

func (o *CreateDCRProviderResponseDCRProviderHTTP) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *CreateDCRProviderResponseDCRProviderHTTP) GetUpdatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.UpdatedAt
}

// CreateDcrProviderResponseDcrProviderOktaDcrConfig - The DCR configuration for this DCR provider.
type CreateDcrProviderResponseDcrProviderOktaDcrConfig struct {
}

// CreateDCRProviderResponseDCRProviderOKTA - A DCR provider for Okta -- only properties not included in DcrProviderBase
type CreateDCRProviderResponseDCRProviderOKTA struct {
	// The type of DCR provider. Can be one of the following - auth0, azureAd, curity, okta, http
	ProviderType string `json:"provider_type"`
	// The DCR configuration for this DCR provider.
	DcrConfig CreateDcrProviderResponseDcrProviderOktaDcrConfig `json:"dcr_config"`
	// Contains a unique identifier used by the API for this resource.
	ID string `json:"id"`
	// The name of the DCR provider. This is used to identify the DCR provider in the Konnect UI.
	//
	Name string `json:"name"`
	// The display name of the DCR provider. This is used to identify the DCR provider in the Portal UI.
	//
	DisplayName *string `json:"display_name,omitempty"`
	// The issuer of the DCR provider.
	Issuer string `json:"issuer"`
	// At least one active auth strategy is using this DCR provider.
	Active bool `json:"active"`
	// Labels store metadata of an entity that can be used for filtering an entity list or for searching across entity types.
	//
	// Keys must be of length 1-63 characters, and cannot start with "kong", "konnect", "mesh", "kic", or "_".
	//
	Labels map[string]string `json:"labels,omitempty"`
	// An ISO-8601 timestamp representation of entity creation date.
	CreatedAt time.Time `json:"created_at"`
	// An ISO-8601 timestamp representation of entity update date.
	UpdatedAt time.Time `json:"updated_at"`
}

func (c CreateDCRProviderResponseDCRProviderOKTA) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateDCRProviderResponseDCRProviderOKTA) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CreateDCRProviderResponseDCRProviderOKTA) GetProviderType() string {
	if o == nil {
		return ""
	}
	return o.ProviderType
}

func (o *CreateDCRProviderResponseDCRProviderOKTA) GetDcrConfig() CreateDcrProviderResponseDcrProviderOktaDcrConfig {
	if o == nil {
		return CreateDcrProviderResponseDcrProviderOktaDcrConfig{}
	}
	return o.DcrConfig
}

func (o *CreateDCRProviderResponseDCRProviderOKTA) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CreateDCRProviderResponseDCRProviderOKTA) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CreateDCRProviderResponseDCRProviderOKTA) GetDisplayName() *string {
	if o == nil {
		return nil
	}
	return o.DisplayName
}

func (o *CreateDCRProviderResponseDCRProviderOKTA) GetIssuer() string {
	if o == nil {
		return ""
	}
	return o.Issuer
}

func (o *CreateDCRProviderResponseDCRProviderOKTA) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *CreateDCRProviderResponseDCRProviderOKTA) GetLabels() map[string]string {
	if o == nil {
		return nil
	}
	return o.Labels
}

func (o *CreateDCRProviderResponseDCRProviderOKTA) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *CreateDCRProviderResponseDCRProviderOKTA) GetUpdatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.UpdatedAt
}

// CreateDcrProviderResponseDcrProviderCurityDcrConfig - The DCR configuration for this DCR provider.
type CreateDcrProviderResponseDcrProviderCurityDcrConfig struct {
}

// CreateDCRProviderResponseDCRProviderCurity - A DCR provider for Curity -- only properties not included in DcrProviderBase
type CreateDCRProviderResponseDCRProviderCurity struct {
	// The type of DCR provider. Can be one of the following - auth0, azureAd, curity, okta, http
	ProviderType string `json:"provider_type"`
	// The DCR configuration for this DCR provider.
	DcrConfig CreateDcrProviderResponseDcrProviderCurityDcrConfig `json:"dcr_config"`
	// Contains a unique identifier used by the API for this resource.
	ID string `json:"id"`
	// The name of the DCR provider. This is used to identify the DCR provider in the Konnect UI.
	//
	Name string `json:"name"`
	// The display name of the DCR provider. This is used to identify the DCR provider in the Portal UI.
	//
	DisplayName *string `json:"display_name,omitempty"`
	// The issuer of the DCR provider.
	Issuer string `json:"issuer"`
	// At least one active auth strategy is using this DCR provider.
	Active bool `json:"active"`
	// Labels store metadata of an entity that can be used for filtering an entity list or for searching across entity types.
	//
	// Keys must be of length 1-63 characters, and cannot start with "kong", "konnect", "mesh", "kic", or "_".
	//
	Labels map[string]string `json:"labels,omitempty"`
	// An ISO-8601 timestamp representation of entity creation date.
	CreatedAt time.Time `json:"created_at"`
	// An ISO-8601 timestamp representation of entity update date.
	UpdatedAt time.Time `json:"updated_at"`
}

func (c CreateDCRProviderResponseDCRProviderCurity) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateDCRProviderResponseDCRProviderCurity) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CreateDCRProviderResponseDCRProviderCurity) GetProviderType() string {
	if o == nil {
		return ""
	}
	return o.ProviderType
}

func (o *CreateDCRProviderResponseDCRProviderCurity) GetDcrConfig() CreateDcrProviderResponseDcrProviderCurityDcrConfig {
	if o == nil {
		return CreateDcrProviderResponseDcrProviderCurityDcrConfig{}
	}
	return o.DcrConfig
}

func (o *CreateDCRProviderResponseDCRProviderCurity) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CreateDCRProviderResponseDCRProviderCurity) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CreateDCRProviderResponseDCRProviderCurity) GetDisplayName() *string {
	if o == nil {
		return nil
	}
	return o.DisplayName
}

func (o *CreateDCRProviderResponseDCRProviderCurity) GetIssuer() string {
	if o == nil {
		return ""
	}
	return o.Issuer
}

func (o *CreateDCRProviderResponseDCRProviderCurity) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *CreateDCRProviderResponseDCRProviderCurity) GetLabels() map[string]string {
	if o == nil {
		return nil
	}
	return o.Labels
}

func (o *CreateDCRProviderResponseDCRProviderCurity) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *CreateDCRProviderResponseDCRProviderCurity) GetUpdatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.UpdatedAt
}

// CreateDcrProviderResponseDcrProviderAzureAdDcrConfig - The DCR configuration for this DCR provider.
type CreateDcrProviderResponseDcrProviderAzureAdDcrConfig struct {
}

// CreateDCRProviderResponseDCRProviderAzureAD - A DCR provider for Azure AD -- only properties not included in DcrProviderBase
type CreateDCRProviderResponseDCRProviderAzureAD struct {
	// The type of DCR provider. Can be one of the following - auth0, azureAd, curity, okta, http
	ProviderType string `json:"provider_type"`
	// The DCR configuration for this DCR provider.
	DcrConfig CreateDcrProviderResponseDcrProviderAzureAdDcrConfig `json:"dcr_config"`
	// Contains a unique identifier used by the API for this resource.
	ID string `json:"id"`
	// The name of the DCR provider. This is used to identify the DCR provider in the Konnect UI.
	//
	Name string `json:"name"`
	// The display name of the DCR provider. This is used to identify the DCR provider in the Portal UI.
	//
	DisplayName *string `json:"display_name,omitempty"`
	// The issuer of the DCR provider.
	Issuer string `json:"issuer"`
	// At least one active auth strategy is using this DCR provider.
	Active bool `json:"active"`
	// Labels store metadata of an entity that can be used for filtering an entity list or for searching across entity types.
	//
	// Keys must be of length 1-63 characters, and cannot start with "kong", "konnect", "mesh", "kic", or "_".
	//
	Labels map[string]string `json:"labels,omitempty"`
	// An ISO-8601 timestamp representation of entity creation date.
	CreatedAt time.Time `json:"created_at"`
	// An ISO-8601 timestamp representation of entity update date.
	UpdatedAt time.Time `json:"updated_at"`
}

func (c CreateDCRProviderResponseDCRProviderAzureAD) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateDCRProviderResponseDCRProviderAzureAD) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CreateDCRProviderResponseDCRProviderAzureAD) GetProviderType() string {
	if o == nil {
		return ""
	}
	return o.ProviderType
}

func (o *CreateDCRProviderResponseDCRProviderAzureAD) GetDcrConfig() CreateDcrProviderResponseDcrProviderAzureAdDcrConfig {
	if o == nil {
		return CreateDcrProviderResponseDcrProviderAzureAdDcrConfig{}
	}
	return o.DcrConfig
}

func (o *CreateDCRProviderResponseDCRProviderAzureAD) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CreateDCRProviderResponseDCRProviderAzureAD) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CreateDCRProviderResponseDCRProviderAzureAD) GetDisplayName() *string {
	if o == nil {
		return nil
	}
	return o.DisplayName
}

func (o *CreateDCRProviderResponseDCRProviderAzureAD) GetIssuer() string {
	if o == nil {
		return ""
	}
	return o.Issuer
}

func (o *CreateDCRProviderResponseDCRProviderAzureAD) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *CreateDCRProviderResponseDCRProviderAzureAD) GetLabels() map[string]string {
	if o == nil {
		return nil
	}
	return o.Labels
}

func (o *CreateDCRProviderResponseDCRProviderAzureAD) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *CreateDCRProviderResponseDCRProviderAzureAD) GetUpdatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.UpdatedAt
}

// CreateDcrProviderResponseDcrProviderAuth0DcrConfig - The DCR configuration for this DCR provider.
type CreateDcrProviderResponseDcrProviderAuth0DcrConfig struct {
}

// CreateDCRProviderResponseDCRProviderAuth0 - A DCR provider for Auth0 -- only properties not included in DcrProviderBase
type CreateDCRProviderResponseDCRProviderAuth0 struct {
	// The type of DCR provider. Can be one of the following - auth0, azureAd, curity, okta, http
	ProviderType string `json:"provider_type"`
	// The DCR configuration for this DCR provider.
	DcrConfig CreateDcrProviderResponseDcrProviderAuth0DcrConfig `json:"dcr_config"`
	// Contains a unique identifier used by the API for this resource.
	ID string `json:"id"`
	// The name of the DCR provider. This is used to identify the DCR provider in the Konnect UI.
	//
	Name string `json:"name"`
	// The display name of the DCR provider. This is used to identify the DCR provider in the Portal UI.
	//
	DisplayName *string `json:"display_name,omitempty"`
	// The issuer of the DCR provider.
	Issuer string `json:"issuer"`
	// At least one active auth strategy is using this DCR provider.
	Active bool `json:"active"`
	// Labels store metadata of an entity that can be used for filtering an entity list or for searching across entity types.
	//
	// Keys must be of length 1-63 characters, and cannot start with "kong", "konnect", "mesh", "kic", or "_".
	//
	Labels map[string]string `json:"labels,omitempty"`
	// An ISO-8601 timestamp representation of entity creation date.
	CreatedAt time.Time `json:"created_at"`
	// An ISO-8601 timestamp representation of entity update date.
	UpdatedAt time.Time `json:"updated_at"`
}

func (c CreateDCRProviderResponseDCRProviderAuth0) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateDCRProviderResponseDCRProviderAuth0) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CreateDCRProviderResponseDCRProviderAuth0) GetProviderType() string {
	if o == nil {
		return ""
	}
	return o.ProviderType
}

func (o *CreateDCRProviderResponseDCRProviderAuth0) GetDcrConfig() CreateDcrProviderResponseDcrProviderAuth0DcrConfig {
	if o == nil {
		return CreateDcrProviderResponseDcrProviderAuth0DcrConfig{}
	}
	return o.DcrConfig
}

func (o *CreateDCRProviderResponseDCRProviderAuth0) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CreateDCRProviderResponseDCRProviderAuth0) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CreateDCRProviderResponseDCRProviderAuth0) GetDisplayName() *string {
	if o == nil {
		return nil
	}
	return o.DisplayName
}

func (o *CreateDCRProviderResponseDCRProviderAuth0) GetIssuer() string {
	if o == nil {
		return ""
	}
	return o.Issuer
}

func (o *CreateDCRProviderResponseDCRProviderAuth0) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *CreateDCRProviderResponseDCRProviderAuth0) GetLabels() map[string]string {
	if o == nil {
		return nil
	}
	return o.Labels
}

func (o *CreateDCRProviderResponseDCRProviderAuth0) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *CreateDCRProviderResponseDCRProviderAuth0) GetUpdatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.UpdatedAt
}

type CreateDcrProviderResponseType string

const (
	CreateDcrProviderResponseTypeDcrProviderAuth0   CreateDcrProviderResponseType = "DcrProviderAuth0"
	CreateDcrProviderResponseTypeDcrProviderAzureAd CreateDcrProviderResponseType = "DcrProviderAzureAd"
	CreateDcrProviderResponseTypeDcrProviderCurity  CreateDcrProviderResponseType = "DcrProviderCurity"
	CreateDcrProviderResponseTypeDcrProviderOkta    CreateDcrProviderResponseType = "DcrProviderOkta"
	CreateDcrProviderResponseTypeDcrProviderHTTP    CreateDcrProviderResponseType = "DcrProviderHttp"
)

// CreateDcrProviderResponse - A response containing the newly created DCR provider object.
type CreateDcrProviderResponse struct {
	CreateDCRProviderResponseDCRProviderAuth0   *CreateDCRProviderResponseDCRProviderAuth0   `queryParam:"inline"`
	CreateDCRProviderResponseDCRProviderAzureAD *CreateDCRProviderResponseDCRProviderAzureAD `queryParam:"inline"`
	CreateDCRProviderResponseDCRProviderCurity  *CreateDCRProviderResponseDCRProviderCurity  `queryParam:"inline"`
	CreateDCRProviderResponseDCRProviderOKTA    *CreateDCRProviderResponseDCRProviderOKTA    `queryParam:"inline"`
	CreateDCRProviderResponseDCRProviderHTTP    *CreateDCRProviderResponseDCRProviderHTTP    `queryParam:"inline"`

	Type CreateDcrProviderResponseType
}

func CreateCreateDcrProviderResponseDcrProviderAuth0(dcrProviderAuth0 CreateDCRProviderResponseDCRProviderAuth0) CreateDcrProviderResponse {
	typ := CreateDcrProviderResponseTypeDcrProviderAuth0

	typStr := string(typ)
	dcrProviderAuth0.ProviderType = typStr

	return CreateDcrProviderResponse{
		CreateDCRProviderResponseDCRProviderAuth0: &dcrProviderAuth0,
		Type: typ,
	}
}

func CreateCreateDcrProviderResponseDcrProviderAzureAd(dcrProviderAzureAd CreateDCRProviderResponseDCRProviderAzureAD) CreateDcrProviderResponse {
	typ := CreateDcrProviderResponseTypeDcrProviderAzureAd

	typStr := string(typ)
	dcrProviderAzureAd.ProviderType = typStr

	return CreateDcrProviderResponse{
		CreateDCRProviderResponseDCRProviderAzureAD: &dcrProviderAzureAd,
		Type: typ,
	}
}

func CreateCreateDcrProviderResponseDcrProviderCurity(dcrProviderCurity CreateDCRProviderResponseDCRProviderCurity) CreateDcrProviderResponse {
	typ := CreateDcrProviderResponseTypeDcrProviderCurity

	typStr := string(typ)
	dcrProviderCurity.ProviderType = typStr

	return CreateDcrProviderResponse{
		CreateDCRProviderResponseDCRProviderCurity: &dcrProviderCurity,
		Type: typ,
	}
}

func CreateCreateDcrProviderResponseDcrProviderOkta(dcrProviderOkta CreateDCRProviderResponseDCRProviderOKTA) CreateDcrProviderResponse {
	typ := CreateDcrProviderResponseTypeDcrProviderOkta

	typStr := string(typ)
	dcrProviderOkta.ProviderType = typStr

	return CreateDcrProviderResponse{
		CreateDCRProviderResponseDCRProviderOKTA: &dcrProviderOkta,
		Type:                                     typ,
	}
}

func CreateCreateDcrProviderResponseDcrProviderHTTP(dcrProviderHTTP CreateDCRProviderResponseDCRProviderHTTP) CreateDcrProviderResponse {
	typ := CreateDcrProviderResponseTypeDcrProviderHTTP

	typStr := string(typ)
	dcrProviderHTTP.ProviderType = typStr

	return CreateDcrProviderResponse{
		CreateDCRProviderResponseDCRProviderHTTP: &dcrProviderHTTP,
		Type:                                     typ,
	}
}

func (u *CreateDcrProviderResponse) UnmarshalJSON(data []byte) error {

	type discriminator struct {
		ProviderType string `json:"provider_type"`
	}

	dis := new(discriminator)
	if err := json.Unmarshal(data, &dis); err != nil {
		return fmt.Errorf("could not unmarshal discriminator: %w", err)
	}

	switch dis.ProviderType {
	case "DcrProviderAuth0":
		createDCRProviderResponseDCRProviderAuth0 := new(CreateDCRProviderResponseDCRProviderAuth0)
		if err := utils.UnmarshalJSON(data, &createDCRProviderResponseDCRProviderAuth0, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (ProviderType == DcrProviderAuth0) type CreateDCRProviderResponseDCRProviderAuth0 within CreateDcrProviderResponse: %w", string(data), err)
		}

		u.CreateDCRProviderResponseDCRProviderAuth0 = createDCRProviderResponseDCRProviderAuth0
		u.Type = CreateDcrProviderResponseTypeDcrProviderAuth0
		return nil
	case "DcrProviderAzureAd":
		createDCRProviderResponseDCRProviderAzureAD := new(CreateDCRProviderResponseDCRProviderAzureAD)
		if err := utils.UnmarshalJSON(data, &createDCRProviderResponseDCRProviderAzureAD, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (ProviderType == DcrProviderAzureAd) type CreateDCRProviderResponseDCRProviderAzureAD within CreateDcrProviderResponse: %w", string(data), err)
		}

		u.CreateDCRProviderResponseDCRProviderAzureAD = createDCRProviderResponseDCRProviderAzureAD
		u.Type = CreateDcrProviderResponseTypeDcrProviderAzureAd
		return nil
	case "DcrProviderCurity":
		createDCRProviderResponseDCRProviderCurity := new(CreateDCRProviderResponseDCRProviderCurity)
		if err := utils.UnmarshalJSON(data, &createDCRProviderResponseDCRProviderCurity, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (ProviderType == DcrProviderCurity) type CreateDCRProviderResponseDCRProviderCurity within CreateDcrProviderResponse: %w", string(data), err)
		}

		u.CreateDCRProviderResponseDCRProviderCurity = createDCRProviderResponseDCRProviderCurity
		u.Type = CreateDcrProviderResponseTypeDcrProviderCurity
		return nil
	case "DcrProviderOkta":
		createDCRProviderResponseDCRProviderOKTA := new(CreateDCRProviderResponseDCRProviderOKTA)
		if err := utils.UnmarshalJSON(data, &createDCRProviderResponseDCRProviderOKTA, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (ProviderType == DcrProviderOkta) type CreateDCRProviderResponseDCRProviderOKTA within CreateDcrProviderResponse: %w", string(data), err)
		}

		u.CreateDCRProviderResponseDCRProviderOKTA = createDCRProviderResponseDCRProviderOKTA
		u.Type = CreateDcrProviderResponseTypeDcrProviderOkta
		return nil
	case "DcrProviderHttp":
		createDCRProviderResponseDCRProviderHTTP := new(CreateDCRProviderResponseDCRProviderHTTP)
		if err := utils.UnmarshalJSON(data, &createDCRProviderResponseDCRProviderHTTP, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (ProviderType == DcrProviderHttp) type CreateDCRProviderResponseDCRProviderHTTP within CreateDcrProviderResponse: %w", string(data), err)
		}

		u.CreateDCRProviderResponseDCRProviderHTTP = createDCRProviderResponseDCRProviderHTTP
		u.Type = CreateDcrProviderResponseTypeDcrProviderHTTP
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CreateDcrProviderResponse", string(data))
}

func (u CreateDcrProviderResponse) MarshalJSON() ([]byte, error) {
	if u.CreateDCRProviderResponseDCRProviderAuth0 != nil {
		return utils.MarshalJSON(u.CreateDCRProviderResponseDCRProviderAuth0, "", true)
	}

	if u.CreateDCRProviderResponseDCRProviderAzureAD != nil {
		return utils.MarshalJSON(u.CreateDCRProviderResponseDCRProviderAzureAD, "", true)
	}

	if u.CreateDCRProviderResponseDCRProviderCurity != nil {
		return utils.MarshalJSON(u.CreateDCRProviderResponseDCRProviderCurity, "", true)
	}

	if u.CreateDCRProviderResponseDCRProviderOKTA != nil {
		return utils.MarshalJSON(u.CreateDCRProviderResponseDCRProviderOKTA, "", true)
	}

	if u.CreateDCRProviderResponseDCRProviderHTTP != nil {
		return utils.MarshalJSON(u.CreateDCRProviderResponseDCRProviderHTTP, "", true)
	}

	return nil, errors.New("could not marshal union type CreateDcrProviderResponse: all fields are null")
}
