// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"errors"
	"fmt"
	"mockserver/internal/sdk/utils"
	"time"
)

// ApplicationPortal2 - Information about the portal the application is in.
type ApplicationPortal2 struct {
	// Contains a unique identifier used for this resource.
	ID string `json:"id"`
}

func (o *ApplicationPortal2) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

type ApplicationKeyAuthApplication struct {
	// Contains a unique identifier used for this resource.
	ID string `json:"id"`
	// An ISO-8601 timestamp representation of entity creation date.
	CreatedAt time.Time `json:"created_at"`
	// An ISO-8601 timestamp representation of entity update date.
	UpdatedAt time.Time `json:"updated_at"`
	// The name of the application.
	Name string `json:"name"`
	// A description of the application.
	Description *string `json:"description"`
	// KeyAuth Auth strategy that the application uses.
	AuthStrategy AuthStrategyKeyAuth `json:"auth_strategy"`
	// Information about the portal the application is in.
	Portal ApplicationPortal2 `json:"portal"`
	// The number of API registrations that are associated with the application. Registrations of any status are included in the count.
	RegistrationCount float64 `json:"registration_count"`
}

func (a ApplicationKeyAuthApplication) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *ApplicationKeyAuthApplication) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *ApplicationKeyAuthApplication) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ApplicationKeyAuthApplication) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *ApplicationKeyAuthApplication) GetUpdatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.UpdatedAt
}

func (o *ApplicationKeyAuthApplication) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ApplicationKeyAuthApplication) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *ApplicationKeyAuthApplication) GetAuthStrategy() AuthStrategyKeyAuth {
	if o == nil {
		return AuthStrategyKeyAuth{}
	}
	return o.AuthStrategy
}

func (o *ApplicationKeyAuthApplication) GetPortal() ApplicationPortal2 {
	if o == nil {
		return ApplicationPortal2{}
	}
	return o.Portal
}

func (o *ApplicationKeyAuthApplication) GetRegistrationCount() float64 {
	if o == nil {
		return 0.0
	}
	return o.RegistrationCount
}

// ApplicationDcrProvider - Information about the DCR provider this application uses, if using DCR.
type ApplicationDcrProvider struct {
	// Contains a unique identifier used for this resource.
	ID string `json:"id"`
}

func (o *ApplicationDcrProvider) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

// ApplicationPortal1 - Information about the portal the application is in.
type ApplicationPortal1 struct {
	// Contains a unique identifier used for this resource.
	ID string `json:"id"`
}

func (o *ApplicationPortal1) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

type ApplicationClientCredentialsApplication struct {
	// Contains a unique identifier used for this resource.
	ID string `json:"id"`
	// An ISO-8601 timestamp representation of entity creation date.
	CreatedAt time.Time `json:"created_at"`
	// An ISO-8601 timestamp representation of entity update date.
	UpdatedAt time.Time `json:"updated_at"`
	// The name of the application.
	Name string `json:"name"`
	// A description of the application.
	Description *string `json:"description"`
	// The ID used to linked the portal application to an Identity Provider application.
	ClientID string `json:"client_id"`
	// The number of API registrations that are associated with the application. Registrations of any status are included in the count.
	RegistrationCount float64 `json:"registration_count"`
	// Information about the DCR provider this application uses, if using DCR.
	DcrProvider *ApplicationDcrProvider `json:"dcr_provider"`
	// Information about the portal the application is in.
	Portal ApplicationPortal1 `json:"portal"`
	// Client Credential Auth strategy that the application uses.
	AuthStrategy AuthStrategyClientCredentials `json:"auth_strategy"`
	// List of granted scopes for the application. Null if application type does not support returning granted scopes.
	GrantedScopes []string `json:"granted_scopes"`
}

func (a ApplicationClientCredentialsApplication) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *ApplicationClientCredentialsApplication) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *ApplicationClientCredentialsApplication) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ApplicationClientCredentialsApplication) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *ApplicationClientCredentialsApplication) GetUpdatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.UpdatedAt
}

func (o *ApplicationClientCredentialsApplication) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ApplicationClientCredentialsApplication) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *ApplicationClientCredentialsApplication) GetClientID() string {
	if o == nil {
		return ""
	}
	return o.ClientID
}

func (o *ApplicationClientCredentialsApplication) GetRegistrationCount() float64 {
	if o == nil {
		return 0.0
	}
	return o.RegistrationCount
}

func (o *ApplicationClientCredentialsApplication) GetDcrProvider() *ApplicationDcrProvider {
	if o == nil {
		return nil
	}
	return o.DcrProvider
}

func (o *ApplicationClientCredentialsApplication) GetPortal() ApplicationPortal1 {
	if o == nil {
		return ApplicationPortal1{}
	}
	return o.Portal
}

func (o *ApplicationClientCredentialsApplication) GetAuthStrategy() AuthStrategyClientCredentials {
	if o == nil {
		return AuthStrategyClientCredentials{}
	}
	return o.AuthStrategy
}

func (o *ApplicationClientCredentialsApplication) GetGrantedScopes() []string {
	if o == nil {
		return nil
	}
	return o.GrantedScopes
}

type ApplicationType string

const (
	ApplicationTypeApplicationClientCredentialsApplication ApplicationType = "Application_Client Credentials Application"
	ApplicationTypeApplicationKeyAuthApplication           ApplicationType = "Application_Key Auth Application"
)

type Application struct {
	ApplicationClientCredentialsApplication *ApplicationClientCredentialsApplication `queryParam:"inline"`
	ApplicationKeyAuthApplication           *ApplicationKeyAuthApplication           `queryParam:"inline"`

	Type ApplicationType
}

func CreateApplicationApplicationClientCredentialsApplication(applicationClientCredentialsApplication ApplicationClientCredentialsApplication) Application {
	typ := ApplicationTypeApplicationClientCredentialsApplication

	return Application{
		ApplicationClientCredentialsApplication: &applicationClientCredentialsApplication,
		Type:                                    typ,
	}
}

func CreateApplicationApplicationKeyAuthApplication(applicationKeyAuthApplication ApplicationKeyAuthApplication) Application {
	typ := ApplicationTypeApplicationKeyAuthApplication

	return Application{
		ApplicationKeyAuthApplication: &applicationKeyAuthApplication,
		Type:                          typ,
	}
}

func (u *Application) UnmarshalJSON(data []byte) error {

	var applicationKeyAuthApplication ApplicationKeyAuthApplication = ApplicationKeyAuthApplication{}
	if err := utils.UnmarshalJSON(data, &applicationKeyAuthApplication, "", true, true); err == nil {
		u.ApplicationKeyAuthApplication = &applicationKeyAuthApplication
		u.Type = ApplicationTypeApplicationKeyAuthApplication
		return nil
	}

	var applicationClientCredentialsApplication ApplicationClientCredentialsApplication = ApplicationClientCredentialsApplication{}
	if err := utils.UnmarshalJSON(data, &applicationClientCredentialsApplication, "", true, true); err == nil {
		u.ApplicationClientCredentialsApplication = &applicationClientCredentialsApplication
		u.Type = ApplicationTypeApplicationClientCredentialsApplication
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for Application", string(data))
}

func (u Application) MarshalJSON() ([]byte, error) {
	if u.ApplicationClientCredentialsApplication != nil {
		return utils.MarshalJSON(u.ApplicationClientCredentialsApplication, "", true)
	}

	if u.ApplicationKeyAuthApplication != nil {
		return utils.MarshalJSON(u.ApplicationKeyAuthApplication, "", true)
	}

	return nil, errors.New("could not marshal union type Application: all fields are null")
}
