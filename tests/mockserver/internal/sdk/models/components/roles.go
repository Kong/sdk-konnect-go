// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

type NameControlPlanes string

const (
	NameControlPlanesControlPlanes NameControlPlanes = "Control Planes"
)

func (e NameControlPlanes) ToPointer() *NameControlPlanes {
	return &e
}
func (e *NameControlPlanes) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Control Planes":
		*e = NameControlPlanes(v)
		return nil
	default:
		return fmt.Errorf("invalid value for NameControlPlanes: %v", v)
	}
}

type NameControlPlanesAdmin string

const (
	NameControlPlanesAdminAdmin NameControlPlanesAdmin = "Admin"
)

func (e NameControlPlanesAdmin) ToPointer() *NameControlPlanesAdmin {
	return &e
}
func (e *NameControlPlanesAdmin) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Admin":
		*e = NameControlPlanesAdmin(v)
		return nil
	default:
		return fmt.Errorf("invalid value for NameControlPlanesAdmin: %v", v)
	}
}

type DescriptionThisRoleGrantsFullWriteAccessToAllEntitiesWithinAControlPlane string

const (
	DescriptionThisRoleGrantsFullWriteAccessToAllEntitiesWithinAControlPlaneThisRoleGrantsFullWriteAccessToAllEntitiesWithinAControlPlane DescriptionThisRoleGrantsFullWriteAccessToAllEntitiesWithinAControlPlane = "This role grants full write access to all entities within a control plane."
)

func (e DescriptionThisRoleGrantsFullWriteAccessToAllEntitiesWithinAControlPlane) ToPointer() *DescriptionThisRoleGrantsFullWriteAccessToAllEntitiesWithinAControlPlane {
	return &e
}
func (e *DescriptionThisRoleGrantsFullWriteAccessToAllEntitiesWithinAControlPlane) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "This role grants full write access to all entities within a control plane.":
		*e = DescriptionThisRoleGrantsFullWriteAccessToAllEntitiesWithinAControlPlane(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DescriptionThisRoleGrantsFullWriteAccessToAllEntitiesWithinAControlPlane: %v", v)
	}
}

type AdminThisRoleGrantsFullWriteAccessToAllEntitiesWithinAControlPlane struct {
	Name        NameControlPlanesAdmin                                                   `json:"name"`
	Description DescriptionThisRoleGrantsFullWriteAccessToAllEntitiesWithinAControlPlane `json:"description"`
}

func (o *AdminThisRoleGrantsFullWriteAccessToAllEntitiesWithinAControlPlane) GetName() NameControlPlanesAdmin {
	if o == nil {
		return NameControlPlanesAdmin("")
	}
	return o.Name
}

func (o *AdminThisRoleGrantsFullWriteAccessToAllEntitiesWithinAControlPlane) GetDescription() DescriptionThisRoleGrantsFullWriteAccessToAllEntitiesWithinAControlPlane {
	if o == nil {
		return DescriptionThisRoleGrantsFullWriteAccessToAllEntitiesWithinAControlPlane("")
	}
	return o.Description
}

type NameCertificateAdmin string

const (
	NameCertificateAdminCertificateAdmin NameCertificateAdmin = "Certificate Admin"
)

func (e NameCertificateAdmin) ToPointer() *NameCertificateAdmin {
	return &e
}
func (e *NameCertificateAdmin) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Certificate Admin":
		*e = NameCertificateAdmin(v)
		return nil
	default:
		return fmt.Errorf("invalid value for NameCertificateAdmin: %v", v)
	}
}

type DescriptionThisRoleGrantsFullWriteAccessToAdministerCertificates string

const (
	DescriptionThisRoleGrantsFullWriteAccessToAdministerCertificatesThisRoleGrantsFullWriteAccessToAdministerCertificates DescriptionThisRoleGrantsFullWriteAccessToAdministerCertificates = "This role grants full write access to administer certificates."
)

func (e DescriptionThisRoleGrantsFullWriteAccessToAdministerCertificates) ToPointer() *DescriptionThisRoleGrantsFullWriteAccessToAdministerCertificates {
	return &e
}
func (e *DescriptionThisRoleGrantsFullWriteAccessToAdministerCertificates) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "This role grants full write access to administer certificates.":
		*e = DescriptionThisRoleGrantsFullWriteAccessToAdministerCertificates(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DescriptionThisRoleGrantsFullWriteAccessToAdministerCertificates: %v", v)
	}
}

type CertificateAdmin struct {
	Name        NameCertificateAdmin                                             `json:"name"`
	Description DescriptionThisRoleGrantsFullWriteAccessToAdministerCertificates `json:"description"`
}

func (o *CertificateAdmin) GetName() NameCertificateAdmin {
	if o == nil {
		return NameCertificateAdmin("")
	}
	return o.Name
}

func (o *CertificateAdmin) GetDescription() DescriptionThisRoleGrantsFullWriteAccessToAdministerCertificates {
	if o == nil {
		return DescriptionThisRoleGrantsFullWriteAccessToAdministerCertificates("")
	}
	return o.Description
}

type NameConsumerAdmin string

const (
	NameConsumerAdminConsumerAdmin NameConsumerAdmin = "Consumer Admin"
)

func (e NameConsumerAdmin) ToPointer() *NameConsumerAdmin {
	return &e
}
func (e *NameConsumerAdmin) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Consumer Admin":
		*e = NameConsumerAdmin(v)
		return nil
	default:
		return fmt.Errorf("invalid value for NameConsumerAdmin: %v", v)
	}
}

type DescriptionThisRoleGrantsFullWriteAccessToAdministerConsumers string

const (
	DescriptionThisRoleGrantsFullWriteAccessToAdministerConsumersThisRoleGrantsFullWriteAccessToAdministerConsumers DescriptionThisRoleGrantsFullWriteAccessToAdministerConsumers = "This role grants full write access to administer consumers."
)

func (e DescriptionThisRoleGrantsFullWriteAccessToAdministerConsumers) ToPointer() *DescriptionThisRoleGrantsFullWriteAccessToAdministerConsumers {
	return &e
}
func (e *DescriptionThisRoleGrantsFullWriteAccessToAdministerConsumers) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "This role grants full write access to administer consumers.":
		*e = DescriptionThisRoleGrantsFullWriteAccessToAdministerConsumers(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DescriptionThisRoleGrantsFullWriteAccessToAdministerConsumers: %v", v)
	}
}

type ConsumerAdmin struct {
	Name        NameConsumerAdmin                                             `json:"name"`
	Description DescriptionThisRoleGrantsFullWriteAccessToAdministerConsumers `json:"description"`
}

func (o *ConsumerAdmin) GetName() NameConsumerAdmin {
	if o == nil {
		return NameConsumerAdmin("")
	}
	return o.Name
}

func (o *ConsumerAdmin) GetDescription() DescriptionThisRoleGrantsFullWriteAccessToAdministerConsumers {
	if o == nil {
		return DescriptionThisRoleGrantsFullWriteAccessToAdministerConsumers("")
	}
	return o.Description
}

type NameControlPlanesCreator string

const (
	NameControlPlanesCreatorCreator NameControlPlanesCreator = "Creator"
)

func (e NameControlPlanesCreator) ToPointer() *NameControlPlanesCreator {
	return &e
}
func (e *NameControlPlanesCreator) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Creator":
		*e = NameControlPlanesCreator(v)
		return nil
	default:
		return fmt.Errorf("invalid value for NameControlPlanesCreator: %v", v)
	}
}

type DescriptionCreatesANewControlPlaneInAnOrganizationTheCreatorBecomesTheOwnerOfTheControlPlaneTheyCreate string

const (
	DescriptionCreatesANewControlPlaneInAnOrganizationTheCreatorBecomesTheOwnerOfTheControlPlaneTheyCreateCreatesANewControlPlaneInAnOrganizationTheCreatorBecomesTheOwnerOfTheControlPlaneTheyCreate DescriptionCreatesANewControlPlaneInAnOrganizationTheCreatorBecomesTheOwnerOfTheControlPlaneTheyCreate = "Creates a new Control Plane in an organization. The creator becomes the owner of the Control Plane they create."
)

func (e DescriptionCreatesANewControlPlaneInAnOrganizationTheCreatorBecomesTheOwnerOfTheControlPlaneTheyCreate) ToPointer() *DescriptionCreatesANewControlPlaneInAnOrganizationTheCreatorBecomesTheOwnerOfTheControlPlaneTheyCreate {
	return &e
}
func (e *DescriptionCreatesANewControlPlaneInAnOrganizationTheCreatorBecomesTheOwnerOfTheControlPlaneTheyCreate) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Creates a new Control Plane in an organization. The creator becomes the owner of the Control Plane they create.":
		*e = DescriptionCreatesANewControlPlaneInAnOrganizationTheCreatorBecomesTheOwnerOfTheControlPlaneTheyCreate(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DescriptionCreatesANewControlPlaneInAnOrganizationTheCreatorBecomesTheOwnerOfTheControlPlaneTheyCreate: %v", v)
	}
}

type CreatorCreatesANewControlPlaneInAnOrganizationTheCreatorBecomesTheOwnerOfTheControlPlaneTheyCreate struct {
	Name        NameControlPlanesCreator                                                                               `json:"name"`
	Description DescriptionCreatesANewControlPlaneInAnOrganizationTheCreatorBecomesTheOwnerOfTheControlPlaneTheyCreate `json:"description"`
}

func (o *CreatorCreatesANewControlPlaneInAnOrganizationTheCreatorBecomesTheOwnerOfTheControlPlaneTheyCreate) GetName() NameControlPlanesCreator {
	if o == nil {
		return NameControlPlanesCreator("")
	}
	return o.Name
}

func (o *CreatorCreatesANewControlPlaneInAnOrganizationTheCreatorBecomesTheOwnerOfTheControlPlaneTheyCreate) GetDescription() DescriptionCreatesANewControlPlaneInAnOrganizationTheCreatorBecomesTheOwnerOfTheControlPlaneTheyCreate {
	if o == nil {
		return DescriptionCreatesANewControlPlaneInAnOrganizationTheCreatorBecomesTheOwnerOfTheControlPlaneTheyCreate("")
	}
	return o.Description
}

type NameControlPlanesDeployer string

const (
	NameControlPlanesDeployerDeployer NameControlPlanesDeployer = "Deployer"
)

func (e NameControlPlanesDeployer) ToPointer() *NameControlPlanesDeployer {
	return &e
}
func (e *NameControlPlanesDeployer) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Deployer":
		*e = NameControlPlanesDeployer(v)
		return nil
	default:
		return fmt.Errorf("invalid value for NameControlPlanesDeployer: %v", v)
	}
}

type DescriptionThisRoleGrantsFullWriteAccessToAdministerServicesRoutesAndPluginsNecessaryToDeployServicesInServiceHub string

const (
	DescriptionThisRoleGrantsFullWriteAccessToAdministerServicesRoutesAndPluginsNecessaryToDeployServicesInServiceHubThisRoleGrantsFullWriteAccessToAdministerServicesRoutesAndPluginsNecessaryToDeployServicesInServiceHub DescriptionThisRoleGrantsFullWriteAccessToAdministerServicesRoutesAndPluginsNecessaryToDeployServicesInServiceHub = "This role grants full write access to administer services, routes and plugins necessary to deploy services in Service Hub."
)

func (e DescriptionThisRoleGrantsFullWriteAccessToAdministerServicesRoutesAndPluginsNecessaryToDeployServicesInServiceHub) ToPointer() *DescriptionThisRoleGrantsFullWriteAccessToAdministerServicesRoutesAndPluginsNecessaryToDeployServicesInServiceHub {
	return &e
}
func (e *DescriptionThisRoleGrantsFullWriteAccessToAdministerServicesRoutesAndPluginsNecessaryToDeployServicesInServiceHub) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "This role grants full write access to administer services, routes and plugins necessary to deploy services in Service Hub.":
		*e = DescriptionThisRoleGrantsFullWriteAccessToAdministerServicesRoutesAndPluginsNecessaryToDeployServicesInServiceHub(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DescriptionThisRoleGrantsFullWriteAccessToAdministerServicesRoutesAndPluginsNecessaryToDeployServicesInServiceHub: %v", v)
	}
}

type DeployerThisRoleGrantsFullWriteAccessToAdministerServicesRoutesAndPluginsNecessaryToDeployServicesInServiceHub struct {
	Name        NameControlPlanesDeployer                                                                                         `json:"name"`
	Description DescriptionThisRoleGrantsFullWriteAccessToAdministerServicesRoutesAndPluginsNecessaryToDeployServicesInServiceHub `json:"description"`
}

func (o *DeployerThisRoleGrantsFullWriteAccessToAdministerServicesRoutesAndPluginsNecessaryToDeployServicesInServiceHub) GetName() NameControlPlanesDeployer {
	if o == nil {
		return NameControlPlanesDeployer("")
	}
	return o.Name
}

func (o *DeployerThisRoleGrantsFullWriteAccessToAdministerServicesRoutesAndPluginsNecessaryToDeployServicesInServiceHub) GetDescription() DescriptionThisRoleGrantsFullWriteAccessToAdministerServicesRoutesAndPluginsNecessaryToDeployServicesInServiceHub {
	if o == nil {
		return DescriptionThisRoleGrantsFullWriteAccessToAdministerServicesRoutesAndPluginsNecessaryToDeployServicesInServiceHub("")
	}
	return o.Description
}

type NameGatewayServiceAdmin string

const (
	NameGatewayServiceAdminGatewayServiceAdmin NameGatewayServiceAdmin = "Gateway Service Admin"
)

func (e NameGatewayServiceAdmin) ToPointer() *NameGatewayServiceAdmin {
	return &e
}
func (e *NameGatewayServiceAdmin) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Gateway Service Admin":
		*e = NameGatewayServiceAdmin(v)
		return nil
	default:
		return fmt.Errorf("invalid value for NameGatewayServiceAdmin: %v", v)
	}
}

type DescriptionThisRoleGrantsFullWriteAccessToAdministerGatewayServices string

const (
	DescriptionThisRoleGrantsFullWriteAccessToAdministerGatewayServicesThisRoleGrantsFullWriteAccessToAdministerGatewayServices DescriptionThisRoleGrantsFullWriteAccessToAdministerGatewayServices = "This role grants full write access to administer gateway services."
)

func (e DescriptionThisRoleGrantsFullWriteAccessToAdministerGatewayServices) ToPointer() *DescriptionThisRoleGrantsFullWriteAccessToAdministerGatewayServices {
	return &e
}
func (e *DescriptionThisRoleGrantsFullWriteAccessToAdministerGatewayServices) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "This role grants full write access to administer gateway services.":
		*e = DescriptionThisRoleGrantsFullWriteAccessToAdministerGatewayServices(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DescriptionThisRoleGrantsFullWriteAccessToAdministerGatewayServices: %v", v)
	}
}

type GatewayServiceAdmin struct {
	Name        NameGatewayServiceAdmin                                             `json:"name"`
	Description DescriptionThisRoleGrantsFullWriteAccessToAdministerGatewayServices `json:"description"`
}

func (o *GatewayServiceAdmin) GetName() NameGatewayServiceAdmin {
	if o == nil {
		return NameGatewayServiceAdmin("")
	}
	return o.Name
}

func (o *GatewayServiceAdmin) GetDescription() DescriptionThisRoleGrantsFullWriteAccessToAdministerGatewayServices {
	if o == nil {
		return DescriptionThisRoleGrantsFullWriteAccessToAdministerGatewayServices("")
	}
	return o.Description
}

type NamePluginAdmin string

const (
	NamePluginAdminPluginAdmin NamePluginAdmin = "Plugin Admin"
)

func (e NamePluginAdmin) ToPointer() *NamePluginAdmin {
	return &e
}
func (e *NamePluginAdmin) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Plugin Admin":
		*e = NamePluginAdmin(v)
		return nil
	default:
		return fmt.Errorf("invalid value for NamePluginAdmin: %v", v)
	}
}

type DescriptionThisRoleGrantsFullWriteAccessToAdministerPlugins string

const (
	DescriptionThisRoleGrantsFullWriteAccessToAdministerPluginsThisRoleGrantsFullWriteAccessToAdministerPlugins DescriptionThisRoleGrantsFullWriteAccessToAdministerPlugins = "This role grants full write access to administer plugins."
)

func (e DescriptionThisRoleGrantsFullWriteAccessToAdministerPlugins) ToPointer() *DescriptionThisRoleGrantsFullWriteAccessToAdministerPlugins {
	return &e
}
func (e *DescriptionThisRoleGrantsFullWriteAccessToAdministerPlugins) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "This role grants full write access to administer plugins.":
		*e = DescriptionThisRoleGrantsFullWriteAccessToAdministerPlugins(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DescriptionThisRoleGrantsFullWriteAccessToAdministerPlugins: %v", v)
	}
}

type PluginAdmin struct {
	Name        NamePluginAdmin                                             `json:"name"`
	Description DescriptionThisRoleGrantsFullWriteAccessToAdministerPlugins `json:"description"`
}

func (o *PluginAdmin) GetName() NamePluginAdmin {
	if o == nil {
		return NamePluginAdmin("")
	}
	return o.Name
}

func (o *PluginAdmin) GetDescription() DescriptionThisRoleGrantsFullWriteAccessToAdministerPlugins {
	if o == nil {
		return DescriptionThisRoleGrantsFullWriteAccessToAdministerPlugins("")
	}
	return o.Description
}

type NameRouteAdmin string

const (
	NameRouteAdminRouteAdmin NameRouteAdmin = "Route Admin"
)

func (e NameRouteAdmin) ToPointer() *NameRouteAdmin {
	return &e
}
func (e *NameRouteAdmin) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Route Admin":
		*e = NameRouteAdmin(v)
		return nil
	default:
		return fmt.Errorf("invalid value for NameRouteAdmin: %v", v)
	}
}

type DescriptionThisRoleGrantsFullWriteAccessToAdministerRoutes string

const (
	DescriptionThisRoleGrantsFullWriteAccessToAdministerRoutesThisRoleGrantsFullWriteAccessToAdministerRoutes DescriptionThisRoleGrantsFullWriteAccessToAdministerRoutes = "This role grants full write access to administer routes."
)

func (e DescriptionThisRoleGrantsFullWriteAccessToAdministerRoutes) ToPointer() *DescriptionThisRoleGrantsFullWriteAccessToAdministerRoutes {
	return &e
}
func (e *DescriptionThisRoleGrantsFullWriteAccessToAdministerRoutes) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "This role grants full write access to administer routes.":
		*e = DescriptionThisRoleGrantsFullWriteAccessToAdministerRoutes(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DescriptionThisRoleGrantsFullWriteAccessToAdministerRoutes: %v", v)
	}
}

type RouteAdmin struct {
	Name        NameRouteAdmin                                             `json:"name"`
	Description DescriptionThisRoleGrantsFullWriteAccessToAdministerRoutes `json:"description"`
}

func (o *RouteAdmin) GetName() NameRouteAdmin {
	if o == nil {
		return NameRouteAdmin("")
	}
	return o.Name
}

func (o *RouteAdmin) GetDescription() DescriptionThisRoleGrantsFullWriteAccessToAdministerRoutes {
	if o == nil {
		return DescriptionThisRoleGrantsFullWriteAccessToAdministerRoutes("")
	}
	return o.Description
}

type NameSniAdmin string

const (
	NameSniAdminSniAdmin NameSniAdmin = "SNI Admin"
)

func (e NameSniAdmin) ToPointer() *NameSniAdmin {
	return &e
}
func (e *NameSniAdmin) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SNI Admin":
		*e = NameSniAdmin(v)
		return nil
	default:
		return fmt.Errorf("invalid value for NameSniAdmin: %v", v)
	}
}

type DescriptionThisRoleGrantsFullWriteAccessToAdministerSnIs string

const (
	DescriptionThisRoleGrantsFullWriteAccessToAdministerSnIsThisRoleGrantsFullWriteAccessToAdministerSnIs DescriptionThisRoleGrantsFullWriteAccessToAdministerSnIs = "This role grants full write access to administer SNIs."
)

func (e DescriptionThisRoleGrantsFullWriteAccessToAdministerSnIs) ToPointer() *DescriptionThisRoleGrantsFullWriteAccessToAdministerSnIs {
	return &e
}
func (e *DescriptionThisRoleGrantsFullWriteAccessToAdministerSnIs) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "This role grants full write access to administer SNIs.":
		*e = DescriptionThisRoleGrantsFullWriteAccessToAdministerSnIs(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DescriptionThisRoleGrantsFullWriteAccessToAdministerSnIs: %v", v)
	}
}

type SniAdmin struct {
	Name        NameSniAdmin                                             `json:"name"`
	Description DescriptionThisRoleGrantsFullWriteAccessToAdministerSnIs `json:"description"`
}

func (o *SniAdmin) GetName() NameSniAdmin {
	if o == nil {
		return NameSniAdmin("")
	}
	return o.Name
}

func (o *SniAdmin) GetDescription() DescriptionThisRoleGrantsFullWriteAccessToAdministerSnIs {
	if o == nil {
		return DescriptionThisRoleGrantsFullWriteAccessToAdministerSnIs("")
	}
	return o.Description
}

type NameUpstreamAdmin string

const (
	NameUpstreamAdminUpstreamAdmin NameUpstreamAdmin = "Upstream Admin"
)

func (e NameUpstreamAdmin) ToPointer() *NameUpstreamAdmin {
	return &e
}
func (e *NameUpstreamAdmin) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Upstream Admin":
		*e = NameUpstreamAdmin(v)
		return nil
	default:
		return fmt.Errorf("invalid value for NameUpstreamAdmin: %v", v)
	}
}

type DescriptionThisRoleGrantsFullWriteAccessToAdministerUpstreams string

const (
	DescriptionThisRoleGrantsFullWriteAccessToAdministerUpstreamsThisRoleGrantsFullWriteAccessToAdministerUpstreams DescriptionThisRoleGrantsFullWriteAccessToAdministerUpstreams = "This role grants full write access to administer upstreams."
)

func (e DescriptionThisRoleGrantsFullWriteAccessToAdministerUpstreams) ToPointer() *DescriptionThisRoleGrantsFullWriteAccessToAdministerUpstreams {
	return &e
}
func (e *DescriptionThisRoleGrantsFullWriteAccessToAdministerUpstreams) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "This role grants full write access to administer upstreams.":
		*e = DescriptionThisRoleGrantsFullWriteAccessToAdministerUpstreams(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DescriptionThisRoleGrantsFullWriteAccessToAdministerUpstreams: %v", v)
	}
}

type UpstreamAdmin struct {
	Name        NameUpstreamAdmin                                             `json:"name"`
	Description DescriptionThisRoleGrantsFullWriteAccessToAdministerUpstreams `json:"description"`
}

func (o *UpstreamAdmin) GetName() NameUpstreamAdmin {
	if o == nil {
		return NameUpstreamAdmin("")
	}
	return o.Name
}

func (o *UpstreamAdmin) GetDescription() DescriptionThisRoleGrantsFullWriteAccessToAdministerUpstreams {
	if o == nil {
		return DescriptionThisRoleGrantsFullWriteAccessToAdministerUpstreams("")
	}
	return o.Description
}

type NameControlPlanesViewer string

const (
	NameControlPlanesViewerViewer NameControlPlanesViewer = "Viewer"
)

func (e NameControlPlanesViewer) ToPointer() *NameControlPlanesViewer {
	return &e
}
func (e *NameControlPlanesViewer) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Viewer":
		*e = NameControlPlanesViewer(v)
		return nil
	default:
		return fmt.Errorf("invalid value for NameControlPlanesViewer: %v", v)
	}
}

type DescriptionThisRoleGrantsReadOnlyAccessToAllEntitiesWithinAControlPlane string

const (
	DescriptionThisRoleGrantsReadOnlyAccessToAllEntitiesWithinAControlPlaneThisRoleGrantsReadOnlyAccessToAllEntitiesWithinAControlPlane DescriptionThisRoleGrantsReadOnlyAccessToAllEntitiesWithinAControlPlane = "This role grants read only access to all entities within a control plane."
)

func (e DescriptionThisRoleGrantsReadOnlyAccessToAllEntitiesWithinAControlPlane) ToPointer() *DescriptionThisRoleGrantsReadOnlyAccessToAllEntitiesWithinAControlPlane {
	return &e
}
func (e *DescriptionThisRoleGrantsReadOnlyAccessToAllEntitiesWithinAControlPlane) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "This role grants read only access to all entities within a control plane.":
		*e = DescriptionThisRoleGrantsReadOnlyAccessToAllEntitiesWithinAControlPlane(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DescriptionThisRoleGrantsReadOnlyAccessToAllEntitiesWithinAControlPlane: %v", v)
	}
}

type ViewerThisRoleGrantsReadOnlyAccessToAllEntitiesWithinAControlPlane struct {
	Name        NameControlPlanesViewer                                                 `json:"name"`
	Description DescriptionThisRoleGrantsReadOnlyAccessToAllEntitiesWithinAControlPlane `json:"description"`
}

func (o *ViewerThisRoleGrantsReadOnlyAccessToAllEntitiesWithinAControlPlane) GetName() NameControlPlanesViewer {
	if o == nil {
		return NameControlPlanesViewer("")
	}
	return o.Name
}

func (o *ViewerThisRoleGrantsReadOnlyAccessToAllEntitiesWithinAControlPlane) GetDescription() DescriptionThisRoleGrantsReadOnlyAccessToAllEntitiesWithinAControlPlane {
	if o == nil {
		return DescriptionThisRoleGrantsReadOnlyAccessToAllEntitiesWithinAControlPlane("")
	}
	return o.Description
}

type RolesControlPlanes struct {
	Admin               *AdminThisRoleGrantsFullWriteAccessToAllEntitiesWithinAControlPlane                                             `json:"admin,omitempty"`
	CertificateAdmin    *CertificateAdmin                                                                                               `json:"certificate_admin,omitempty"`
	ConsumerAdmin       *ConsumerAdmin                                                                                                  `json:"consumer_admin,omitempty"`
	Creator             *CreatorCreatesANewControlPlaneInAnOrganizationTheCreatorBecomesTheOwnerOfTheControlPlaneTheyCreate             `json:"creator,omitempty"`
	Deployer            *DeployerThisRoleGrantsFullWriteAccessToAdministerServicesRoutesAndPluginsNecessaryToDeployServicesInServiceHub `json:"deployer,omitempty"`
	GatewayServiceAdmin *GatewayServiceAdmin                                                                                            `json:"gateway_service_admin,omitempty"`
	PluginAdmin         *PluginAdmin                                                                                                    `json:"plugin_admin,omitempty"`
	RouteAdmin          *RouteAdmin                                                                                                     `json:"route_admin,omitempty"`
	SniAdmin            *SniAdmin                                                                                                       `json:"sni_admin,omitempty"`
	UpstreamAdmin       *UpstreamAdmin                                                                                                  `json:"upstream_admin,omitempty"`
	Viewer              *ViewerThisRoleGrantsReadOnlyAccessToAllEntitiesWithinAControlPlane                                             `json:"viewer,omitempty"`
}

func (o *RolesControlPlanes) GetAdmin() *AdminThisRoleGrantsFullWriteAccessToAllEntitiesWithinAControlPlane {
	if o == nil {
		return nil
	}
	return o.Admin
}

func (o *RolesControlPlanes) GetCertificateAdmin() *CertificateAdmin {
	if o == nil {
		return nil
	}
	return o.CertificateAdmin
}

func (o *RolesControlPlanes) GetConsumerAdmin() *ConsumerAdmin {
	if o == nil {
		return nil
	}
	return o.ConsumerAdmin
}

func (o *RolesControlPlanes) GetCreator() *CreatorCreatesANewControlPlaneInAnOrganizationTheCreatorBecomesTheOwnerOfTheControlPlaneTheyCreate {
	if o == nil {
		return nil
	}
	return o.Creator
}

func (o *RolesControlPlanes) GetDeployer() *DeployerThisRoleGrantsFullWriteAccessToAdministerServicesRoutesAndPluginsNecessaryToDeployServicesInServiceHub {
	if o == nil {
		return nil
	}
	return o.Deployer
}

func (o *RolesControlPlanes) GetGatewayServiceAdmin() *GatewayServiceAdmin {
	if o == nil {
		return nil
	}
	return o.GatewayServiceAdmin
}

func (o *RolesControlPlanes) GetPluginAdmin() *PluginAdmin {
	if o == nil {
		return nil
	}
	return o.PluginAdmin
}

func (o *RolesControlPlanes) GetRouteAdmin() *RouteAdmin {
	if o == nil {
		return nil
	}
	return o.RouteAdmin
}

func (o *RolesControlPlanes) GetSniAdmin() *SniAdmin {
	if o == nil {
		return nil
	}
	return o.SniAdmin
}

func (o *RolesControlPlanes) GetUpstreamAdmin() *UpstreamAdmin {
	if o == nil {
		return nil
	}
	return o.UpstreamAdmin
}

func (o *RolesControlPlanes) GetViewer() *ViewerThisRoleGrantsReadOnlyAccessToAllEntitiesWithinAControlPlane {
	if o == nil {
		return nil
	}
	return o.Viewer
}

type ControlPlanes struct {
	Name  NameControlPlanes  `json:"name"`
	Roles RolesControlPlanes `json:"roles"`
}

func (o *ControlPlanes) GetName() NameControlPlanes {
	if o == nil {
		return NameControlPlanes("")
	}
	return o.Name
}

func (o *ControlPlanes) GetRoles() RolesControlPlanes {
	if o == nil {
		return RolesControlPlanes{}
	}
	return o.Roles
}

type NameAPIProducts string

const (
	NameAPIProductsAPIProducts NameAPIProducts = "API Products"
)

func (e NameAPIProducts) ToPointer() *NameAPIProducts {
	return &e
}
func (e *NameAPIProducts) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "API Products":
		*e = NameAPIProducts(v)
		return nil
	default:
		return fmt.Errorf("invalid value for NameAPIProducts: %v", v)
	}
}

type NameAPIProductsAdmin string

const (
	NameAPIProductsAdminAdmin NameAPIProductsAdmin = "Admin"
)

func (e NameAPIProductsAdmin) ToPointer() *NameAPIProductsAdmin {
	return &e
}
func (e *NameAPIProductsAdmin) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Admin":
		*e = NameAPIProductsAdmin(v)
		return nil
	default:
		return fmt.Errorf("invalid value for NameAPIProductsAdmin: %v", v)
	}
}

type DescriptionThisRoleGrantsFullWriteAccessToAnAPIProductAndItsVersions string

const (
	DescriptionThisRoleGrantsFullWriteAccessToAnAPIProductAndItsVersionsThisRoleGrantsFullWriteAccessToAnAPIProductAndItsVersions DescriptionThisRoleGrantsFullWriteAccessToAnAPIProductAndItsVersions = "This role grants full write access to an API product and its versions."
)

func (e DescriptionThisRoleGrantsFullWriteAccessToAnAPIProductAndItsVersions) ToPointer() *DescriptionThisRoleGrantsFullWriteAccessToAnAPIProductAndItsVersions {
	return &e
}
func (e *DescriptionThisRoleGrantsFullWriteAccessToAnAPIProductAndItsVersions) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "This role grants full write access to an API product and its versions.":
		*e = DescriptionThisRoleGrantsFullWriteAccessToAnAPIProductAndItsVersions(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DescriptionThisRoleGrantsFullWriteAccessToAnAPIProductAndItsVersions: %v", v)
	}
}

type AdminThisRoleGrantsFullWriteAccessToAnAPIProductAndItsVersions struct {
	Name        NameAPIProductsAdmin                                                 `json:"name"`
	Description DescriptionThisRoleGrantsFullWriteAccessToAnAPIProductAndItsVersions `json:"description"`
}

func (o *AdminThisRoleGrantsFullWriteAccessToAnAPIProductAndItsVersions) GetName() NameAPIProductsAdmin {
	if o == nil {
		return NameAPIProductsAdmin("")
	}
	return o.Name
}

func (o *AdminThisRoleGrantsFullWriteAccessToAnAPIProductAndItsVersions) GetDescription() DescriptionThisRoleGrantsFullWriteAccessToAnAPIProductAndItsVersions {
	if o == nil {
		return DescriptionThisRoleGrantsFullWriteAccessToAnAPIProductAndItsVersions("")
	}
	return o.Description
}

type NameApplicationRegistration string

const (
	NameApplicationRegistrationApplicationRegistration NameApplicationRegistration = "Application Registration"
)

func (e NameApplicationRegistration) ToPointer() *NameApplicationRegistration {
	return &e
}
func (e *NameApplicationRegistration) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Application Registration":
		*e = NameApplicationRegistration(v)
		return nil
	default:
		return fmt.Errorf("invalid value for NameApplicationRegistration: %v", v)
	}
}

type DescriptionThisRoleGrantsPermissionToEnableAndDisableApplicationRegistrationOnAnAPIProduct string

const (
	DescriptionThisRoleGrantsPermissionToEnableAndDisableApplicationRegistrationOnAnAPIProductThisRoleGrantsPermissionToEnableAndDisableApplicationRegistrationOnAnAPIProduct DescriptionThisRoleGrantsPermissionToEnableAndDisableApplicationRegistrationOnAnAPIProduct = "This role grants permission to enable and disable application registration on an API product."
)

func (e DescriptionThisRoleGrantsPermissionToEnableAndDisableApplicationRegistrationOnAnAPIProduct) ToPointer() *DescriptionThisRoleGrantsPermissionToEnableAndDisableApplicationRegistrationOnAnAPIProduct {
	return &e
}
func (e *DescriptionThisRoleGrantsPermissionToEnableAndDisableApplicationRegistrationOnAnAPIProduct) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "This role grants permission to enable and disable application registration on an API product.":
		*e = DescriptionThisRoleGrantsPermissionToEnableAndDisableApplicationRegistrationOnAnAPIProduct(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DescriptionThisRoleGrantsPermissionToEnableAndDisableApplicationRegistrationOnAnAPIProduct: %v", v)
	}
}

type ApplicationRegistration struct {
	Name        NameApplicationRegistration                                                                `json:"name"`
	Description DescriptionThisRoleGrantsPermissionToEnableAndDisableApplicationRegistrationOnAnAPIProduct `json:"description"`
}

func (o *ApplicationRegistration) GetName() NameApplicationRegistration {
	if o == nil {
		return NameApplicationRegistration("")
	}
	return o.Name
}

func (o *ApplicationRegistration) GetDescription() DescriptionThisRoleGrantsPermissionToEnableAndDisableApplicationRegistrationOnAnAPIProduct {
	if o == nil {
		return DescriptionThisRoleGrantsPermissionToEnableAndDisableApplicationRegistrationOnAnAPIProduct("")
	}
	return o.Description
}

type NameAPIProductsCreator string

const (
	NameAPIProductsCreatorCreator NameAPIProductsCreator = "Creator"
)

func (e NameAPIProductsCreator) ToPointer() *NameAPIProductsCreator {
	return &e
}
func (e *NameAPIProductsCreator) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Creator":
		*e = NameAPIProductsCreator(v)
		return nil
	default:
		return fmt.Errorf("invalid value for NameAPIProductsCreator: %v", v)
	}
}

type DescriptionThisAccessIsRequiredToCreateAPIProductsThisAccessIsNotForCreatingSubEntitiesSuchAsVersionsAPISpecsEtc string

const (
	DescriptionThisAccessIsRequiredToCreateAPIProductsThisAccessIsNotForCreatingSubEntitiesSuchAsVersionsAPISpecsEtcThisAccessIsRequiredToCreateAPIProductsThisAccessIsNotForCreatingSubEntitiesSuchAsVersionsAPISpecsEtc DescriptionThisAccessIsRequiredToCreateAPIProductsThisAccessIsNotForCreatingSubEntitiesSuchAsVersionsAPISpecsEtc = "This access is required to create API products. This access is not for creating sub-entities such as versions, API specs, etc."
)

func (e DescriptionThisAccessIsRequiredToCreateAPIProductsThisAccessIsNotForCreatingSubEntitiesSuchAsVersionsAPISpecsEtc) ToPointer() *DescriptionThisAccessIsRequiredToCreateAPIProductsThisAccessIsNotForCreatingSubEntitiesSuchAsVersionsAPISpecsEtc {
	return &e
}
func (e *DescriptionThisAccessIsRequiredToCreateAPIProductsThisAccessIsNotForCreatingSubEntitiesSuchAsVersionsAPISpecsEtc) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "This access is required to create API products. This access is not for creating sub-entities such as versions, API specs, etc.":
		*e = DescriptionThisAccessIsRequiredToCreateAPIProductsThisAccessIsNotForCreatingSubEntitiesSuchAsVersionsAPISpecsEtc(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DescriptionThisAccessIsRequiredToCreateAPIProductsThisAccessIsNotForCreatingSubEntitiesSuchAsVersionsAPISpecsEtc: %v", v)
	}
}

type CreatorThisAccessIsRequiredToCreateAPIProductsThisAccessIsNotForCreatingSubEntitiesSuchAsVersionsAPISpecsEtc struct {
	Name        NameAPIProductsCreator                                                                                           `json:"name"`
	Description DescriptionThisAccessIsRequiredToCreateAPIProductsThisAccessIsNotForCreatingSubEntitiesSuchAsVersionsAPISpecsEtc `json:"description"`
}

func (o *CreatorThisAccessIsRequiredToCreateAPIProductsThisAccessIsNotForCreatingSubEntitiesSuchAsVersionsAPISpecsEtc) GetName() NameAPIProductsCreator {
	if o == nil {
		return NameAPIProductsCreator("")
	}
	return o.Name
}

func (o *CreatorThisAccessIsRequiredToCreateAPIProductsThisAccessIsNotForCreatingSubEntitiesSuchAsVersionsAPISpecsEtc) GetDescription() DescriptionThisAccessIsRequiredToCreateAPIProductsThisAccessIsNotForCreatingSubEntitiesSuchAsVersionsAPISpecsEtc {
	if o == nil {
		return DescriptionThisAccessIsRequiredToCreateAPIProductsThisAccessIsNotForCreatingSubEntitiesSuchAsVersionsAPISpecsEtc("")
	}
	return o.Description
}

type NameAPIProductsDeployer string

const (
	NameAPIProductsDeployerDeployer NameAPIProductsDeployer = "Deployer"
)

func (e NameAPIProductsDeployer) ToPointer() *NameAPIProductsDeployer {
	return &e
}
func (e *NameAPIProductsDeployer) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Deployer":
		*e = NameAPIProductsDeployer(v)
		return nil
	default:
		return fmt.Errorf("invalid value for NameAPIProductsDeployer: %v", v)
	}
}

type DescriptionThisRoleGrantsPermissionToDeployAndRemoveAnAPIProductFromAControlPlane string

const (
	DescriptionThisRoleGrantsPermissionToDeployAndRemoveAnAPIProductFromAControlPlaneThisRoleGrantsPermissionToDeployAndRemoveAnAPIProductFromAControlPlane DescriptionThisRoleGrantsPermissionToDeployAndRemoveAnAPIProductFromAControlPlane = "This role grants permission to deploy and remove an API product from a control plane."
)

func (e DescriptionThisRoleGrantsPermissionToDeployAndRemoveAnAPIProductFromAControlPlane) ToPointer() *DescriptionThisRoleGrantsPermissionToDeployAndRemoveAnAPIProductFromAControlPlane {
	return &e
}
func (e *DescriptionThisRoleGrantsPermissionToDeployAndRemoveAnAPIProductFromAControlPlane) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "This role grants permission to deploy and remove an API product from a control plane.":
		*e = DescriptionThisRoleGrantsPermissionToDeployAndRemoveAnAPIProductFromAControlPlane(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DescriptionThisRoleGrantsPermissionToDeployAndRemoveAnAPIProductFromAControlPlane: %v", v)
	}
}

type DeployerThisRoleGrantsPermissionToDeployAndRemoveAnAPIProductFromAControlPlane struct {
	Name        NameAPIProductsDeployer                                                           `json:"name"`
	Description DescriptionThisRoleGrantsPermissionToDeployAndRemoveAnAPIProductFromAControlPlane `json:"description"`
}

func (o *DeployerThisRoleGrantsPermissionToDeployAndRemoveAnAPIProductFromAControlPlane) GetName() NameAPIProductsDeployer {
	if o == nil {
		return NameAPIProductsDeployer("")
	}
	return o.Name
}

func (o *DeployerThisRoleGrantsPermissionToDeployAndRemoveAnAPIProductFromAControlPlane) GetDescription() DescriptionThisRoleGrantsPermissionToDeployAndRemoveAnAPIProductFromAControlPlane {
	if o == nil {
		return DescriptionThisRoleGrantsPermissionToDeployAndRemoveAnAPIProductFromAControlPlane("")
	}
	return o.Description
}

type NameMaintainer string

const (
	NameMaintainerMaintainer NameMaintainer = "Maintainer"
)

func (e NameMaintainer) ToPointer() *NameMaintainer {
	return &e
}
func (e *NameMaintainer) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Maintainer":
		*e = NameMaintainer(v)
		return nil
	default:
		return fmt.Errorf("invalid value for NameMaintainer: %v", v)
	}
}

type DescriptionThisRoleGrantsAllWritePermissionToManageAnAPIProductAndToAdministerPlugins string

const (
	DescriptionThisRoleGrantsAllWritePermissionToManageAnAPIProductAndToAdministerPluginsThisRoleGrantsAllWritePermissionToManageAnAPIProductAndToAdministerPlugins DescriptionThisRoleGrantsAllWritePermissionToManageAnAPIProductAndToAdministerPlugins = "This role grants all write permission to manage an API product and to administer plugins."
)

func (e DescriptionThisRoleGrantsAllWritePermissionToManageAnAPIProductAndToAdministerPlugins) ToPointer() *DescriptionThisRoleGrantsAllWritePermissionToManageAnAPIProductAndToAdministerPlugins {
	return &e
}
func (e *DescriptionThisRoleGrantsAllWritePermissionToManageAnAPIProductAndToAdministerPlugins) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "This role grants all write permission to manage an API product and to administer plugins.":
		*e = DescriptionThisRoleGrantsAllWritePermissionToManageAnAPIProductAndToAdministerPlugins(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DescriptionThisRoleGrantsAllWritePermissionToManageAnAPIProductAndToAdministerPlugins: %v", v)
	}
}

type Maintainer struct {
	Name        NameMaintainer                                                                        `json:"name"`
	Description DescriptionThisRoleGrantsAllWritePermissionToManageAnAPIProductAndToAdministerPlugins `json:"description"`
}

func (o *Maintainer) GetName() NameMaintainer {
	if o == nil {
		return NameMaintainer("")
	}
	return o.Name
}

func (o *Maintainer) GetDescription() DescriptionThisRoleGrantsAllWritePermissionToManageAnAPIProductAndToAdministerPlugins {
	if o == nil {
		return DescriptionThisRoleGrantsAllWritePermissionToManageAnAPIProductAndToAdministerPlugins("")
	}
	return o.Description
}

type NamePluginsAdmin string

const (
	NamePluginsAdminPluginsAdmin NamePluginsAdmin = "Plugins Admin"
)

func (e NamePluginsAdmin) ToPointer() *NamePluginsAdmin {
	return &e
}
func (e *NamePluginsAdmin) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Plugins Admin":
		*e = NamePluginsAdmin(v)
		return nil
	default:
		return fmt.Errorf("invalid value for NamePluginsAdmin: %v", v)
	}
}

type DescriptionThisRoleGrantsFullWritePermissionToAdministerPlugins string

const (
	DescriptionThisRoleGrantsFullWritePermissionToAdministerPluginsThisRoleGrantsFullWritePermissionToAdministerPlugins DescriptionThisRoleGrantsFullWritePermissionToAdministerPlugins = "This role grants full write permission to administer plugins."
)

func (e DescriptionThisRoleGrantsFullWritePermissionToAdministerPlugins) ToPointer() *DescriptionThisRoleGrantsFullWritePermissionToAdministerPlugins {
	return &e
}
func (e *DescriptionThisRoleGrantsFullWritePermissionToAdministerPlugins) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "This role grants full write permission to administer plugins.":
		*e = DescriptionThisRoleGrantsFullWritePermissionToAdministerPlugins(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DescriptionThisRoleGrantsFullWritePermissionToAdministerPlugins: %v", v)
	}
}

type PluginsAdmin struct {
	Name        NamePluginsAdmin                                                `json:"name"`
	Description DescriptionThisRoleGrantsFullWritePermissionToAdministerPlugins `json:"description"`
}

func (o *PluginsAdmin) GetName() NamePluginsAdmin {
	if o == nil {
		return NamePluginsAdmin("")
	}
	return o.Name
}

func (o *PluginsAdmin) GetDescription() DescriptionThisRoleGrantsFullWritePermissionToAdministerPlugins {
	if o == nil {
		return DescriptionThisRoleGrantsFullWritePermissionToAdministerPlugins("")
	}
	return o.Description
}

type NamePublisher string

const (
	NamePublisherPublisher NamePublisher = "Publisher"
)

func (e NamePublisher) ToPointer() *NamePublisher {
	return &e
}
func (e *NamePublisher) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher":
		*e = NamePublisher(v)
		return nil
	default:
		return fmt.Errorf("invalid value for NamePublisher: %v", v)
	}
}

type DescriptionThisRoleGrantsPermissionToPublishAnAPIProductToOneOrMorePortals string

const (
	DescriptionThisRoleGrantsPermissionToPublishAnAPIProductToOneOrMorePortalsThisRoleGrantsPermissionToPublishAnAPIProductToOneOrMorePortals DescriptionThisRoleGrantsPermissionToPublishAnAPIProductToOneOrMorePortals = "This role grants permission to publish an API product to one or more portals."
)

func (e DescriptionThisRoleGrantsPermissionToPublishAnAPIProductToOneOrMorePortals) ToPointer() *DescriptionThisRoleGrantsPermissionToPublishAnAPIProductToOneOrMorePortals {
	return &e
}
func (e *DescriptionThisRoleGrantsPermissionToPublishAnAPIProductToOneOrMorePortals) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "This role grants permission to publish an API product to one or more portals.":
		*e = DescriptionThisRoleGrantsPermissionToPublishAnAPIProductToOneOrMorePortals(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DescriptionThisRoleGrantsPermissionToPublishAnAPIProductToOneOrMorePortals: %v", v)
	}
}

type Publisher struct {
	Name        NamePublisher                                                              `json:"name"`
	Description DescriptionThisRoleGrantsPermissionToPublishAnAPIProductToOneOrMorePortals `json:"description"`
}

func (o *Publisher) GetName() NamePublisher {
	if o == nil {
		return NamePublisher("")
	}
	return o.Name
}

func (o *Publisher) GetDescription() DescriptionThisRoleGrantsPermissionToPublishAnAPIProductToOneOrMorePortals {
	if o == nil {
		return DescriptionThisRoleGrantsPermissionToPublishAnAPIProductToOneOrMorePortals("")
	}
	return o.Description
}

type NameAPIProductsViewer string

const (
	NameAPIProductsViewerViewer NameAPIProductsViewer = "Viewer"
)

func (e NameAPIProductsViewer) ToPointer() *NameAPIProductsViewer {
	return &e
}
func (e *NameAPIProductsViewer) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Viewer":
		*e = NameAPIProductsViewer(v)
		return nil
	default:
		return fmt.Errorf("invalid value for NameAPIProductsViewer: %v", v)
	}
}

type DescriptionViewerHasReadOnlyAccessToAnAPIProductAndItsSubEntities string

const (
	DescriptionViewerHasReadOnlyAccessToAnAPIProductAndItsSubEntitiesViewerHasReadOnlyAccessToAnAPIProductAndItsSubEntities DescriptionViewerHasReadOnlyAccessToAnAPIProductAndItsSubEntities = "Viewer has read-only access to an API product and its sub-entities."
)

func (e DescriptionViewerHasReadOnlyAccessToAnAPIProductAndItsSubEntities) ToPointer() *DescriptionViewerHasReadOnlyAccessToAnAPIProductAndItsSubEntities {
	return &e
}
func (e *DescriptionViewerHasReadOnlyAccessToAnAPIProductAndItsSubEntities) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Viewer has read-only access to an API product and its sub-entities.":
		*e = DescriptionViewerHasReadOnlyAccessToAnAPIProductAndItsSubEntities(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DescriptionViewerHasReadOnlyAccessToAnAPIProductAndItsSubEntities: %v", v)
	}
}

type ViewerViewerHasReadOnlyAccessToAnAPIProductAndItsSubEntities struct {
	Name        NameAPIProductsViewer                                             `json:"name"`
	Description DescriptionViewerHasReadOnlyAccessToAnAPIProductAndItsSubEntities `json:"description"`
}

func (o *ViewerViewerHasReadOnlyAccessToAnAPIProductAndItsSubEntities) GetName() NameAPIProductsViewer {
	if o == nil {
		return NameAPIProductsViewer("")
	}
	return o.Name
}

func (o *ViewerViewerHasReadOnlyAccessToAnAPIProductAndItsSubEntities) GetDescription() DescriptionViewerHasReadOnlyAccessToAnAPIProductAndItsSubEntities {
	if o == nil {
		return DescriptionViewerHasReadOnlyAccessToAnAPIProductAndItsSubEntities("")
	}
	return o.Description
}

type RolesAPIProducts struct {
	Admin                   *AdminThisRoleGrantsFullWriteAccessToAnAPIProductAndItsVersions                                               `json:"admin,omitempty"`
	ApplicationRegistration *ApplicationRegistration                                                                                      `json:"application_registration,omitempty"`
	Creator                 *CreatorThisAccessIsRequiredToCreateAPIProductsThisAccessIsNotForCreatingSubEntitiesSuchAsVersionsAPISpecsEtc `json:"creator,omitempty"`
	Deployer                *DeployerThisRoleGrantsPermissionToDeployAndRemoveAnAPIProductFromAControlPlane                               `json:"deployer,omitempty"`
	Maintainer              *Maintainer                                                                                                   `json:"maintainer,omitempty"`
	PluginsAdmin            *PluginsAdmin                                                                                                 `json:"plugins_admin,omitempty"`
	Publisher               *Publisher                                                                                                    `json:"publisher,omitempty"`
	Viewer                  *ViewerViewerHasReadOnlyAccessToAnAPIProductAndItsSubEntities                                                 `json:"viewer,omitempty"`
}

func (o *RolesAPIProducts) GetAdmin() *AdminThisRoleGrantsFullWriteAccessToAnAPIProductAndItsVersions {
	if o == nil {
		return nil
	}
	return o.Admin
}

func (o *RolesAPIProducts) GetApplicationRegistration() *ApplicationRegistration {
	if o == nil {
		return nil
	}
	return o.ApplicationRegistration
}

func (o *RolesAPIProducts) GetCreator() *CreatorThisAccessIsRequiredToCreateAPIProductsThisAccessIsNotForCreatingSubEntitiesSuchAsVersionsAPISpecsEtc {
	if o == nil {
		return nil
	}
	return o.Creator
}

func (o *RolesAPIProducts) GetDeployer() *DeployerThisRoleGrantsPermissionToDeployAndRemoveAnAPIProductFromAControlPlane {
	if o == nil {
		return nil
	}
	return o.Deployer
}

func (o *RolesAPIProducts) GetMaintainer() *Maintainer {
	if o == nil {
		return nil
	}
	return o.Maintainer
}

func (o *RolesAPIProducts) GetPluginsAdmin() *PluginsAdmin {
	if o == nil {
		return nil
	}
	return o.PluginsAdmin
}

func (o *RolesAPIProducts) GetPublisher() *Publisher {
	if o == nil {
		return nil
	}
	return o.Publisher
}

func (o *RolesAPIProducts) GetViewer() *ViewerViewerHasReadOnlyAccessToAnAPIProductAndItsSubEntities {
	if o == nil {
		return nil
	}
	return o.Viewer
}

type APIProducts struct {
	Name  NameAPIProducts  `json:"name"`
	Roles RolesAPIProducts `json:"roles"`
}

func (o *APIProducts) GetName() NameAPIProducts {
	if o == nil {
		return NameAPIProducts("")
	}
	return o.Name
}

func (o *APIProducts) GetRoles() RolesAPIProducts {
	if o == nil {
		return RolesAPIProducts{}
	}
	return o.Roles
}

type NameAuditLogs string

const (
	NameAuditLogsAuditLogs NameAuditLogs = "Audit Logs"
)

func (e NameAuditLogs) ToPointer() *NameAuditLogs {
	return &e
}
func (e *NameAuditLogs) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Audit Logs":
		*e = NameAuditLogs(v)
		return nil
	default:
		return fmt.Errorf("invalid value for NameAuditLogs: %v", v)
	}
}

type NameAuditLogsAdmin string

const (
	NameAuditLogsAdminAdmin NameAuditLogsAdmin = "Admin"
)

func (e NameAuditLogsAdmin) ToPointer() *NameAuditLogsAdmin {
	return &e
}
func (e *NameAuditLogsAdmin) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Admin":
		*e = NameAuditLogsAdmin(v)
		return nil
	default:
		return fmt.Errorf("invalid value for NameAuditLogsAdmin: %v", v)
	}
}

type DescriptionThisRoleGrantsFullWriteAccessToTheAuditLogConfiguration string

const (
	DescriptionThisRoleGrantsFullWriteAccessToTheAuditLogConfigurationThisRoleGrantsFullWriteAccessToTheAuditLogConfiguration DescriptionThisRoleGrantsFullWriteAccessToTheAuditLogConfiguration = "This role grants full write access to the Audit log configuration."
)

func (e DescriptionThisRoleGrantsFullWriteAccessToTheAuditLogConfiguration) ToPointer() *DescriptionThisRoleGrantsFullWriteAccessToTheAuditLogConfiguration {
	return &e
}
func (e *DescriptionThisRoleGrantsFullWriteAccessToTheAuditLogConfiguration) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "This role grants full write access to the Audit log configuration.":
		*e = DescriptionThisRoleGrantsFullWriteAccessToTheAuditLogConfiguration(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DescriptionThisRoleGrantsFullWriteAccessToTheAuditLogConfiguration: %v", v)
	}
}

type AdminThisRoleGrantsFullWriteAccessToTheAuditLogConfiguration struct {
	Name        NameAuditLogsAdmin                                                 `json:"name"`
	Description DescriptionThisRoleGrantsFullWriteAccessToTheAuditLogConfiguration `json:"description"`
}

func (o *AdminThisRoleGrantsFullWriteAccessToTheAuditLogConfiguration) GetName() NameAuditLogsAdmin {
	if o == nil {
		return NameAuditLogsAdmin("")
	}
	return o.Name
}

func (o *AdminThisRoleGrantsFullWriteAccessToTheAuditLogConfiguration) GetDescription() DescriptionThisRoleGrantsFullWriteAccessToTheAuditLogConfiguration {
	if o == nil {
		return DescriptionThisRoleGrantsFullWriteAccessToTheAuditLogConfiguration("")
	}
	return o.Description
}

type RolesAuditLogs struct {
	Admin *AdminThisRoleGrantsFullWriteAccessToTheAuditLogConfiguration `json:"admin,omitempty"`
}

func (o *RolesAuditLogs) GetAdmin() *AdminThisRoleGrantsFullWriteAccessToTheAuditLogConfiguration {
	if o == nil {
		return nil
	}
	return o.Admin
}

type AuditLogs struct {
	Name  NameAuditLogs  `json:"name"`
	Roles RolesAuditLogs `json:"roles"`
}

func (o *AuditLogs) GetName() NameAuditLogs {
	if o == nil {
		return NameAuditLogs("")
	}
	return o.Name
}

func (o *AuditLogs) GetRoles() RolesAuditLogs {
	if o == nil {
		return RolesAuditLogs{}
	}
	return o.Roles
}

type NameIdentity string

const (
	NameIdentityIdentity NameIdentity = "Identity"
)

func (e NameIdentity) ToPointer() *NameIdentity {
	return &e
}
func (e *NameIdentity) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Identity":
		*e = NameIdentity(v)
		return nil
	default:
		return fmt.Errorf("invalid value for NameIdentity: %v", v)
	}
}

type NameIdentityAdmin string

const (
	NameIdentityAdminAdmin NameIdentityAdmin = "Admin"
)

func (e NameIdentityAdmin) ToPointer() *NameIdentityAdmin {
	return &e
}
func (e *NameIdentityAdmin) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Admin":
		*e = NameIdentityAdmin(v)
		return nil
	default:
		return fmt.Errorf("invalid value for NameIdentityAdmin: %v", v)
	}
}

type DescriptionThisRoleGrantsFullWriteAccessToTheIdentityConfiguration string

const (
	DescriptionThisRoleGrantsFullWriteAccessToTheIdentityConfigurationThisRoleGrantsFullWriteAccessToTheIdentityConfiguration DescriptionThisRoleGrantsFullWriteAccessToTheIdentityConfiguration = "This role grants full write access to the Identity configuration."
)

func (e DescriptionThisRoleGrantsFullWriteAccessToTheIdentityConfiguration) ToPointer() *DescriptionThisRoleGrantsFullWriteAccessToTheIdentityConfiguration {
	return &e
}
func (e *DescriptionThisRoleGrantsFullWriteAccessToTheIdentityConfiguration) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "This role grants full write access to the Identity configuration.":
		*e = DescriptionThisRoleGrantsFullWriteAccessToTheIdentityConfiguration(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DescriptionThisRoleGrantsFullWriteAccessToTheIdentityConfiguration: %v", v)
	}
}

type AdminThisRoleGrantsFullWriteAccessToTheIdentityConfiguration struct {
	Name        NameIdentityAdmin                                                  `json:"name"`
	Description DescriptionThisRoleGrantsFullWriteAccessToTheIdentityConfiguration `json:"description"`
}

func (o *AdminThisRoleGrantsFullWriteAccessToTheIdentityConfiguration) GetName() NameIdentityAdmin {
	if o == nil {
		return NameIdentityAdmin("")
	}
	return o.Name
}

func (o *AdminThisRoleGrantsFullWriteAccessToTheIdentityConfiguration) GetDescription() DescriptionThisRoleGrantsFullWriteAccessToTheIdentityConfiguration {
	if o == nil {
		return DescriptionThisRoleGrantsFullWriteAccessToTheIdentityConfiguration("")
	}
	return o.Description
}

type RolesIdentity struct {
	Admin *AdminThisRoleGrantsFullWriteAccessToTheIdentityConfiguration `json:"admin,omitempty"`
}

func (o *RolesIdentity) GetAdmin() *AdminThisRoleGrantsFullWriteAccessToTheIdentityConfiguration {
	if o == nil {
		return nil
	}
	return o.Admin
}

type Identity struct {
	Name  NameIdentity  `json:"name"`
	Roles RolesIdentity `json:"roles"`
}

func (o *Identity) GetName() NameIdentity {
	if o == nil {
		return NameIdentity("")
	}
	return o.Name
}

func (o *Identity) GetRoles() RolesIdentity {
	if o == nil {
		return RolesIdentity{}
	}
	return o.Roles
}

type NameMeshControlPlane string

const (
	NameMeshControlPlaneMeshControlPlane NameMeshControlPlane = "Mesh Control Plane"
)

func (e NameMeshControlPlane) ToPointer() *NameMeshControlPlane {
	return &e
}
func (e *NameMeshControlPlane) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Mesh Control Plane":
		*e = NameMeshControlPlane(v)
		return nil
	default:
		return fmt.Errorf("invalid value for NameMeshControlPlane: %v", v)
	}
}

type NameMeshControlPlaneAdmin string

const (
	NameMeshControlPlaneAdminAdmin NameMeshControlPlaneAdmin = "Admin"
)

func (e NameMeshControlPlaneAdmin) ToPointer() *NameMeshControlPlaneAdmin {
	return &e
}
func (e *NameMeshControlPlaneAdmin) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Admin":
		*e = NameMeshControlPlaneAdmin(v)
		return nil
	default:
		return fmt.Errorf("invalid value for NameMeshControlPlaneAdmin: %v", v)
	}
}

type DescriptionThisRoleGrantsFullWriteAccessToTheRelatedToMeshControlPlanes string

const (
	DescriptionThisRoleGrantsFullWriteAccessToTheRelatedToMeshControlPlanesThisRoleGrantsFullWriteAccessToTheRelatedToMeshControlPlanes DescriptionThisRoleGrantsFullWriteAccessToTheRelatedToMeshControlPlanes = "This role grants full write access to the related to Mesh control planes."
)

func (e DescriptionThisRoleGrantsFullWriteAccessToTheRelatedToMeshControlPlanes) ToPointer() *DescriptionThisRoleGrantsFullWriteAccessToTheRelatedToMeshControlPlanes {
	return &e
}
func (e *DescriptionThisRoleGrantsFullWriteAccessToTheRelatedToMeshControlPlanes) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "This role grants full write access to the related to Mesh control planes.":
		*e = DescriptionThisRoleGrantsFullWriteAccessToTheRelatedToMeshControlPlanes(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DescriptionThisRoleGrantsFullWriteAccessToTheRelatedToMeshControlPlanes: %v", v)
	}
}

type AdminThisRoleGrantsFullWriteAccessToTheRelatedToMeshControlPlanes struct {
	Name        NameMeshControlPlaneAdmin                                               `json:"name"`
	Description DescriptionThisRoleGrantsFullWriteAccessToTheRelatedToMeshControlPlanes `json:"description"`
}

func (o *AdminThisRoleGrantsFullWriteAccessToTheRelatedToMeshControlPlanes) GetName() NameMeshControlPlaneAdmin {
	if o == nil {
		return NameMeshControlPlaneAdmin("")
	}
	return o.Name
}

func (o *AdminThisRoleGrantsFullWriteAccessToTheRelatedToMeshControlPlanes) GetDescription() DescriptionThisRoleGrantsFullWriteAccessToTheRelatedToMeshControlPlanes {
	if o == nil {
		return DescriptionThisRoleGrantsFullWriteAccessToTheRelatedToMeshControlPlanes("")
	}
	return o.Description
}

type NameConnector string

const (
	NameConnectorConnector NameConnector = "Connector"
)

func (e NameConnector) ToPointer() *NameConnector {
	return &e
}
func (e *NameConnector) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Connector":
		*e = NameConnector(v)
		return nil
	default:
		return fmt.Errorf("invalid value for NameConnector: %v", v)
	}
}

type DescriptionThisRoleGrantsAMeshZoneToConnectToTheMeshControlPlaneInKonnect string

const (
	DescriptionThisRoleGrantsAMeshZoneToConnectToTheMeshControlPlaneInKonnectThisRoleGrantsAMeshZoneToConnectToTheMeshControlPlaneInKonnect DescriptionThisRoleGrantsAMeshZoneToConnectToTheMeshControlPlaneInKonnect = "This role grants a mesh zone to connect to the mesh control plane in Konnect."
)

func (e DescriptionThisRoleGrantsAMeshZoneToConnectToTheMeshControlPlaneInKonnect) ToPointer() *DescriptionThisRoleGrantsAMeshZoneToConnectToTheMeshControlPlaneInKonnect {
	return &e
}
func (e *DescriptionThisRoleGrantsAMeshZoneToConnectToTheMeshControlPlaneInKonnect) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "This role grants a mesh zone to connect to the mesh control plane in Konnect.":
		*e = DescriptionThisRoleGrantsAMeshZoneToConnectToTheMeshControlPlaneInKonnect(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DescriptionThisRoleGrantsAMeshZoneToConnectToTheMeshControlPlaneInKonnect: %v", v)
	}
}

type Connector struct {
	Name        NameConnector                                                             `json:"name"`
	Description DescriptionThisRoleGrantsAMeshZoneToConnectToTheMeshControlPlaneInKonnect `json:"description"`
}

func (o *Connector) GetName() NameConnector {
	if o == nil {
		return NameConnector("")
	}
	return o.Name
}

func (o *Connector) GetDescription() DescriptionThisRoleGrantsAMeshZoneToConnectToTheMeshControlPlaneInKonnect {
	if o == nil {
		return DescriptionThisRoleGrantsAMeshZoneToConnectToTheMeshControlPlaneInKonnect("")
	}
	return o.Description
}

type NameMeshControlPlaneCreator string

const (
	NameMeshControlPlaneCreatorCreator NameMeshControlPlaneCreator = "Creator"
)

func (e NameMeshControlPlaneCreator) ToPointer() *NameMeshControlPlaneCreator {
	return &e
}
func (e *NameMeshControlPlaneCreator) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Creator":
		*e = NameMeshControlPlaneCreator(v)
		return nil
	default:
		return fmt.Errorf("invalid value for NameMeshControlPlaneCreator: %v", v)
	}
}

type DescriptionThisRoleGrantsAccessToCreateNewMeshControlPlanes string

const (
	DescriptionThisRoleGrantsAccessToCreateNewMeshControlPlanesThisRoleGrantsAccessToCreateNewMeshControlPlanes DescriptionThisRoleGrantsAccessToCreateNewMeshControlPlanes = "This role grants access to create new Mesh control planes."
)

func (e DescriptionThisRoleGrantsAccessToCreateNewMeshControlPlanes) ToPointer() *DescriptionThisRoleGrantsAccessToCreateNewMeshControlPlanes {
	return &e
}
func (e *DescriptionThisRoleGrantsAccessToCreateNewMeshControlPlanes) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "This role grants access to create new Mesh control planes.":
		*e = DescriptionThisRoleGrantsAccessToCreateNewMeshControlPlanes(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DescriptionThisRoleGrantsAccessToCreateNewMeshControlPlanes: %v", v)
	}
}

type CreatorThisRoleGrantsAccessToCreateNewMeshControlPlanes struct {
	Name        NameMeshControlPlaneCreator                                 `json:"name"`
	Description DescriptionThisRoleGrantsAccessToCreateNewMeshControlPlanes `json:"description"`
}

func (o *CreatorThisRoleGrantsAccessToCreateNewMeshControlPlanes) GetName() NameMeshControlPlaneCreator {
	if o == nil {
		return NameMeshControlPlaneCreator("")
	}
	return o.Name
}

func (o *CreatorThisRoleGrantsAccessToCreateNewMeshControlPlanes) GetDescription() DescriptionThisRoleGrantsAccessToCreateNewMeshControlPlanes {
	if o == nil {
		return DescriptionThisRoleGrantsAccessToCreateNewMeshControlPlanes("")
	}
	return o.Description
}

type NameMeshControlPlaneViewer string

const (
	NameMeshControlPlaneViewerViewer NameMeshControlPlaneViewer = "Viewer"
)

func (e NameMeshControlPlaneViewer) ToPointer() *NameMeshControlPlaneViewer {
	return &e
}
func (e *NameMeshControlPlaneViewer) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Viewer":
		*e = NameMeshControlPlaneViewer(v)
		return nil
	default:
		return fmt.Errorf("invalid value for NameMeshControlPlaneViewer: %v", v)
	}
}

type DescriptionThisRoleGrantsAccessToReadOnlyPermissionsToMeshControlPlanes string

const (
	DescriptionThisRoleGrantsAccessToReadOnlyPermissionsToMeshControlPlanesThisRoleGrantsAccessToReadOnlyPermissionsToMeshControlPlanes DescriptionThisRoleGrantsAccessToReadOnlyPermissionsToMeshControlPlanes = "This role grants access to read-only permissions to Mesh control planes."
)

func (e DescriptionThisRoleGrantsAccessToReadOnlyPermissionsToMeshControlPlanes) ToPointer() *DescriptionThisRoleGrantsAccessToReadOnlyPermissionsToMeshControlPlanes {
	return &e
}
func (e *DescriptionThisRoleGrantsAccessToReadOnlyPermissionsToMeshControlPlanes) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "This role grants access to read-only permissions to Mesh control planes.":
		*e = DescriptionThisRoleGrantsAccessToReadOnlyPermissionsToMeshControlPlanes(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DescriptionThisRoleGrantsAccessToReadOnlyPermissionsToMeshControlPlanes: %v", v)
	}
}

type ViewerThisRoleGrantsAccessToReadOnlyPermissionsToMeshControlPlanes struct {
	Name        NameMeshControlPlaneViewer                                              `json:"name"`
	Description DescriptionThisRoleGrantsAccessToReadOnlyPermissionsToMeshControlPlanes `json:"description"`
}

func (o *ViewerThisRoleGrantsAccessToReadOnlyPermissionsToMeshControlPlanes) GetName() NameMeshControlPlaneViewer {
	if o == nil {
		return NameMeshControlPlaneViewer("")
	}
	return o.Name
}

func (o *ViewerThisRoleGrantsAccessToReadOnlyPermissionsToMeshControlPlanes) GetDescription() DescriptionThisRoleGrantsAccessToReadOnlyPermissionsToMeshControlPlanes {
	if o == nil {
		return DescriptionThisRoleGrantsAccessToReadOnlyPermissionsToMeshControlPlanes("")
	}
	return o.Description
}

type RolesMeshControlPlane struct {
	Admin     *AdminThisRoleGrantsFullWriteAccessToTheRelatedToMeshControlPlanes  `json:"admin,omitempty"`
	Connector *Connector                                                          `json:"connector,omitempty"`
	Creator   *CreatorThisRoleGrantsAccessToCreateNewMeshControlPlanes            `json:"creator,omitempty"`
	Viewer    *ViewerThisRoleGrantsAccessToReadOnlyPermissionsToMeshControlPlanes `json:"viewer,omitempty"`
}

func (o *RolesMeshControlPlane) GetAdmin() *AdminThisRoleGrantsFullWriteAccessToTheRelatedToMeshControlPlanes {
	if o == nil {
		return nil
	}
	return o.Admin
}

func (o *RolesMeshControlPlane) GetConnector() *Connector {
	if o == nil {
		return nil
	}
	return o.Connector
}

func (o *RolesMeshControlPlane) GetCreator() *CreatorThisRoleGrantsAccessToCreateNewMeshControlPlanes {
	if o == nil {
		return nil
	}
	return o.Creator
}

func (o *RolesMeshControlPlane) GetViewer() *ViewerThisRoleGrantsAccessToReadOnlyPermissionsToMeshControlPlanes {
	if o == nil {
		return nil
	}
	return o.Viewer
}

type MeshControlPlanes struct {
	Name  NameMeshControlPlane  `json:"name"`
	Roles RolesMeshControlPlane `json:"roles"`
}

func (o *MeshControlPlanes) GetName() NameMeshControlPlane {
	if o == nil {
		return NameMeshControlPlane("")
	}
	return o.Name
}

func (o *MeshControlPlanes) GetRoles() RolesMeshControlPlane {
	if o == nil {
		return RolesMeshControlPlane{}
	}
	return o.Roles
}

// Roles - The predefined, or system managed, roles.
type Roles struct {
	ControlPlanes     *ControlPlanes     `json:"control_planes,omitempty"`
	APIProducts       *APIProducts       `json:"api_products,omitempty"`
	AuditLogs         *AuditLogs         `json:"audit_logs,omitempty"`
	Identity          *Identity          `json:"identity,omitempty"`
	MeshControlPlanes *MeshControlPlanes `json:"mesh_control_planes,omitempty"`
}

func (o *Roles) GetControlPlanes() *ControlPlanes {
	if o == nil {
		return nil
	}
	return o.ControlPlanes
}

func (o *Roles) GetAPIProducts() *APIProducts {
	if o == nil {
		return nil
	}
	return o.APIProducts
}

func (o *Roles) GetAuditLogs() *AuditLogs {
	if o == nil {
		return nil
	}
	return o.AuditLogs
}

func (o *Roles) GetIdentity() *Identity {
	if o == nil {
		return nil
	}
	return o.Identity
}

func (o *Roles) GetMeshControlPlanes() *MeshControlPlanes {
	if o == nil {
		return nil
	}
	return o.MeshControlPlanes
}
