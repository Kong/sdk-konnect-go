// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"errors"
	"fmt"
	"mockserver/internal/sdk/utils"
	"time"
)

// ServiceReferenceResponse - A gateway service that implements an API
type ServiceReferenceResponse struct {
	// Contains a unique identifier used for this resource.
	ID string `json:"id"`
	// An ISO-8601 timestamp representation of entity creation date.
	CreatedAt time.Time `json:"created_at"`
	// An ISO-8601 timestamp representation of entity update date.
	UpdatedAt time.Time `json:"updated_at"`
	// A Gateway service that implements an API
	Service *APIImplementationService `json:"service,omitempty"`
}

func (s ServiceReferenceResponse) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *ServiceReferenceResponse) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *ServiceReferenceResponse) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ServiceReferenceResponse) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *ServiceReferenceResponse) GetUpdatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.UpdatedAt
}

func (o *ServiceReferenceResponse) GetService() *APIImplementationService {
	if o == nil {
		return nil
	}
	return o.Service
}

type APIImplementationResponseType string

const (
	APIImplementationResponseTypeServiceReferenceResponse APIImplementationResponseType = "Service Reference_response"
)

// APIImplementationResponse - An entity that implements an API
type APIImplementationResponse struct {
	ServiceReferenceResponse *ServiceReferenceResponse `queryParam:"inline"`

	Type APIImplementationResponseType
}

func CreateAPIImplementationResponseServiceReferenceResponse(serviceReferenceResponse ServiceReferenceResponse) APIImplementationResponse {
	typ := APIImplementationResponseTypeServiceReferenceResponse

	return APIImplementationResponse{
		ServiceReferenceResponse: &serviceReferenceResponse,
		Type:                     typ,
	}
}

func (u *APIImplementationResponse) UnmarshalJSON(data []byte) error {

	var serviceReferenceResponse ServiceReferenceResponse = ServiceReferenceResponse{}
	if err := utils.UnmarshalJSON(data, &serviceReferenceResponse, "", true, true); err == nil {
		u.ServiceReferenceResponse = &serviceReferenceResponse
		u.Type = APIImplementationResponseTypeServiceReferenceResponse
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for APIImplementationResponse", string(data))
}

func (u APIImplementationResponse) MarshalJSON() ([]byte, error) {
	if u.ServiceReferenceResponse != nil {
		return utils.MarshalJSON(u.ServiceReferenceResponse, "", true)
	}

	return nil, errors.New("could not marshal union type APIImplementationResponse: all fields are null")
}
