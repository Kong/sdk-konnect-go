// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

type ListRolesResponseName string

const (
	ListRolesResponseNameServices ListRolesResponseName = "Services"
)

func (e ListRolesResponseName) ToPointer() *ListRolesResponseName {
	return &e
}
func (e *ListRolesResponseName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Services":
		*e = ListRolesResponseName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListRolesResponseName: %v", v)
	}
}

type NameAPIViewer string

const (
	NameAPIViewerAPIViewer NameAPIViewer = "API Viewer"
)

func (e NameAPIViewer) ToPointer() *NameAPIViewer {
	return &e
}
func (e *NameAPIViewer) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "API Viewer":
		*e = NameAPIViewer(v)
		return nil
	default:
		return fmt.Errorf("invalid value for NameAPIViewer: %v", v)
	}
}

type DescriptionAPIViewersHaveReadOnlyAccessToTheDocumentationOfAServiceInAPortal string

const (
	DescriptionAPIViewersHaveReadOnlyAccessToTheDocumentationOfAServiceInAPortalAPIViewersHaveReadOnlyAccessToTheDocumentationOfAServiceInAPortal DescriptionAPIViewersHaveReadOnlyAccessToTheDocumentationOfAServiceInAPortal = "API Viewers have read-only access to the documentation of a service in a portal"
)

func (e DescriptionAPIViewersHaveReadOnlyAccessToTheDocumentationOfAServiceInAPortal) ToPointer() *DescriptionAPIViewersHaveReadOnlyAccessToTheDocumentationOfAServiceInAPortal {
	return &e
}
func (e *DescriptionAPIViewersHaveReadOnlyAccessToTheDocumentationOfAServiceInAPortal) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "API Viewers have read-only access to the documentation of a service in a portal":
		*e = DescriptionAPIViewersHaveReadOnlyAccessToTheDocumentationOfAServiceInAPortal(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DescriptionAPIViewersHaveReadOnlyAccessToTheDocumentationOfAServiceInAPortal: %v", v)
	}
}

type Apiviewer struct {
	Name        NameAPIViewer                                                                `json:"name"`
	Description DescriptionAPIViewersHaveReadOnlyAccessToTheDocumentationOfAServiceInAPortal `json:"description"`
}

func (o *Apiviewer) GetName() NameAPIViewer {
	if o == nil {
		return NameAPIViewer("")
	}
	return o.Name
}

func (o *Apiviewer) GetDescription() DescriptionAPIViewersHaveReadOnlyAccessToTheDocumentationOfAServiceInAPortal {
	if o == nil {
		return DescriptionAPIViewersHaveReadOnlyAccessToTheDocumentationOfAServiceInAPortal("")
	}
	return o.Description
}

type NameAPIConsumer string

const (
	NameAPIConsumerAPIConsumer NameAPIConsumer = "API Consumer"
)

func (e NameAPIConsumer) ToPointer() *NameAPIConsumer {
	return &e
}
func (e *NameAPIConsumer) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "API Consumer":
		*e = NameAPIConsumer(v)
		return nil
	default:
		return fmt.Errorf("invalid value for NameAPIConsumer: %v", v)
	}
}

type DescriptionAPIConsumersCanMakeCallsToTheGivenService string

const (
	DescriptionAPIConsumersCanMakeCallsToTheGivenServiceAPIConsumersCanMakeCallsToTheGivenService DescriptionAPIConsumersCanMakeCallsToTheGivenService = "API Consumers can make calls to the given service"
)

func (e DescriptionAPIConsumersCanMakeCallsToTheGivenService) ToPointer() *DescriptionAPIConsumersCanMakeCallsToTheGivenService {
	return &e
}
func (e *DescriptionAPIConsumersCanMakeCallsToTheGivenService) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "API Consumers can make calls to the given service":
		*e = DescriptionAPIConsumersCanMakeCallsToTheGivenService(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DescriptionAPIConsumersCanMakeCallsToTheGivenService: %v", v)
	}
}

type Apiconsumer struct {
	Name        NameAPIConsumer                                      `json:"name"`
	Description DescriptionAPIConsumersCanMakeCallsToTheGivenService `json:"description"`
}

func (o *Apiconsumer) GetName() NameAPIConsumer {
	if o == nil {
		return NameAPIConsumer("")
	}
	return o.Name
}

func (o *Apiconsumer) GetDescription() DescriptionAPIConsumersCanMakeCallsToTheGivenService {
	if o == nil {
		return DescriptionAPIConsumersCanMakeCallsToTheGivenService("")
	}
	return o.Description
}

type ListRolesResponseRoles struct {
	Apiviewer   Apiviewer   `json:"apiviewer"`
	Apiconsumer Apiconsumer `json:"apiconsumer"`
}

func (o *ListRolesResponseRoles) GetApiviewer() Apiviewer {
	if o == nil {
		return Apiviewer{}
	}
	return o.Apiviewer
}

func (o *ListRolesResponseRoles) GetApiconsumer() Apiconsumer {
	if o == nil {
		return Apiconsumer{}
	}
	return o.Apiconsumer
}

type Services struct {
	Name  ListRolesResponseName  `json:"name"`
	Roles ListRolesResponseRoles `json:"roles"`
}

func (o *Services) GetName() ListRolesResponseName {
	if o == nil {
		return ListRolesResponseName("")
	}
	return o.Name
}

func (o *Services) GetRoles() ListRolesResponseRoles {
	if o == nil {
		return ListRolesResponseRoles{}
	}
	return o.Roles
}

// ListRolesResponse - The set of roles available to associate with resources and assign to teams.
type ListRolesResponse struct {
	Services Services `json:"services"`
}

func (o *ListRolesResponse) GetServices() Services {
	if o == nil {
		return Services{}
	}
	return o.Services
}
