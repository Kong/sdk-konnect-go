// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"errors"
	"fmt"
	"mockserver/internal/sdk/utils"
)

type PartialType string

const (
	PartialTypeRedisCe PartialType = "redis-ce"
	PartialTypeRedisEe PartialType = "redis-ee"
)

type Partial struct {
	PartialRedisCe *PartialRedisCe `queryParam:"inline"`
	PartialRedisEe *PartialRedisEe `queryParam:"inline"`

	Type PartialType
}

func CreatePartialRedisCe(redisCe PartialRedisCe) Partial {
	typ := PartialTypeRedisCe

	typStr := PartialRedisCeType(typ)
	redisCe.Type = typStr

	return Partial{
		PartialRedisCe: &redisCe,
		Type:           typ,
	}
}

func CreatePartialRedisEe(redisEe PartialRedisEe) Partial {
	typ := PartialTypeRedisEe

	typStr := PartialRedisEeType(typ)
	redisEe.Type = typStr

	return Partial{
		PartialRedisEe: &redisEe,
		Type:           typ,
	}
}

func (u *Partial) UnmarshalJSON(data []byte) error {

	type discriminator struct {
		Type string `json:"type"`
	}

	dis := new(discriminator)
	if err := json.Unmarshal(data, &dis); err != nil {
		return fmt.Errorf("could not unmarshal discriminator: %w", err)
	}

	switch dis.Type {
	case "redis-ce":
		partialRedisCe := new(PartialRedisCe)
		if err := utils.UnmarshalJSON(data, &partialRedisCe, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == redis-ce) type PartialRedisCe within Partial: %w", string(data), err)
		}

		u.PartialRedisCe = partialRedisCe
		u.Type = PartialTypeRedisCe
		return nil
	case "redis-ee":
		partialRedisEe := new(PartialRedisEe)
		if err := utils.UnmarshalJSON(data, &partialRedisEe, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == redis-ee) type PartialRedisEe within Partial: %w", string(data), err)
		}

		u.PartialRedisEe = partialRedisEe
		u.Type = PartialTypeRedisEe
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for Partial", string(data))
}

func (u Partial) MarshalJSON() ([]byte, error) {
	if u.PartialRedisCe != nil {
		return utils.MarshalJSON(u.PartialRedisCe, "", true)
	}

	if u.PartialRedisEe != nil {
		return utils.MarshalJSON(u.PartialRedisEe, "", true)
	}

	return nil, errors.New("could not marshal union type Partial: all fields are null")
}
