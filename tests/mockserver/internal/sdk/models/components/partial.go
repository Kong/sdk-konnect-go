// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"errors"
	"fmt"
	"mockserver/internal/sdk/utils"
)

type PartialType string

const (
	PartialTypeRedisCe PartialType = "redis-ce"
	PartialTypeRedisEe PartialType = "redis-ee"
)

type Partial struct {
	PartialRedisCE *PartialRedisCE `queryParam:"inline"`
	PartialRedisEE *PartialRedisEE `queryParam:"inline"`

	Type PartialType
}

func CreatePartialRedisCe(redisCe PartialRedisCE) Partial {
	typ := PartialTypeRedisCe

	typStr := PartialRedisCEType(typ)
	redisCe.Type = typStr

	return Partial{
		PartialRedisCE: &redisCe,
		Type:           typ,
	}
}

func CreatePartialRedisEe(redisEe PartialRedisEE) Partial {
	typ := PartialTypeRedisEe

	typStr := PartialRedisEEType(typ)
	redisEe.Type = typStr

	return Partial{
		PartialRedisEE: &redisEe,
		Type:           typ,
	}
}

func (u *Partial) UnmarshalJSON(data []byte) error {

	type discriminator struct {
		Type string `json:"type"`
	}

	dis := new(discriminator)
	if err := json.Unmarshal(data, &dis); err != nil {
		return fmt.Errorf("could not unmarshal discriminator: %w", err)
	}

	switch dis.Type {
	case "redis-ce":
		partialRedisCE := new(PartialRedisCE)
		if err := utils.UnmarshalJSON(data, &partialRedisCE, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == redis-ce) type PartialRedisCE within Partial: %w", string(data), err)
		}

		u.PartialRedisCE = partialRedisCE
		u.Type = PartialTypeRedisCe
		return nil
	case "redis-ee":
		partialRedisEE := new(PartialRedisEE)
		if err := utils.UnmarshalJSON(data, &partialRedisEE, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == redis-ee) type PartialRedisEE within Partial: %w", string(data), err)
		}

		u.PartialRedisEE = partialRedisEE
		u.Type = PartialTypeRedisEe
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for Partial", string(data))
}

func (u Partial) MarshalJSON() ([]byte, error) {
	if u.PartialRedisCE != nil {
		return utils.MarshalJSON(u.PartialRedisCE, "", true)
	}

	if u.PartialRedisEE != nil {
		return utils.MarshalJSON(u.PartialRedisEE, "", true)
	}

	return nil, errors.New("could not marshal union type Partial: all fields are null")
}
