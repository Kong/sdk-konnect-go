// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"errors"
	"fmt"
	"mockserver/internal/sdk/utils"
	"time"
)

// DcrProviderResponseDcrProviderHTTPDcrConfig - The DCR configuration for this DCR provider.
type DcrProviderResponseDcrProviderHTTPDcrConfig struct {
}

// DCRProviderResponseDCRProviderHTTP - A DCR provider for HTTP -- only properties not included in DcrProviderBase
type DCRProviderResponseDCRProviderHTTP struct {
	// The type of DCR provider. Can be one of the following - auth0, azureAd, curity, okta, http
	ProviderType string `json:"provider_type"`
	// The DCR configuration for this DCR provider.
	DcrConfig DcrProviderResponseDcrProviderHTTPDcrConfig `json:"dcr_config"`
	// Contains a unique identifier used for this resource.
	ID string `json:"id"`
	// The name of the DCR provider. This is used to identify the DCR provider in the Konnect UI.
	//
	Name string `json:"name"`
	// The display name of the DCR provider. This is used to identify the DCR provider in the Portal UI.
	//
	DisplayName *string `json:"display_name,omitempty"`
	// The issuer of the DCR provider.
	Issuer string `json:"issuer"`
	// At least one active auth strategy is using this DCR provider.
	Active bool `json:"active"`
	// Labels store metadata of an entity that can be used for filtering an entity list or for searching across entity types.
	//
	// Keys must be of length 1-63 characters, and cannot start with "kong", "konnect", "mesh", "kic", or "_".
	//
	Labels map[string]string `json:"labels,omitempty"`
	// An ISO-8601 timestamp representation of entity creation date.
	CreatedAt time.Time `json:"created_at"`
	// An ISO-8601 timestamp representation of entity update date.
	UpdatedAt time.Time `json:"updated_at"`
}

func (d DCRProviderResponseDCRProviderHTTP) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DCRProviderResponseDCRProviderHTTP) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *DCRProviderResponseDCRProviderHTTP) GetProviderType() string {
	if o == nil {
		return ""
	}
	return o.ProviderType
}

func (o *DCRProviderResponseDCRProviderHTTP) GetDcrConfig() DcrProviderResponseDcrProviderHTTPDcrConfig {
	if o == nil {
		return DcrProviderResponseDcrProviderHTTPDcrConfig{}
	}
	return o.DcrConfig
}

func (o *DCRProviderResponseDCRProviderHTTP) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *DCRProviderResponseDCRProviderHTTP) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *DCRProviderResponseDCRProviderHTTP) GetDisplayName() *string {
	if o == nil {
		return nil
	}
	return o.DisplayName
}

func (o *DCRProviderResponseDCRProviderHTTP) GetIssuer() string {
	if o == nil {
		return ""
	}
	return o.Issuer
}

func (o *DCRProviderResponseDCRProviderHTTP) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *DCRProviderResponseDCRProviderHTTP) GetLabels() map[string]string {
	if o == nil {
		return nil
	}
	return o.Labels
}

func (o *DCRProviderResponseDCRProviderHTTP) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *DCRProviderResponseDCRProviderHTTP) GetUpdatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.UpdatedAt
}

// DcrProviderResponseDcrProviderOktaDcrConfig - The DCR configuration for this DCR provider.
type DcrProviderResponseDcrProviderOktaDcrConfig struct {
}

// DCRProviderResponseDCRProviderOKTA - A DCR provider for Okta -- only properties not included in DcrProviderBase
type DCRProviderResponseDCRProviderOKTA struct {
	// The type of DCR provider. Can be one of the following - auth0, azureAd, curity, okta, http
	ProviderType string `json:"provider_type"`
	// The DCR configuration for this DCR provider.
	DcrConfig DcrProviderResponseDcrProviderOktaDcrConfig `json:"dcr_config"`
	// Contains a unique identifier used for this resource.
	ID string `json:"id"`
	// The name of the DCR provider. This is used to identify the DCR provider in the Konnect UI.
	//
	Name string `json:"name"`
	// The display name of the DCR provider. This is used to identify the DCR provider in the Portal UI.
	//
	DisplayName *string `json:"display_name,omitempty"`
	// The issuer of the DCR provider.
	Issuer string `json:"issuer"`
	// At least one active auth strategy is using this DCR provider.
	Active bool `json:"active"`
	// Labels store metadata of an entity that can be used for filtering an entity list or for searching across entity types.
	//
	// Keys must be of length 1-63 characters, and cannot start with "kong", "konnect", "mesh", "kic", or "_".
	//
	Labels map[string]string `json:"labels,omitempty"`
	// An ISO-8601 timestamp representation of entity creation date.
	CreatedAt time.Time `json:"created_at"`
	// An ISO-8601 timestamp representation of entity update date.
	UpdatedAt time.Time `json:"updated_at"`
}

func (d DCRProviderResponseDCRProviderOKTA) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DCRProviderResponseDCRProviderOKTA) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *DCRProviderResponseDCRProviderOKTA) GetProviderType() string {
	if o == nil {
		return ""
	}
	return o.ProviderType
}

func (o *DCRProviderResponseDCRProviderOKTA) GetDcrConfig() DcrProviderResponseDcrProviderOktaDcrConfig {
	if o == nil {
		return DcrProviderResponseDcrProviderOktaDcrConfig{}
	}
	return o.DcrConfig
}

func (o *DCRProviderResponseDCRProviderOKTA) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *DCRProviderResponseDCRProviderOKTA) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *DCRProviderResponseDCRProviderOKTA) GetDisplayName() *string {
	if o == nil {
		return nil
	}
	return o.DisplayName
}

func (o *DCRProviderResponseDCRProviderOKTA) GetIssuer() string {
	if o == nil {
		return ""
	}
	return o.Issuer
}

func (o *DCRProviderResponseDCRProviderOKTA) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *DCRProviderResponseDCRProviderOKTA) GetLabels() map[string]string {
	if o == nil {
		return nil
	}
	return o.Labels
}

func (o *DCRProviderResponseDCRProviderOKTA) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *DCRProviderResponseDCRProviderOKTA) GetUpdatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.UpdatedAt
}

// DcrProviderResponseDcrProviderCurityDcrConfig - The DCR configuration for this DCR provider.
type DcrProviderResponseDcrProviderCurityDcrConfig struct {
}

// DCRProviderResponseDCRProviderCurity - A DCR provider for Curity -- only properties not included in DcrProviderBase
type DCRProviderResponseDCRProviderCurity struct {
	// The type of DCR provider. Can be one of the following - auth0, azureAd, curity, okta, http
	ProviderType string `json:"provider_type"`
	// The DCR configuration for this DCR provider.
	DcrConfig DcrProviderResponseDcrProviderCurityDcrConfig `json:"dcr_config"`
	// Contains a unique identifier used for this resource.
	ID string `json:"id"`
	// The name of the DCR provider. This is used to identify the DCR provider in the Konnect UI.
	//
	Name string `json:"name"`
	// The display name of the DCR provider. This is used to identify the DCR provider in the Portal UI.
	//
	DisplayName *string `json:"display_name,omitempty"`
	// The issuer of the DCR provider.
	Issuer string `json:"issuer"`
	// At least one active auth strategy is using this DCR provider.
	Active bool `json:"active"`
	// Labels store metadata of an entity that can be used for filtering an entity list or for searching across entity types.
	//
	// Keys must be of length 1-63 characters, and cannot start with "kong", "konnect", "mesh", "kic", or "_".
	//
	Labels map[string]string `json:"labels,omitempty"`
	// An ISO-8601 timestamp representation of entity creation date.
	CreatedAt time.Time `json:"created_at"`
	// An ISO-8601 timestamp representation of entity update date.
	UpdatedAt time.Time `json:"updated_at"`
}

func (d DCRProviderResponseDCRProviderCurity) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DCRProviderResponseDCRProviderCurity) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *DCRProviderResponseDCRProviderCurity) GetProviderType() string {
	if o == nil {
		return ""
	}
	return o.ProviderType
}

func (o *DCRProviderResponseDCRProviderCurity) GetDcrConfig() DcrProviderResponseDcrProviderCurityDcrConfig {
	if o == nil {
		return DcrProviderResponseDcrProviderCurityDcrConfig{}
	}
	return o.DcrConfig
}

func (o *DCRProviderResponseDCRProviderCurity) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *DCRProviderResponseDCRProviderCurity) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *DCRProviderResponseDCRProviderCurity) GetDisplayName() *string {
	if o == nil {
		return nil
	}
	return o.DisplayName
}

func (o *DCRProviderResponseDCRProviderCurity) GetIssuer() string {
	if o == nil {
		return ""
	}
	return o.Issuer
}

func (o *DCRProviderResponseDCRProviderCurity) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *DCRProviderResponseDCRProviderCurity) GetLabels() map[string]string {
	if o == nil {
		return nil
	}
	return o.Labels
}

func (o *DCRProviderResponseDCRProviderCurity) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *DCRProviderResponseDCRProviderCurity) GetUpdatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.UpdatedAt
}

// DcrProviderResponseDcrProviderAzureAdDcrConfig - The DCR configuration for this DCR provider.
type DcrProviderResponseDcrProviderAzureAdDcrConfig struct {
}

// DCRProviderResponseDCRProviderAzureAD - A DCR provider for Azure AD -- only properties not included in DcrProviderBase
type DCRProviderResponseDCRProviderAzureAD struct {
	// The type of DCR provider. Can be one of the following - auth0, azureAd, curity, okta, http
	ProviderType string `json:"provider_type"`
	// The DCR configuration for this DCR provider.
	DcrConfig DcrProviderResponseDcrProviderAzureAdDcrConfig `json:"dcr_config"`
	// Contains a unique identifier used for this resource.
	ID string `json:"id"`
	// The name of the DCR provider. This is used to identify the DCR provider in the Konnect UI.
	//
	Name string `json:"name"`
	// The display name of the DCR provider. This is used to identify the DCR provider in the Portal UI.
	//
	DisplayName *string `json:"display_name,omitempty"`
	// The issuer of the DCR provider.
	Issuer string `json:"issuer"`
	// At least one active auth strategy is using this DCR provider.
	Active bool `json:"active"`
	// Labels store metadata of an entity that can be used for filtering an entity list or for searching across entity types.
	//
	// Keys must be of length 1-63 characters, and cannot start with "kong", "konnect", "mesh", "kic", or "_".
	//
	Labels map[string]string `json:"labels,omitempty"`
	// An ISO-8601 timestamp representation of entity creation date.
	CreatedAt time.Time `json:"created_at"`
	// An ISO-8601 timestamp representation of entity update date.
	UpdatedAt time.Time `json:"updated_at"`
}

func (d DCRProviderResponseDCRProviderAzureAD) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DCRProviderResponseDCRProviderAzureAD) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *DCRProviderResponseDCRProviderAzureAD) GetProviderType() string {
	if o == nil {
		return ""
	}
	return o.ProviderType
}

func (o *DCRProviderResponseDCRProviderAzureAD) GetDcrConfig() DcrProviderResponseDcrProviderAzureAdDcrConfig {
	if o == nil {
		return DcrProviderResponseDcrProviderAzureAdDcrConfig{}
	}
	return o.DcrConfig
}

func (o *DCRProviderResponseDCRProviderAzureAD) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *DCRProviderResponseDCRProviderAzureAD) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *DCRProviderResponseDCRProviderAzureAD) GetDisplayName() *string {
	if o == nil {
		return nil
	}
	return o.DisplayName
}

func (o *DCRProviderResponseDCRProviderAzureAD) GetIssuer() string {
	if o == nil {
		return ""
	}
	return o.Issuer
}

func (o *DCRProviderResponseDCRProviderAzureAD) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *DCRProviderResponseDCRProviderAzureAD) GetLabels() map[string]string {
	if o == nil {
		return nil
	}
	return o.Labels
}

func (o *DCRProviderResponseDCRProviderAzureAD) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *DCRProviderResponseDCRProviderAzureAD) GetUpdatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.UpdatedAt
}

// DcrProviderResponseDcrProviderAuth0DcrConfig - The DCR configuration for this DCR provider.
type DcrProviderResponseDcrProviderAuth0DcrConfig struct {
}

// DCRProviderResponseDCRProviderAuth0 - A DCR provider for Auth0 -- only properties not included in DcrProviderBase
type DCRProviderResponseDCRProviderAuth0 struct {
	// The type of DCR provider. Can be one of the following - auth0, azureAd, curity, okta, http
	ProviderType string `json:"provider_type"`
	// The DCR configuration for this DCR provider.
	DcrConfig DcrProviderResponseDcrProviderAuth0DcrConfig `json:"dcr_config"`
	// Contains a unique identifier used for this resource.
	ID string `json:"id"`
	// The name of the DCR provider. This is used to identify the DCR provider in the Konnect UI.
	//
	Name string `json:"name"`
	// The display name of the DCR provider. This is used to identify the DCR provider in the Portal UI.
	//
	DisplayName *string `json:"display_name,omitempty"`
	// The issuer of the DCR provider.
	Issuer string `json:"issuer"`
	// At least one active auth strategy is using this DCR provider.
	Active bool `json:"active"`
	// Labels store metadata of an entity that can be used for filtering an entity list or for searching across entity types.
	//
	// Keys must be of length 1-63 characters, and cannot start with "kong", "konnect", "mesh", "kic", or "_".
	//
	Labels map[string]string `json:"labels,omitempty"`
	// An ISO-8601 timestamp representation of entity creation date.
	CreatedAt time.Time `json:"created_at"`
	// An ISO-8601 timestamp representation of entity update date.
	UpdatedAt time.Time `json:"updated_at"`
}

func (d DCRProviderResponseDCRProviderAuth0) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DCRProviderResponseDCRProviderAuth0) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *DCRProviderResponseDCRProviderAuth0) GetProviderType() string {
	if o == nil {
		return ""
	}
	return o.ProviderType
}

func (o *DCRProviderResponseDCRProviderAuth0) GetDcrConfig() DcrProviderResponseDcrProviderAuth0DcrConfig {
	if o == nil {
		return DcrProviderResponseDcrProviderAuth0DcrConfig{}
	}
	return o.DcrConfig
}

func (o *DCRProviderResponseDCRProviderAuth0) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *DCRProviderResponseDCRProviderAuth0) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *DCRProviderResponseDCRProviderAuth0) GetDisplayName() *string {
	if o == nil {
		return nil
	}
	return o.DisplayName
}

func (o *DCRProviderResponseDCRProviderAuth0) GetIssuer() string {
	if o == nil {
		return ""
	}
	return o.Issuer
}

func (o *DCRProviderResponseDCRProviderAuth0) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *DCRProviderResponseDCRProviderAuth0) GetLabels() map[string]string {
	if o == nil {
		return nil
	}
	return o.Labels
}

func (o *DCRProviderResponseDCRProviderAuth0) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *DCRProviderResponseDCRProviderAuth0) GetUpdatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.UpdatedAt
}

type DcrProviderResponseType string

const (
	DcrProviderResponseTypeDcrProviderAuth0   DcrProviderResponseType = "DcrProviderAuth0"
	DcrProviderResponseTypeDcrProviderAzureAd DcrProviderResponseType = "DcrProviderAzureAd"
	DcrProviderResponseTypeDcrProviderCurity  DcrProviderResponseType = "DcrProviderCurity"
	DcrProviderResponseTypeDcrProviderOkta    DcrProviderResponseType = "DcrProviderOkta"
	DcrProviderResponseTypeDcrProviderHTTP    DcrProviderResponseType = "DcrProviderHttp"
)

// DcrProviderResponse - A response containing a single DCR provider object. Sensitive fields will be removed from the response.
type DcrProviderResponse struct {
	DCRProviderResponseDCRProviderAuth0   *DCRProviderResponseDCRProviderAuth0   `queryParam:"inline"`
	DCRProviderResponseDCRProviderAzureAD *DCRProviderResponseDCRProviderAzureAD `queryParam:"inline"`
	DCRProviderResponseDCRProviderCurity  *DCRProviderResponseDCRProviderCurity  `queryParam:"inline"`
	DCRProviderResponseDCRProviderOKTA    *DCRProviderResponseDCRProviderOKTA    `queryParam:"inline"`
	DCRProviderResponseDCRProviderHTTP    *DCRProviderResponseDCRProviderHTTP    `queryParam:"inline"`

	Type DcrProviderResponseType
}

func CreateDcrProviderResponseDcrProviderAuth0(dcrProviderAuth0 DCRProviderResponseDCRProviderAuth0) DcrProviderResponse {
	typ := DcrProviderResponseTypeDcrProviderAuth0

	typStr := string(typ)
	dcrProviderAuth0.ProviderType = typStr

	return DcrProviderResponse{
		DCRProviderResponseDCRProviderAuth0: &dcrProviderAuth0,
		Type:                                typ,
	}
}

func CreateDcrProviderResponseDcrProviderAzureAd(dcrProviderAzureAd DCRProviderResponseDCRProviderAzureAD) DcrProviderResponse {
	typ := DcrProviderResponseTypeDcrProviderAzureAd

	typStr := string(typ)
	dcrProviderAzureAd.ProviderType = typStr

	return DcrProviderResponse{
		DCRProviderResponseDCRProviderAzureAD: &dcrProviderAzureAd,
		Type:                                  typ,
	}
}

func CreateDcrProviderResponseDcrProviderCurity(dcrProviderCurity DCRProviderResponseDCRProviderCurity) DcrProviderResponse {
	typ := DcrProviderResponseTypeDcrProviderCurity

	typStr := string(typ)
	dcrProviderCurity.ProviderType = typStr

	return DcrProviderResponse{
		DCRProviderResponseDCRProviderCurity: &dcrProviderCurity,
		Type:                                 typ,
	}
}

func CreateDcrProviderResponseDcrProviderOkta(dcrProviderOkta DCRProviderResponseDCRProviderOKTA) DcrProviderResponse {
	typ := DcrProviderResponseTypeDcrProviderOkta

	typStr := string(typ)
	dcrProviderOkta.ProviderType = typStr

	return DcrProviderResponse{
		DCRProviderResponseDCRProviderOKTA: &dcrProviderOkta,
		Type:                               typ,
	}
}

func CreateDcrProviderResponseDcrProviderHTTP(dcrProviderHTTP DCRProviderResponseDCRProviderHTTP) DcrProviderResponse {
	typ := DcrProviderResponseTypeDcrProviderHTTP

	typStr := string(typ)
	dcrProviderHTTP.ProviderType = typStr

	return DcrProviderResponse{
		DCRProviderResponseDCRProviderHTTP: &dcrProviderHTTP,
		Type:                               typ,
	}
}

func (u *DcrProviderResponse) UnmarshalJSON(data []byte) error {

	type discriminator struct {
		ProviderType string `json:"provider_type"`
	}

	dis := new(discriminator)
	if err := json.Unmarshal(data, &dis); err != nil {
		return fmt.Errorf("could not unmarshal discriminator: %w", err)
	}

	switch dis.ProviderType {
	case "DcrProviderAuth0":
		dcrProviderResponseDCRProviderAuth0 := new(DCRProviderResponseDCRProviderAuth0)
		if err := utils.UnmarshalJSON(data, &dcrProviderResponseDCRProviderAuth0, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (ProviderType == DcrProviderAuth0) type DCRProviderResponseDCRProviderAuth0 within DcrProviderResponse: %w", string(data), err)
		}

		u.DCRProviderResponseDCRProviderAuth0 = dcrProviderResponseDCRProviderAuth0
		u.Type = DcrProviderResponseTypeDcrProviderAuth0
		return nil
	case "DcrProviderAzureAd":
		dcrProviderResponseDCRProviderAzureAD := new(DCRProviderResponseDCRProviderAzureAD)
		if err := utils.UnmarshalJSON(data, &dcrProviderResponseDCRProviderAzureAD, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (ProviderType == DcrProviderAzureAd) type DCRProviderResponseDCRProviderAzureAD within DcrProviderResponse: %w", string(data), err)
		}

		u.DCRProviderResponseDCRProviderAzureAD = dcrProviderResponseDCRProviderAzureAD
		u.Type = DcrProviderResponseTypeDcrProviderAzureAd
		return nil
	case "DcrProviderCurity":
		dcrProviderResponseDCRProviderCurity := new(DCRProviderResponseDCRProviderCurity)
		if err := utils.UnmarshalJSON(data, &dcrProviderResponseDCRProviderCurity, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (ProviderType == DcrProviderCurity) type DCRProviderResponseDCRProviderCurity within DcrProviderResponse: %w", string(data), err)
		}

		u.DCRProviderResponseDCRProviderCurity = dcrProviderResponseDCRProviderCurity
		u.Type = DcrProviderResponseTypeDcrProviderCurity
		return nil
	case "DcrProviderOkta":
		dcrProviderResponseDCRProviderOKTA := new(DCRProviderResponseDCRProviderOKTA)
		if err := utils.UnmarshalJSON(data, &dcrProviderResponseDCRProviderOKTA, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (ProviderType == DcrProviderOkta) type DCRProviderResponseDCRProviderOKTA within DcrProviderResponse: %w", string(data), err)
		}

		u.DCRProviderResponseDCRProviderOKTA = dcrProviderResponseDCRProviderOKTA
		u.Type = DcrProviderResponseTypeDcrProviderOkta
		return nil
	case "DcrProviderHttp":
		dcrProviderResponseDCRProviderHTTP := new(DCRProviderResponseDCRProviderHTTP)
		if err := utils.UnmarshalJSON(data, &dcrProviderResponseDCRProviderHTTP, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (ProviderType == DcrProviderHttp) type DCRProviderResponseDCRProviderHTTP within DcrProviderResponse: %w", string(data), err)
		}

		u.DCRProviderResponseDCRProviderHTTP = dcrProviderResponseDCRProviderHTTP
		u.Type = DcrProviderResponseTypeDcrProviderHTTP
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for DcrProviderResponse", string(data))
}

func (u DcrProviderResponse) MarshalJSON() ([]byte, error) {
	if u.DCRProviderResponseDCRProviderAuth0 != nil {
		return utils.MarshalJSON(u.DCRProviderResponseDCRProviderAuth0, "", true)
	}

	if u.DCRProviderResponseDCRProviderAzureAD != nil {
		return utils.MarshalJSON(u.DCRProviderResponseDCRProviderAzureAD, "", true)
	}

	if u.DCRProviderResponseDCRProviderCurity != nil {
		return utils.MarshalJSON(u.DCRProviderResponseDCRProviderCurity, "", true)
	}

	if u.DCRProviderResponseDCRProviderOKTA != nil {
		return utils.MarshalJSON(u.DCRProviderResponseDCRProviderOKTA, "", true)
	}

	if u.DCRProviderResponseDCRProviderHTTP != nil {
		return utils.MarshalJSON(u.DCRProviderResponseDCRProviderHTTP, "", true)
	}

	return nil, errors.New("could not marshal union type DcrProviderResponse: all fields are null")
}
