// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"errors"
	"fmt"
	"mockserver/internal/sdk/utils"
)

type PrivateDNSStateFieldEqualsComparison struct {
	// The current state of the Private DNS attachment. Possible values:
	// - `created` - The attachment has been created but is not attached to Private DNS.
	// - `initializing` - The attachment is in the process of being initialized and is setting up necessary resources.
	// - `pending-association` The attachment request is awaiting association to the cloud provider infrastructure in order for provisioning to proceed.
	// - `ready` - The attachment is fully operational and can route traffic as configured.
	// - `error` - The attachment is in an error state, and is not operational.
	// - `terminating` - The attachment is in the process of being deleted.
	// - `terminated` - The attachment has been fully deleted and is no longer available.
	//
	Eq PrivateDNSState `queryParam:"name=eq"`
}

func (o *PrivateDNSStateFieldEqualsComparison) GetEq() PrivateDNSState {
	if o == nil {
		return PrivateDNSState("")
	}
	return o.Eq
}

type PrivateDNSStateFieldEqualsFilterType string

const (
	PrivateDNSStateFieldEqualsFilterTypePrivateDNSState                      PrivateDNSStateFieldEqualsFilterType = "PrivateDnsState"
	PrivateDNSStateFieldEqualsFilterTypePrivateDNSStateFieldEqualsComparison PrivateDNSStateFieldEqualsFilterType = "PrivateDnsStateFieldEqualsComparison"
)

// PrivateDNSStateFieldEqualsFilter - Filter Private DNS state by exact match.
type PrivateDNSStateFieldEqualsFilter struct {
	PrivateDNSState                      *PrivateDNSState                      `queryParam:"inline"`
	PrivateDNSStateFieldEqualsComparison *PrivateDNSStateFieldEqualsComparison `queryParam:"inline"`

	Type PrivateDNSStateFieldEqualsFilterType
}

func CreatePrivateDNSStateFieldEqualsFilterPrivateDNSState(privateDNSState PrivateDNSState) PrivateDNSStateFieldEqualsFilter {
	typ := PrivateDNSStateFieldEqualsFilterTypePrivateDNSState

	return PrivateDNSStateFieldEqualsFilter{
		PrivateDNSState: &privateDNSState,
		Type:            typ,
	}
}

func CreatePrivateDNSStateFieldEqualsFilterPrivateDNSStateFieldEqualsComparison(privateDNSStateFieldEqualsComparison PrivateDNSStateFieldEqualsComparison) PrivateDNSStateFieldEqualsFilter {
	typ := PrivateDNSStateFieldEqualsFilterTypePrivateDNSStateFieldEqualsComparison

	return PrivateDNSStateFieldEqualsFilter{
		PrivateDNSStateFieldEqualsComparison: &privateDNSStateFieldEqualsComparison,
		Type:                                 typ,
	}
}

func (u *PrivateDNSStateFieldEqualsFilter) UnmarshalJSON(data []byte) error {

	var privateDNSStateFieldEqualsComparison PrivateDNSStateFieldEqualsComparison = PrivateDNSStateFieldEqualsComparison{}
	if err := utils.UnmarshalJSON(data, &privateDNSStateFieldEqualsComparison, "", true, true); err == nil {
		u.PrivateDNSStateFieldEqualsComparison = &privateDNSStateFieldEqualsComparison
		u.Type = PrivateDNSStateFieldEqualsFilterTypePrivateDNSStateFieldEqualsComparison
		return nil
	}

	var privateDNSState PrivateDNSState = PrivateDNSState("")
	if err := utils.UnmarshalJSON(data, &privateDNSState, "", true, true); err == nil {
		u.PrivateDNSState = &privateDNSState
		u.Type = PrivateDNSStateFieldEqualsFilterTypePrivateDNSState
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for PrivateDNSStateFieldEqualsFilter", string(data))
}

func (u PrivateDNSStateFieldEqualsFilter) MarshalJSON() ([]byte, error) {
	if u.PrivateDNSState != nil {
		return utils.MarshalJSON(u.PrivateDNSState, "", true)
	}

	if u.PrivateDNSStateFieldEqualsComparison != nil {
		return utils.MarshalJSON(u.PrivateDNSStateFieldEqualsComparison, "", true)
	}

	return nil, errors.New("could not marshal union type PrivateDNSStateFieldEqualsFilter: all fields are null")
}
