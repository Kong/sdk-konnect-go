// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"errors"
	"fmt"
	"mockserver/internal/sdk/utils"
)

type IDType string

const (
	IDTypeStringFieldEqualsFilterUnion IDType = "StringFieldEqualsFilter_union"
	IDTypeStringFieldOEQFilter         IDType = "StringFieldOEQFilter"
)

type ID struct {
	StringFieldEqualsFilterUnion *StringFieldEqualsFilterUnion `queryParam:"inline"`
	StringFieldOEQFilter         *StringFieldOEQFilter         `queryParam:"inline"`

	Type IDType
}

func CreateIDStringFieldEqualsFilterUnion(stringFieldEqualsFilterUnion StringFieldEqualsFilterUnion) ID {
	typ := IDTypeStringFieldEqualsFilterUnion

	return ID{
		StringFieldEqualsFilterUnion: &stringFieldEqualsFilterUnion,
		Type:                         typ,
	}
}

func CreateIDStringFieldOEQFilter(stringFieldOEQFilter StringFieldOEQFilter) ID {
	typ := IDTypeStringFieldOEQFilter

	return ID{
		StringFieldOEQFilter: &stringFieldOEQFilter,
		Type:                 typ,
	}
}

func (u *ID) UnmarshalJSON(data []byte) error {

	var stringFieldOEQFilter StringFieldOEQFilter = StringFieldOEQFilter{}
	if err := utils.UnmarshalJSON(data, &stringFieldOEQFilter, "", true, true); err == nil {
		u.StringFieldOEQFilter = &stringFieldOEQFilter
		u.Type = IDTypeStringFieldOEQFilter
		return nil
	}

	var stringFieldEqualsFilterUnion StringFieldEqualsFilterUnion = StringFieldEqualsFilterUnion{}
	if err := utils.UnmarshalJSON(data, &stringFieldEqualsFilterUnion, "", true, true); err == nil {
		u.StringFieldEqualsFilterUnion = &stringFieldEqualsFilterUnion
		u.Type = IDTypeStringFieldEqualsFilterUnion
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for ID", string(data))
}

func (u ID) MarshalJSON() ([]byte, error) {
	if u.StringFieldEqualsFilterUnion != nil {
		return utils.MarshalJSON(u.StringFieldEqualsFilterUnion, "", true)
	}

	if u.StringFieldOEQFilter != nil {
		return utils.MarshalJSON(u.StringFieldOEQFilter, "", true)
	}

	return nil, errors.New("could not marshal union type ID: all fields are null")
}

type NameType string

const (
	NameTypeStringFieldEqualsFilterUnion NameType = "StringFieldEqualsFilter_union"
	NameTypeStringFieldContainsFilter    NameType = "StringFieldContainsFilter"
	NameTypeStringFieldNEQFilter         NameType = "StringFieldNEQFilter"
)

type Name struct {
	StringFieldEqualsFilterUnion *StringFieldEqualsFilterUnion `queryParam:"inline"`
	StringFieldContainsFilter    *StringFieldContainsFilter    `queryParam:"inline"`
	StringFieldNEQFilter         *StringFieldNEQFilter         `queryParam:"inline"`

	Type NameType
}

func CreateNameStringFieldEqualsFilterUnion(stringFieldEqualsFilterUnion StringFieldEqualsFilterUnion) Name {
	typ := NameTypeStringFieldEqualsFilterUnion

	return Name{
		StringFieldEqualsFilterUnion: &stringFieldEqualsFilterUnion,
		Type:                         typ,
	}
}

func CreateNameStringFieldContainsFilter(stringFieldContainsFilter StringFieldContainsFilter) Name {
	typ := NameTypeStringFieldContainsFilter

	return Name{
		StringFieldContainsFilter: &stringFieldContainsFilter,
		Type:                      typ,
	}
}

func CreateNameStringFieldNEQFilter(stringFieldNEQFilter StringFieldNEQFilter) Name {
	typ := NameTypeStringFieldNEQFilter

	return Name{
		StringFieldNEQFilter: &stringFieldNEQFilter,
		Type:                 typ,
	}
}

func (u *Name) UnmarshalJSON(data []byte) error {

	var stringFieldContainsFilter StringFieldContainsFilter = StringFieldContainsFilter{}
	if err := utils.UnmarshalJSON(data, &stringFieldContainsFilter, "", true, true); err == nil {
		u.StringFieldContainsFilter = &stringFieldContainsFilter
		u.Type = NameTypeStringFieldContainsFilter
		return nil
	}

	var stringFieldNEQFilter StringFieldNEQFilter = StringFieldNEQFilter{}
	if err := utils.UnmarshalJSON(data, &stringFieldNEQFilter, "", true, true); err == nil {
		u.StringFieldNEQFilter = &stringFieldNEQFilter
		u.Type = NameTypeStringFieldNEQFilter
		return nil
	}

	var stringFieldEqualsFilterUnion StringFieldEqualsFilterUnion = StringFieldEqualsFilterUnion{}
	if err := utils.UnmarshalJSON(data, &stringFieldEqualsFilterUnion, "", true, true); err == nil {
		u.StringFieldEqualsFilterUnion = &stringFieldEqualsFilterUnion
		u.Type = NameTypeStringFieldEqualsFilterUnion
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for Name", string(data))
}

func (u Name) MarshalJSON() ([]byte, error) {
	if u.StringFieldEqualsFilterUnion != nil {
		return utils.MarshalJSON(u.StringFieldEqualsFilterUnion, "", true)
	}

	if u.StringFieldContainsFilter != nil {
		return utils.MarshalJSON(u.StringFieldContainsFilter, "", true)
	}

	if u.StringFieldNEQFilter != nil {
		return utils.MarshalJSON(u.StringFieldNEQFilter, "", true)
	}

	return nil, errors.New("could not marshal union type Name: all fields are null")
}

type ClusterTypeType string

const (
	ClusterTypeTypeStringFieldEqualsFilterUnion ClusterTypeType = "StringFieldEqualsFilter_union"
	ClusterTypeTypeStringFieldNEQFilter         ClusterTypeType = "StringFieldNEQFilter"
)

type ClusterType struct {
	StringFieldEqualsFilterUnion *StringFieldEqualsFilterUnion `queryParam:"inline"`
	StringFieldNEQFilter         *StringFieldNEQFilter         `queryParam:"inline"`

	Type ClusterTypeType
}

func CreateClusterTypeStringFieldEqualsFilterUnion(stringFieldEqualsFilterUnion StringFieldEqualsFilterUnion) ClusterType {
	typ := ClusterTypeTypeStringFieldEqualsFilterUnion

	return ClusterType{
		StringFieldEqualsFilterUnion: &stringFieldEqualsFilterUnion,
		Type:                         typ,
	}
}

func CreateClusterTypeStringFieldNEQFilter(stringFieldNEQFilter StringFieldNEQFilter) ClusterType {
	typ := ClusterTypeTypeStringFieldNEQFilter

	return ClusterType{
		StringFieldNEQFilter: &stringFieldNEQFilter,
		Type:                 typ,
	}
}

func (u *ClusterType) UnmarshalJSON(data []byte) error {

	var stringFieldNEQFilter StringFieldNEQFilter = StringFieldNEQFilter{}
	if err := utils.UnmarshalJSON(data, &stringFieldNEQFilter, "", true, true); err == nil {
		u.StringFieldNEQFilter = &stringFieldNEQFilter
		u.Type = ClusterTypeTypeStringFieldNEQFilter
		return nil
	}

	var stringFieldEqualsFilterUnion StringFieldEqualsFilterUnion = StringFieldEqualsFilterUnion{}
	if err := utils.UnmarshalJSON(data, &stringFieldEqualsFilterUnion, "", true, true); err == nil {
		u.StringFieldEqualsFilterUnion = &stringFieldEqualsFilterUnion
		u.Type = ClusterTypeTypeStringFieldEqualsFilterUnion
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for ClusterType", string(data))
}

func (u ClusterType) MarshalJSON() ([]byte, error) {
	if u.StringFieldEqualsFilterUnion != nil {
		return utils.MarshalJSON(u.StringFieldEqualsFilterUnion, "", true)
	}

	if u.StringFieldNEQFilter != nil {
		return utils.MarshalJSON(u.StringFieldNEQFilter, "", true)
	}

	return nil, errors.New("could not marshal union type ClusterType: all fields are null")
}

type ControlPlaneFilterParameters struct {
	ID          *ID          `queryParam:"name=id"`
	Name        *Name        `queryParam:"name=name"`
	ClusterType *ClusterType `queryParam:"name=cluster_type"`
	// Filter by a boolean value (true/false).
	CloudGateway *bool `queryParam:"name=cloud_gateway"`
}

func (o *ControlPlaneFilterParameters) GetID() *ID {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *ControlPlaneFilterParameters) GetName() *Name {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *ControlPlaneFilterParameters) GetClusterType() *ClusterType {
	if o == nil {
		return nil
	}
	return o.ClusterType
}

func (o *ControlPlaneFilterParameters) GetCloudGateway() *bool {
	if o == nil {
		return nil
	}
	return o.CloudGateway
}
