// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"mockserver/internal/sdk/models/components"
)

// ListTeamUsersFilter - Filter users returned in the response.
type ListTeamUsersFilter struct {
	// Filters on the given string field value by exact match.
	ID *string `queryParam:"name=id"`
	// Filters on the given string field value by exact match inequality.
	Email *components.StringFieldFilter `queryParam:"name=email"`
	// Filters on the given string field value by exact match inequality.
	FullName *components.StringFieldFilter `queryParam:"name=full_name"`
	// Filter by a boolean value (true/false).
	Active *bool `queryParam:"name=active"`
}

func (o *ListTeamUsersFilter) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *ListTeamUsersFilter) GetEmail() *components.StringFieldFilter {
	if o == nil {
		return nil
	}
	return o.Email
}

func (o *ListTeamUsersFilter) GetFullName() *components.StringFieldFilter {
	if o == nil {
		return nil
	}
	return o.FullName
}

func (o *ListTeamUsersFilter) GetActive() *bool {
	if o == nil {
		return nil
	}
	return o.Active
}

type ListTeamUsersRequest struct {
	// ID of the team.
	TeamID string `pathParam:"style=simple,explode=false,name=teamId"`
	// The maximum number of items to include per page. The last page of a collection may include fewer items.
	PageSize *int64 `queryParam:"style=form,explode=true,name=page[size]"`
	// Determines which page of the entities to retrieve.
	PageNumber *int64 `queryParam:"style=form,explode=true,name=page[number]"`
	// Filter users returned in the response.
	Filter *ListTeamUsersFilter `queryParam:"style=deepObject,explode=true,name=filter"`
}

func (o *ListTeamUsersRequest) GetTeamID() string {
	if o == nil {
		return ""
	}
	return o.TeamID
}

func (o *ListTeamUsersRequest) GetPageSize() *int64 {
	if o == nil {
		return nil
	}
	return o.PageSize
}

func (o *ListTeamUsersRequest) GetPageNumber() *int64 {
	if o == nil {
		return nil
	}
	return o.PageNumber
}

func (o *ListTeamUsersRequest) GetFilter() *ListTeamUsersFilter {
	if o == nil {
		return nil
	}
	return o.Filter
}

type ListTeamUsersResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// A paginated list response for a collection of users.
	UserCollection *components.UserCollection
}

func (o *ListTeamUsersResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *ListTeamUsersResponse) GetUserCollection() *components.UserCollection {
	if o == nil {
		return nil
	}
	return o.UserCollection
}
