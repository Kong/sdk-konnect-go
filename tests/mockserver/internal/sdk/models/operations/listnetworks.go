// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"mockserver/internal/sdk/models/components"
)

type ListNetworksRequest struct {
	// Filters supported for networks.
	Filter *components.NetworksFilterParameters `queryParam:"style=deepObject,explode=true,name=filter"`
	// The maximum number of items to include per page. The last page of a collection may include fewer items.
	PageSize *int64 `queryParam:"style=form,explode=true,name=page[size]"`
	// Determines which page of the entities to retrieve.
	PageNumber *int64 `queryParam:"style=form,explode=true,name=page[number]"`
}

func (o *ListNetworksRequest) GetFilter() *components.NetworksFilterParameters {
	if o == nil {
		return nil
	}
	return o.Filter
}

func (o *ListNetworksRequest) GetPageSize() *int64 {
	if o == nil {
		return nil
	}
	return o.PageSize
}

func (o *ListNetworksRequest) GetPageNumber() *int64 {
	if o == nil {
		return nil
	}
	return o.PageNumber
}

type ListNetworksResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// A paginated list for a collection of networks.
	ListNetworksResponse *components.ListNetworksResponse
}

func (o *ListNetworksResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *ListNetworksResponse) GetListNetworksResponse() *components.ListNetworksResponse {
	if o == nil {
		return nil
	}
	return o.ListNetworksResponse
}
