// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"mockserver/internal/sdk/models/components"
)

// ListUserTeamsFilter - Filter teams returned in the response.
type ListUserTeamsFilter struct {
	// Filters on the given string field value by exact match inequality.
	Name *components.StringFieldFilter `queryParam:"name=name"`
}

func (o *ListUserTeamsFilter) GetName() *components.StringFieldFilter {
	if o == nil {
		return nil
	}
	return o.Name
}

type ListUserTeamsRequest struct {
	// The user ID.
	UserID string `pathParam:"style=simple,explode=false,name=userId"`
	// The maximum number of items to include per page. The last page of a collection may include fewer items.
	PageSize *int64 `queryParam:"style=form,explode=true,name=page[size]"`
	// Determines which page of the entities to retrieve.
	PageNumber *int64 `queryParam:"style=form,explode=true,name=page[number]"`
	// Filter teams returned in the response.
	Filter *ListUserTeamsFilter `queryParam:"style=deepObject,explode=true,name=filter"`
}

func (o *ListUserTeamsRequest) GetUserID() string {
	if o == nil {
		return ""
	}
	return o.UserID
}

func (o *ListUserTeamsRequest) GetPageSize() *int64 {
	if o == nil {
		return nil
	}
	return o.PageSize
}

func (o *ListUserTeamsRequest) GetPageNumber() *int64 {
	if o == nil {
		return nil
	}
	return o.PageNumber
}

func (o *ListUserTeamsRequest) GetFilter() *ListUserTeamsFilter {
	if o == nil {
		return nil
	}
	return o.Filter
}

type ListUserTeamsResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// A paginated list response for a collection of users.
	TeamCollection *components.TeamCollection
}

func (o *ListUserTeamsResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *ListUserTeamsResponse) GetTeamCollection() *components.TeamCollection {
	if o == nil {
		return nil
	}
	return o.TeamCollection
}
