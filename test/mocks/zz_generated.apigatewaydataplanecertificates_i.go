// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/Kong/sdk-konnect-go/models/components"
	"github.com/Kong/sdk-konnect-go/models/operations"
	mock "github.com/stretchr/testify/mock"
)

// NewMockAPIGatewayDataPlaneCertificatesSDK creates a new instance of MockAPIGatewayDataPlaneCertificatesSDK. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAPIGatewayDataPlaneCertificatesSDK(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAPIGatewayDataPlaneCertificatesSDK {
	mock := &MockAPIGatewayDataPlaneCertificatesSDK{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockAPIGatewayDataPlaneCertificatesSDK is an autogenerated mock type for the APIGatewayDataPlaneCertificatesSDK type
type MockAPIGatewayDataPlaneCertificatesSDK struct {
	mock.Mock
}

type MockAPIGatewayDataPlaneCertificatesSDK_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAPIGatewayDataPlaneCertificatesSDK) EXPECT() *MockAPIGatewayDataPlaneCertificatesSDK_Expecter {
	return &MockAPIGatewayDataPlaneCertificatesSDK_Expecter{mock: &_m.Mock}
}

// CreateAPIGatewayDataPlaneCertificate provides a mock function for the type MockAPIGatewayDataPlaneCertificatesSDK
func (_mock *MockAPIGatewayDataPlaneCertificatesSDK) CreateAPIGatewayDataPlaneCertificate(ctx context.Context, gatewayID string, createAPIGatewayDataPlaneCertificateRequest *components.CreateAPIGatewayDataPlaneCertificateRequest, opts ...operations.Option) (*operations.CreateAPIGatewayDataPlaneCertificateResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, gatewayID, createAPIGatewayDataPlaneCertificateRequest, opts)
	} else {
		tmpRet = _mock.Called(ctx, gatewayID, createAPIGatewayDataPlaneCertificateRequest)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateAPIGatewayDataPlaneCertificate")
	}

	var r0 *operations.CreateAPIGatewayDataPlaneCertificateResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *components.CreateAPIGatewayDataPlaneCertificateRequest, ...operations.Option) (*operations.CreateAPIGatewayDataPlaneCertificateResponse, error)); ok {
		return returnFunc(ctx, gatewayID, createAPIGatewayDataPlaneCertificateRequest, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *components.CreateAPIGatewayDataPlaneCertificateRequest, ...operations.Option) *operations.CreateAPIGatewayDataPlaneCertificateResponse); ok {
		r0 = returnFunc(ctx, gatewayID, createAPIGatewayDataPlaneCertificateRequest, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.CreateAPIGatewayDataPlaneCertificateResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, *components.CreateAPIGatewayDataPlaneCertificateRequest, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, gatewayID, createAPIGatewayDataPlaneCertificateRequest, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAPIGatewayDataPlaneCertificatesSDK_CreateAPIGatewayDataPlaneCertificate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAPIGatewayDataPlaneCertificate'
type MockAPIGatewayDataPlaneCertificatesSDK_CreateAPIGatewayDataPlaneCertificate_Call struct {
	*mock.Call
}

// CreateAPIGatewayDataPlaneCertificate is a helper method to define mock.On call
//   - ctx context.Context
//   - gatewayID string
//   - createAPIGatewayDataPlaneCertificateRequest *components.CreateAPIGatewayDataPlaneCertificateRequest
//   - opts ...operations.Option
func (_e *MockAPIGatewayDataPlaneCertificatesSDK_Expecter) CreateAPIGatewayDataPlaneCertificate(ctx interface{}, gatewayID interface{}, createAPIGatewayDataPlaneCertificateRequest interface{}, opts ...interface{}) *MockAPIGatewayDataPlaneCertificatesSDK_CreateAPIGatewayDataPlaneCertificate_Call {
	return &MockAPIGatewayDataPlaneCertificatesSDK_CreateAPIGatewayDataPlaneCertificate_Call{Call: _e.mock.On("CreateAPIGatewayDataPlaneCertificate",
		append([]interface{}{ctx, gatewayID, createAPIGatewayDataPlaneCertificateRequest}, opts...)...)}
}

func (_c *MockAPIGatewayDataPlaneCertificatesSDK_CreateAPIGatewayDataPlaneCertificate_Call) Run(run func(ctx context.Context, gatewayID string, createAPIGatewayDataPlaneCertificateRequest *components.CreateAPIGatewayDataPlaneCertificateRequest, opts ...operations.Option)) *MockAPIGatewayDataPlaneCertificatesSDK_CreateAPIGatewayDataPlaneCertificate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 *components.CreateAPIGatewayDataPlaneCertificateRequest
		if args[2] != nil {
			arg2 = args[2].(*components.CreateAPIGatewayDataPlaneCertificateRequest)
		}
		var arg3 []operations.Option
		var variadicArgs []operations.Option
		if len(args) > 3 {
			variadicArgs = args[3].([]operations.Option)
		}
		arg3 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3...,
		)
	})
	return _c
}

func (_c *MockAPIGatewayDataPlaneCertificatesSDK_CreateAPIGatewayDataPlaneCertificate_Call) Return(createAPIGatewayDataPlaneCertificateResponse *operations.CreateAPIGatewayDataPlaneCertificateResponse, err error) *MockAPIGatewayDataPlaneCertificatesSDK_CreateAPIGatewayDataPlaneCertificate_Call {
	_c.Call.Return(createAPIGatewayDataPlaneCertificateResponse, err)
	return _c
}

func (_c *MockAPIGatewayDataPlaneCertificatesSDK_CreateAPIGatewayDataPlaneCertificate_Call) RunAndReturn(run func(ctx context.Context, gatewayID string, createAPIGatewayDataPlaneCertificateRequest *components.CreateAPIGatewayDataPlaneCertificateRequest, opts ...operations.Option) (*operations.CreateAPIGatewayDataPlaneCertificateResponse, error)) *MockAPIGatewayDataPlaneCertificatesSDK_CreateAPIGatewayDataPlaneCertificate_Call {
	_c.Call.Return(run)
	return _c
}

// ListAPIGatewayDataPlaneCertificates provides a mock function for the type MockAPIGatewayDataPlaneCertificatesSDK
func (_mock *MockAPIGatewayDataPlaneCertificatesSDK) ListAPIGatewayDataPlaneCertificates(ctx context.Context, request operations.ListAPIGatewayDataPlaneCertificatesRequest, opts ...operations.Option) (*operations.ListAPIGatewayDataPlaneCertificatesResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, request, opts)
	} else {
		tmpRet = _mock.Called(ctx, request)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for ListAPIGatewayDataPlaneCertificates")
	}

	var r0 *operations.ListAPIGatewayDataPlaneCertificatesResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.ListAPIGatewayDataPlaneCertificatesRequest, ...operations.Option) (*operations.ListAPIGatewayDataPlaneCertificatesResponse, error)); ok {
		return returnFunc(ctx, request, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.ListAPIGatewayDataPlaneCertificatesRequest, ...operations.Option) *operations.ListAPIGatewayDataPlaneCertificatesResponse); ok {
		r0 = returnFunc(ctx, request, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.ListAPIGatewayDataPlaneCertificatesResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, operations.ListAPIGatewayDataPlaneCertificatesRequest, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, request, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAPIGatewayDataPlaneCertificatesSDK_ListAPIGatewayDataPlaneCertificates_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAPIGatewayDataPlaneCertificates'
type MockAPIGatewayDataPlaneCertificatesSDK_ListAPIGatewayDataPlaneCertificates_Call struct {
	*mock.Call
}

// ListAPIGatewayDataPlaneCertificates is a helper method to define mock.On call
//   - ctx context.Context
//   - request operations.ListAPIGatewayDataPlaneCertificatesRequest
//   - opts ...operations.Option
func (_e *MockAPIGatewayDataPlaneCertificatesSDK_Expecter) ListAPIGatewayDataPlaneCertificates(ctx interface{}, request interface{}, opts ...interface{}) *MockAPIGatewayDataPlaneCertificatesSDK_ListAPIGatewayDataPlaneCertificates_Call {
	return &MockAPIGatewayDataPlaneCertificatesSDK_ListAPIGatewayDataPlaneCertificates_Call{Call: _e.mock.On("ListAPIGatewayDataPlaneCertificates",
		append([]interface{}{ctx, request}, opts...)...)}
}

func (_c *MockAPIGatewayDataPlaneCertificatesSDK_ListAPIGatewayDataPlaneCertificates_Call) Run(run func(ctx context.Context, request operations.ListAPIGatewayDataPlaneCertificatesRequest, opts ...operations.Option)) *MockAPIGatewayDataPlaneCertificatesSDK_ListAPIGatewayDataPlaneCertificates_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 operations.ListAPIGatewayDataPlaneCertificatesRequest
		if args[1] != nil {
			arg1 = args[1].(operations.ListAPIGatewayDataPlaneCertificatesRequest)
		}
		var arg2 []operations.Option
		var variadicArgs []operations.Option
		if len(args) > 2 {
			variadicArgs = args[2].([]operations.Option)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockAPIGatewayDataPlaneCertificatesSDK_ListAPIGatewayDataPlaneCertificates_Call) Return(listAPIGatewayDataPlaneCertificatesResponse *operations.ListAPIGatewayDataPlaneCertificatesResponse, err error) *MockAPIGatewayDataPlaneCertificatesSDK_ListAPIGatewayDataPlaneCertificates_Call {
	_c.Call.Return(listAPIGatewayDataPlaneCertificatesResponse, err)
	return _c
}

func (_c *MockAPIGatewayDataPlaneCertificatesSDK_ListAPIGatewayDataPlaneCertificates_Call) RunAndReturn(run func(ctx context.Context, request operations.ListAPIGatewayDataPlaneCertificatesRequest, opts ...operations.Option) (*operations.ListAPIGatewayDataPlaneCertificatesResponse, error)) *MockAPIGatewayDataPlaneCertificatesSDK_ListAPIGatewayDataPlaneCertificates_Call {
	_c.Call.Return(run)
	return _c
}
