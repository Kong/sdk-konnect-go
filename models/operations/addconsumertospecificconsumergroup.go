// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"github.com/Kong/sdk-konnect-go/models/components"
	"net/http"
)

type AddConsumerToSpecificConsumerGroupRequestBody struct {
	Group *string `json:"group,omitempty"`
}

func (o *AddConsumerToSpecificConsumerGroupRequestBody) GetGroup() *string {
	if o == nil {
		return nil
	}
	return o.Group
}

type AddConsumerToSpecificConsumerGroupRequest struct {
	// The UUID of your control plane. This variable is available in the Konnect manager.
	ControlPlaneID string `pathParam:"style=simple,explode=false,name=controlPlaneId"`
	// The UUID of the consumer.
	ConsumerID  string                                         `pathParam:"style=simple,explode=false,name=ConsumerId"`
	RequestBody *AddConsumerToSpecificConsumerGroupRequestBody `request:"mediaType=application/json"`
}

func (o *AddConsumerToSpecificConsumerGroupRequest) GetControlPlaneID() string {
	if o == nil {
		return ""
	}
	return o.ControlPlaneID
}

func (o *AddConsumerToSpecificConsumerGroupRequest) GetConsumerID() string {
	if o == nil {
		return ""
	}
	return o.ConsumerID
}

func (o *AddConsumerToSpecificConsumerGroupRequest) GetRequestBody() *AddConsumerToSpecificConsumerGroupRequestBody {
	if o == nil {
		return nil
	}
	return o.RequestBody
}

// AddConsumerToSpecificConsumerGroupResponseBody - Consumer added to a specific group
type AddConsumerToSpecificConsumerGroupResponseBody struct {
	// The Consumer object represents a consumer - or a user - of a Service. You can either rely on Kong as the primary datastore, or you can map the consumer list with your database to keep consistency between Kong and your existing primary datastore.
	Consumer       *components.Consumer       `json:"consumer,omitempty"`
	ConsumerGroups []components.ConsumerGroup `json:"consumer_groups,omitempty"`
}

func (o *AddConsumerToSpecificConsumerGroupResponseBody) GetConsumer() *components.Consumer {
	if o == nil {
		return nil
	}
	return o.Consumer
}

func (o *AddConsumerToSpecificConsumerGroupResponseBody) GetConsumerGroups() []components.ConsumerGroup {
	if o == nil {
		return nil
	}
	return o.ConsumerGroups
}

type AddConsumerToSpecificConsumerGroupResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// Consumer added to a specific group
	Object *AddConsumerToSpecificConsumerGroupResponseBody
}

func (o *AddConsumerToSpecificConsumerGroupResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *AddConsumerToSpecificConsumerGroupResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *AddConsumerToSpecificConsumerGroupResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *AddConsumerToSpecificConsumerGroupResponse) GetObject() *AddConsumerToSpecificConsumerGroupResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
