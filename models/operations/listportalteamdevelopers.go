// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"github.com/Kong/sdk-konnect-go/models/components"
	"net/http"
)

// ListPortalTeamDevelopersQueryParamFilter - Filter developers returned in the response.
type ListPortalTeamDevelopersQueryParamFilter struct {
	// Filters on the given string field value by exact match inequality.
	Email *components.StringFieldFilter `queryParam:"name=email"`
	// Filters on the given string field value by exact match inequality.
	FullName *components.StringFieldFilter `queryParam:"name=full_name"`
	// Filters on the given string field value by exact match inequality.
	Attributes *components.StringFieldFilter `queryParam:"name=attributes"`
	// Filter by a boolean value (true/false).
	Active *bool `queryParam:"name=active"`
}

func (l *ListPortalTeamDevelopersQueryParamFilter) GetEmail() *components.StringFieldFilter {
	if l == nil {
		return nil
	}
	return l.Email
}

func (l *ListPortalTeamDevelopersQueryParamFilter) GetFullName() *components.StringFieldFilter {
	if l == nil {
		return nil
	}
	return l.FullName
}

func (l *ListPortalTeamDevelopersQueryParamFilter) GetAttributes() *components.StringFieldFilter {
	if l == nil {
		return nil
	}
	return l.Attributes
}

func (l *ListPortalTeamDevelopersQueryParamFilter) GetActive() *bool {
	if l == nil {
		return nil
	}
	return l.Active
}

type ListPortalTeamDevelopersRequest struct {
	// ID of the portal.
	PortalID string `pathParam:"style=simple,explode=false,name=portalId"`
	// ID of the team.
	TeamID string `pathParam:"style=simple,explode=false,name=teamId"`
	// The maximum number of items to include per page. The last page of a collection may include fewer items.
	PageSize *int64 `queryParam:"style=form,explode=true,name=page[size]"`
	// Determines which page of the entities to retrieve.
	PageNumber *int64 `queryParam:"style=form,explode=true,name=page[number]"`
	// Filter developers returned in the response.
	Filter *ListPortalTeamDevelopersQueryParamFilter `queryParam:"style=deepObject,explode=true,name=filter"`
}

func (l *ListPortalTeamDevelopersRequest) GetPortalID() string {
	if l == nil {
		return ""
	}
	return l.PortalID
}

func (l *ListPortalTeamDevelopersRequest) GetTeamID() string {
	if l == nil {
		return ""
	}
	return l.TeamID
}

func (l *ListPortalTeamDevelopersRequest) GetPageSize() *int64 {
	if l == nil {
		return nil
	}
	return l.PageSize
}

func (l *ListPortalTeamDevelopersRequest) GetPageNumber() *int64 {
	if l == nil {
		return nil
	}
	return l.PageNumber
}

func (l *ListPortalTeamDevelopersRequest) GetFilter() *ListPortalTeamDevelopersQueryParamFilter {
	if l == nil {
		return nil
	}
	return l.Filter
}

type ListPortalTeamDevelopersResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// A paginated list of basic developer information.
	ListBasicDevelopersResponse *components.ListBasicDevelopersResponse
}

func (l *ListPortalTeamDevelopersResponse) GetContentType() string {
	if l == nil {
		return ""
	}
	return l.ContentType
}

func (l *ListPortalTeamDevelopersResponse) GetStatusCode() int {
	if l == nil {
		return 0
	}
	return l.StatusCode
}

func (l *ListPortalTeamDevelopersResponse) GetRawResponse() *http.Response {
	if l == nil {
		return nil
	}
	return l.RawResponse
}

func (l *ListPortalTeamDevelopersResponse) GetListBasicDevelopersResponse() *components.ListBasicDevelopersResponse {
	if l == nil {
		return nil
	}
	return l.ListBasicDevelopersResponse
}
