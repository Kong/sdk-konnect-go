// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"github.com/Kong/sdk-konnect-go/models/components"
	"net/http"
)

type ListNotificationsRequest struct {
	// Request the next page of data, starting with the item before this parameter.
	PageBefore *string `queryParam:"style=form,explode=true,name=page[before]"`
	// Request the next page of data, starting with the item after this parameter.
	PageAfter *string `queryParam:"style=form,explode=true,name=page[after]"`
	// Filters a collection of notifications.
	Filter *components.NotificationFilterParameters `queryParam:"style=deepObject,explode=true,name=filter"`
}

func (l *ListNotificationsRequest) GetPageBefore() *string {
	if l == nil {
		return nil
	}
	return l.PageBefore
}

func (l *ListNotificationsRequest) GetPageAfter() *string {
	if l == nil {
		return nil
	}
	return l.PageAfter
}

func (l *ListNotificationsRequest) GetFilter() *components.NotificationFilterParameters {
	if l == nil {
		return nil
	}
	return l.Filter
}

type ListNotificationsResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// A paginated list response for a collection of notifications
	NotificationListResponse *components.NotificationListResponse
}

func (l *ListNotificationsResponse) GetContentType() string {
	if l == nil {
		return ""
	}
	return l.ContentType
}

func (l *ListNotificationsResponse) GetStatusCode() int {
	if l == nil {
		return 0
	}
	return l.StatusCode
}

func (l *ListNotificationsResponse) GetRawResponse() *http.Response {
	if l == nil {
		return nil
	}
	return l.RawResponse
}

func (l *ListNotificationsResponse) GetNotificationListResponse() *components.NotificationListResponse {
	if l == nil {
		return nil
	}
	return l.NotificationListResponse
}
