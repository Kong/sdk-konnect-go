// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"github.com/Kong/sdk-konnect-go/models/components"
	"net/http"
)

var ListConfigurationsServerList = []string{
	"https://global.api.konghq.com/",
}

type ListConfigurationsRequest struct {
	// The maximum number of items to include per page. The last page of a collection may include fewer items.
	PageSize *int64 `queryParam:"style=form,explode=true,name=page[size]"`
	// Determines which page of the entities to retrieve.
	PageNumber *int64 `queryParam:"style=form,explode=true,name=page[number]"`
	// Filters supported for configurations.
	Filter *components.ConfigurationsFilterParameters `queryParam:"style=deepObject,explode=true,name=filter"`
}

func (l *ListConfigurationsRequest) GetPageSize() *int64 {
	if l == nil {
		return nil
	}
	return l.PageSize
}

func (l *ListConfigurationsRequest) GetPageNumber() *int64 {
	if l == nil {
		return nil
	}
	return l.PageNumber
}

func (l *ListConfigurationsRequest) GetFilter() *components.ConfigurationsFilterParameters {
	if l == nil {
		return nil
	}
	return l.Filter
}

type ListConfigurationsResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// A paginated list for a collection of configurations.
	ListConfigurationsResponse *components.ListConfigurationsResponse
}

func (l *ListConfigurationsResponse) GetContentType() string {
	if l == nil {
		return ""
	}
	return l.ContentType
}

func (l *ListConfigurationsResponse) GetStatusCode() int {
	if l == nil {
		return 0
	}
	return l.StatusCode
}

func (l *ListConfigurationsResponse) GetRawResponse() *http.Response {
	if l == nil {
		return nil
	}
	return l.RawResponse
}

func (l *ListConfigurationsResponse) GetListConfigurationsResponse() *components.ListConfigurationsResponse {
	if l == nil {
		return nil
	}
	return l.ListConfigurationsResponse
}
