// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"github.com/Kong/sdk-konnect-go/internal/utils"
)

type CredentialType string

const (
	CredentialTypeClientCredentials            CredentialType = "client_credentials"
	CredentialTypeSelfManagedClientCredentials CredentialType = "self_managed_client_credentials"
)

func (e CredentialType) ToPointer() *CredentialType {
	return &e
}
func (e *CredentialType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "client_credentials":
		fallthrough
	case "self_managed_client_credentials":
		*e = CredentialType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CredentialType: %v", v)
	}
}

// AuthStrategyClientCredentials - Client Credential Auth strategy that the application uses.
type AuthStrategyClientCredentials struct {
	// The Application Auth Strategy ID.
	ID             string         `json:"id"`
	Name           *string        `default:"name" json:"name"`
	CredentialType CredentialType `json:"credential_type"`
	AuthMethods    []string       `json:"auth_methods"`
	// Possible developer selectable scopes for an application. Only present when using DCR Provider that supports it.
	AvailableScopes []string `json:"available_scopes,omitempty"`
}

func (a AuthStrategyClientCredentials) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AuthStrategyClientCredentials) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, []string{"id", "credential_type", "auth_methods"}); err != nil {
		return err
	}
	return nil
}

func (o *AuthStrategyClientCredentials) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *AuthStrategyClientCredentials) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *AuthStrategyClientCredentials) GetCredentialType() CredentialType {
	if o == nil {
		return CredentialType("")
	}
	return o.CredentialType
}

func (o *AuthStrategyClientCredentials) GetAuthMethods() []string {
	if o == nil {
		return []string{}
	}
	return o.AuthMethods
}

func (o *AuthStrategyClientCredentials) GetAvailableScopes() []string {
	if o == nil {
		return nil
	}
	return o.AvailableScopes
}
