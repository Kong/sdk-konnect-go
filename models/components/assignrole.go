// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

// RoleName - The desired role.
type RoleName string

const (
	RoleNameAdmin                     RoleName = "Admin"
	RoleNameAppearanceMaintainer      RoleName = "Appearance Maintainer"
	RoleNameApplicationRegistration   RoleName = "Application Registration"
	RoleNameCertificateAdmin          RoleName = "Certificate Admin"
	RoleNameCloudGatewayClusterAdmin  RoleName = "Cloud Gateway Cluster Admin"
	RoleNameCloudGatewayClusterViewer RoleName = "Cloud Gateway Cluster Viewer"
	RoleNameConsumerAdmin             RoleName = "Consumer Admin"
	RoleNameConnector                 RoleName = "Connector"
	RoleNameCreator                   RoleName = "Creator"
	RoleNameDeployer                  RoleName = "Deployer"
	RoleNameDiscoveryAdmin            RoleName = "Discovery Admin"
	RoleNameDiscoveryViewer           RoleName = "Discovery Viewer"
	RoleNameGatewayServiceAdmin       RoleName = "Gateway Service Admin"
	RoleNameIntegrationAdmin          RoleName = "Integration Admin"
	RoleNameIntegrationViewer         RoleName = "Integration Viewer"
	RoleNameKeyAdmin                  RoleName = "Key Admin"
	RoleNameMaintainer                RoleName = "Maintainer"
	RoleNameNetworkAdmin              RoleName = "Network Admin"
	RoleNameNetworkCreator            RoleName = "Network Creator"
	RoleNameNetworkViewer             RoleName = "Network Viewer"
	RoleNamePluginAdmin               RoleName = "Plugin Admin"
	RoleNamePluginsAdmin              RoleName = "Plugins Admin"
	RoleNameProductPublisher          RoleName = "Product Publisher"
	RoleNamePublisher                 RoleName = "Publisher"
	RoleNameRouteAdmin                RoleName = "Route Admin"
	RoleNameSniAdmin                  RoleName = "SNI Admin"
	RoleNameScorecardAdmin            RoleName = "Scorecard Admin"
	RoleNameScorecardViewer           RoleName = "Scorecard Viewer"
	RoleNameServiceAdmin              RoleName = "Service Admin"
	RoleNameServiceCreator            RoleName = "Service Creator"
	RoleNameServiceViewer             RoleName = "Service Viewer"
	RoleNameUpstreamAdmin             RoleName = "Upstream Admin"
	RoleNameVaultAdmin                RoleName = "Vault Admin"
	RoleNameViewer                    RoleName = "Viewer"
)

func (e RoleName) ToPointer() *RoleName {
	return &e
}

// EntityTypeName - The type of entity.
type EntityTypeName string

const (
	EntityTypeNameApIs                      EntityTypeName = "APIs"
	EntityTypeNameAPIProducts               EntityTypeName = "API Products"
	EntityTypeNameApplicationAuthStrategies EntityTypeName = "Application Auth Strategies"
	EntityTypeNameAuditLogs                 EntityTypeName = "Audit Logs"
	EntityTypeNameControlPlanes             EntityTypeName = "Control Planes"
	EntityTypeNameDashboards                EntityTypeName = "Dashboards"
	EntityTypeNameDcrProviders              EntityTypeName = "DCR Providers"
	EntityTypeNameIdentity                  EntityTypeName = "Identity"
	EntityTypeNameMeshControlPlanes         EntityTypeName = "Mesh Control Planes"
	EntityTypeNameNetworks                  EntityTypeName = "Networks"
	EntityTypeNamePortals                   EntityTypeName = "Portals"
	EntityTypeNameServiceHub                EntityTypeName = "Service Hub"
)

func (e EntityTypeName) ToPointer() *EntityTypeName {
	return &e
}

// AssignRoleEntityRegion - Region of the team.
type AssignRoleEntityRegion string

const (
	AssignRoleEntityRegionUs       AssignRoleEntityRegion = "us"
	AssignRoleEntityRegionEu       AssignRoleEntityRegion = "eu"
	AssignRoleEntityRegionAu       AssignRoleEntityRegion = "au"
	AssignRoleEntityRegionMe       AssignRoleEntityRegion = "me"
	AssignRoleEntityRegionIn       AssignRoleEntityRegion = "in"
	AssignRoleEntityRegionSg       AssignRoleEntityRegion = "sg"
	AssignRoleEntityRegionWildcard AssignRoleEntityRegion = "*"
)

func (e AssignRoleEntityRegion) ToPointer() *AssignRoleEntityRegion {
	return &e
}

// AssignRole - An assigned role is a role that has been assigned to a user or team.
type AssignRole struct {
	// The desired role.
	RoleName *RoleName `json:"role_name,omitempty"`
	// The ID of the entity.
	EntityID *string `json:"entity_id,omitempty"`
	// The type of entity.
	EntityTypeName *EntityTypeName `json:"entity_type_name,omitempty"`
	// Region of the team.
	EntityRegion *AssignRoleEntityRegion `json:"entity_region,omitempty"`
}

func (a *AssignRole) GetRoleName() *RoleName {
	if a == nil {
		return nil
	}
	return a.RoleName
}

func (a *AssignRole) GetEntityID() *string {
	if a == nil {
		return nil
	}
	return a.EntityID
}

func (a *AssignRole) GetEntityTypeName() *EntityTypeName {
	if a == nil {
		return nil
	}
	return a.EntityTypeName
}

func (a *AssignRole) GetEntityRegion() *AssignRoleEntityRegion {
	if a == nil {
		return nil
	}
	return a.EntityRegion
}
