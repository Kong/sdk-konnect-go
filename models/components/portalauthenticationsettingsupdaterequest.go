// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"github.com/Kong/sdk-konnect-go/internal/utils"
)

// PortalAuthenticationSettingsUpdateRequest - Properties to update a portal's developer auth settings.
type PortalAuthenticationSettingsUpdateRequest struct {
	// The organization has basic auth enabled.
	BasicAuthEnabled *bool `default:"null" json:"basic_auth_enabled"`
	// The organization has OIDC disabled.
	OidcAuthEnabled *bool `default:"null" json:"oidc_auth_enabled"`
	// The portal has SAML enabled or disabled.
	SamlAuthEnabled *bool `default:"null" json:"saml_auth_enabled"`
	// Whether IdP groups determine the Konnect Portal teams a developer has.
	OidcTeamMappingEnabled *bool `default:"null" json:"oidc_team_mapping_enabled"`
	// Whether a Konnect Identity Admin assigns teams to a developer.
	KonnectMappingEnabled *bool `default:"null" json:"konnect_mapping_enabled"`
	// Whether IdP groups determine the Konnect Portal teams a developer has. This will soon replace oidc_team_mapping_enabled.
	IdpMappingEnabled *bool    `default:"null" json:"idp_mapping_enabled"`
	OidcIssuer        *string  `default:"null" json:"oidc_issuer"`
	OidcClientID      *string  `default:"null" json:"oidc_client_id"`
	OidcClientSecret  *string  `default:"null" json:"oidc_client_secret"`
	OidcScopes        []string `json:"oidc_scopes,omitempty"`
	// Mappings from a portal developer atribute to an Identity Provider claim.
	OidcClaimMappings *PortalClaimMappings `json:"oidc_claim_mappings,omitempty"`
}

func (p PortalAuthenticationSettingsUpdateRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *PortalAuthenticationSettingsUpdateRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (p *PortalAuthenticationSettingsUpdateRequest) GetBasicAuthEnabled() *bool {
	if p == nil {
		return nil
	}
	return p.BasicAuthEnabled
}

func (p *PortalAuthenticationSettingsUpdateRequest) GetOidcAuthEnabled() *bool {
	if p == nil {
		return nil
	}
	return p.OidcAuthEnabled
}

func (p *PortalAuthenticationSettingsUpdateRequest) GetSamlAuthEnabled() *bool {
	if p == nil {
		return nil
	}
	return p.SamlAuthEnabled
}

func (p *PortalAuthenticationSettingsUpdateRequest) GetOidcTeamMappingEnabled() *bool {
	if p == nil {
		return nil
	}
	return p.OidcTeamMappingEnabled
}

func (p *PortalAuthenticationSettingsUpdateRequest) GetKonnectMappingEnabled() *bool {
	if p == nil {
		return nil
	}
	return p.KonnectMappingEnabled
}

func (p *PortalAuthenticationSettingsUpdateRequest) GetIdpMappingEnabled() *bool {
	if p == nil {
		return nil
	}
	return p.IdpMappingEnabled
}

func (p *PortalAuthenticationSettingsUpdateRequest) GetOidcIssuer() *string {
	if p == nil {
		return nil
	}
	return p.OidcIssuer
}

func (p *PortalAuthenticationSettingsUpdateRequest) GetOidcClientID() *string {
	if p == nil {
		return nil
	}
	return p.OidcClientID
}

func (p *PortalAuthenticationSettingsUpdateRequest) GetOidcClientSecret() *string {
	if p == nil {
		return nil
	}
	return p.OidcClientSecret
}

func (p *PortalAuthenticationSettingsUpdateRequest) GetOidcScopes() []string {
	if p == nil {
		return nil
	}
	return p.OidcScopes
}

func (p *PortalAuthenticationSettingsUpdateRequest) GetOidcClaimMappings() *PortalClaimMappings {
	if p == nil {
		return nil
	}
	return p.OidcClaimMappings
}
