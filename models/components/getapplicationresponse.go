// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"errors"
	"fmt"
	"github.com/Kong/sdk-konnect-go/internal/utils"
	"time"
)

// GetApplicationResponsePortal - Information about the portal the application is in.
type GetApplicationResponsePortal struct {
	// Contains a unique identifier used for this resource.
	ID string `json:"id"`
}

func (o *GetApplicationResponsePortal) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

type KeyAuthApplication struct {
	// Contains a unique identifier used for this resource.
	ID string `json:"id"`
	// An ISO-8601 timestamp representation of entity creation date.
	CreatedAt time.Time `json:"created_at"`
	// An ISO-8601 timestamp representation of entity update date.
	UpdatedAt time.Time `json:"updated_at"`
	// The name of the application.
	Name string `json:"name"`
	// A description of the application.
	Description *string `json:"description"`
	// KeyAuth Auth strategy that the application uses.
	AuthStrategy AuthStrategyKeyAuth `json:"auth_strategy"`
	// Information about the portal the application is in.
	Portal GetApplicationResponsePortal `json:"portal"`
	// The number of API registrations that are associated with the application. Registrations of any status are included in the count.
	RegistrationCount float64 `json:"registration_count"`
}

func (k KeyAuthApplication) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(k, "", false)
}

func (k *KeyAuthApplication) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &k, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *KeyAuthApplication) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *KeyAuthApplication) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *KeyAuthApplication) GetUpdatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.UpdatedAt
}

func (o *KeyAuthApplication) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *KeyAuthApplication) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *KeyAuthApplication) GetAuthStrategy() AuthStrategyKeyAuth {
	if o == nil {
		return AuthStrategyKeyAuth{}
	}
	return o.AuthStrategy
}

func (o *KeyAuthApplication) GetPortal() GetApplicationResponsePortal {
	if o == nil {
		return GetApplicationResponsePortal{}
	}
	return o.Portal
}

func (o *KeyAuthApplication) GetRegistrationCount() float64 {
	if o == nil {
		return 0.0
	}
	return o.RegistrationCount
}

// GetApplicationResponseDcrProvider - Information about the DCR provider this application uses, if using DCR.
type GetApplicationResponseDcrProvider struct {
	// Contains a unique identifier used for this resource.
	ID string `json:"id"`
}

func (o *GetApplicationResponseDcrProvider) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

// GetApplicationResponse1Portal - Information about the portal the application is in.
type GetApplicationResponse1Portal struct {
	// Contains a unique identifier used for this resource.
	ID string `json:"id"`
}

func (o *GetApplicationResponse1Portal) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

type ClientCredentialsApplication struct {
	// Contains a unique identifier used for this resource.
	ID string `json:"id"`
	// An ISO-8601 timestamp representation of entity creation date.
	CreatedAt time.Time `json:"created_at"`
	// An ISO-8601 timestamp representation of entity update date.
	UpdatedAt time.Time `json:"updated_at"`
	// The name of the application.
	Name string `json:"name"`
	// A description of the application.
	Description *string `json:"description"`
	// The ID used to linked the portal application to an Identity Provider application.
	ClientID string `json:"client_id"`
	// The number of API registrations that are associated with the application. Registrations of any status are included in the count.
	RegistrationCount float64 `json:"registration_count"`
	// Information about the DCR provider this application uses, if using DCR.
	DcrProvider *GetApplicationResponseDcrProvider `json:"dcr_provider"`
	// Information about the portal the application is in.
	Portal GetApplicationResponse1Portal `json:"portal"`
	// Client Credential Auth strategy that the application uses.
	AuthStrategy AuthStrategyClientCredentials `json:"auth_strategy"`
	// List of granted scopes for the application. Null if application type does not support returning granted scopes.
	GrantedScopes []string `json:"granted_scopes"`
}

func (c ClientCredentialsApplication) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *ClientCredentialsApplication) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *ClientCredentialsApplication) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ClientCredentialsApplication) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *ClientCredentialsApplication) GetUpdatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.UpdatedAt
}

func (o *ClientCredentialsApplication) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ClientCredentialsApplication) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *ClientCredentialsApplication) GetClientID() string {
	if o == nil {
		return ""
	}
	return o.ClientID
}

func (o *ClientCredentialsApplication) GetRegistrationCount() float64 {
	if o == nil {
		return 0.0
	}
	return o.RegistrationCount
}

func (o *ClientCredentialsApplication) GetDcrProvider() *GetApplicationResponseDcrProvider {
	if o == nil {
		return nil
	}
	return o.DcrProvider
}

func (o *ClientCredentialsApplication) GetPortal() GetApplicationResponse1Portal {
	if o == nil {
		return GetApplicationResponse1Portal{}
	}
	return o.Portal
}

func (o *ClientCredentialsApplication) GetAuthStrategy() AuthStrategyClientCredentials {
	if o == nil {
		return AuthStrategyClientCredentials{}
	}
	return o.AuthStrategy
}

func (o *ClientCredentialsApplication) GetGrantedScopes() []string {
	if o == nil {
		return nil
	}
	return o.GrantedScopes
}

type GetApplicationResponseType string

const (
	GetApplicationResponseTypeClientCredentialsApplication GetApplicationResponseType = "Client Credentials Application"
	GetApplicationResponseTypeKeyAuthApplication           GetApplicationResponseType = "Key Auth Application"
)

// GetApplicationResponse - Details about an application in a portal.
type GetApplicationResponse struct {
	ClientCredentialsApplication *ClientCredentialsApplication `queryParam:"inline"`
	KeyAuthApplication           *KeyAuthApplication           `queryParam:"inline"`

	Type GetApplicationResponseType
}

func CreateGetApplicationResponseClientCredentialsApplication(clientCredentialsApplication ClientCredentialsApplication) GetApplicationResponse {
	typ := GetApplicationResponseTypeClientCredentialsApplication

	return GetApplicationResponse{
		ClientCredentialsApplication: &clientCredentialsApplication,
		Type:                         typ,
	}
}

func CreateGetApplicationResponseKeyAuthApplication(keyAuthApplication KeyAuthApplication) GetApplicationResponse {
	typ := GetApplicationResponseTypeKeyAuthApplication

	return GetApplicationResponse{
		KeyAuthApplication: &keyAuthApplication,
		Type:               typ,
	}
}

func (u *GetApplicationResponse) UnmarshalJSON(data []byte) error {

	var keyAuthApplication KeyAuthApplication = KeyAuthApplication{}
	if err := utils.UnmarshalJSON(data, &keyAuthApplication, "", true, true); err == nil {
		u.KeyAuthApplication = &keyAuthApplication
		u.Type = GetApplicationResponseTypeKeyAuthApplication
		return nil
	}

	var clientCredentialsApplication ClientCredentialsApplication = ClientCredentialsApplication{}
	if err := utils.UnmarshalJSON(data, &clientCredentialsApplication, "", true, true); err == nil {
		u.ClientCredentialsApplication = &clientCredentialsApplication
		u.Type = GetApplicationResponseTypeClientCredentialsApplication
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetApplicationResponse", string(data))
}

func (u GetApplicationResponse) MarshalJSON() ([]byte, error) {
	if u.ClientCredentialsApplication != nil {
		return utils.MarshalJSON(u.ClientCredentialsApplication, "", true)
	}

	if u.KeyAuthApplication != nil {
		return utils.MarshalJSON(u.KeyAuthApplication, "", true)
	}

	return nil, errors.New("could not marshal union type GetApplicationResponse: all fields are null")
}
