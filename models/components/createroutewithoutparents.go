// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

type CreateRouteWithoutParentsDestinations struct {
	IP   *string `json:"ip,omitempty"`
	Port *int64  `json:"port,omitempty"`
}

func (o *CreateRouteWithoutParentsDestinations) GetIP() *string {
	if o == nil {
		return nil
	}
	return o.IP
}

func (o *CreateRouteWithoutParentsDestinations) GetPort() *int64 {
	if o == nil {
		return nil
	}
	return o.Port
}

// CreateRouteWithoutParentsHTTPSRedirectStatusCode - The status code Kong responds with when all properties of a Route match except the protocol i.e. if the protocol of the request is `HTTP` instead of `HTTPS`. `Location` header is injected by Kong if the field is set to 301, 302, 307 or 308. Note: This config applies only if the Route is configured to only accept the `https` protocol.
type CreateRouteWithoutParentsHTTPSRedirectStatusCode int64

const (
	CreateRouteWithoutParentsHTTPSRedirectStatusCodeFourHundredAndTwentySix CreateRouteWithoutParentsHTTPSRedirectStatusCode = 426
	CreateRouteWithoutParentsHTTPSRedirectStatusCodeThreeHundredAndOne      CreateRouteWithoutParentsHTTPSRedirectStatusCode = 301
	CreateRouteWithoutParentsHTTPSRedirectStatusCodeThreeHundredAndTwo      CreateRouteWithoutParentsHTTPSRedirectStatusCode = 302
	CreateRouteWithoutParentsHTTPSRedirectStatusCodeThreeHundredAndSeven    CreateRouteWithoutParentsHTTPSRedirectStatusCode = 307
	CreateRouteWithoutParentsHTTPSRedirectStatusCodeThreeHundredAndEight    CreateRouteWithoutParentsHTTPSRedirectStatusCode = 308
)

func (e CreateRouteWithoutParentsHTTPSRedirectStatusCode) ToPointer() *CreateRouteWithoutParentsHTTPSRedirectStatusCode {
	return &e
}
func (e *CreateRouteWithoutParentsHTTPSRedirectStatusCode) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 426:
		fallthrough
	case 301:
		fallthrough
	case 302:
		fallthrough
	case 307:
		fallthrough
	case 308:
		*e = CreateRouteWithoutParentsHTTPSRedirectStatusCode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateRouteWithoutParentsHTTPSRedirectStatusCode: %v", v)
	}
}

// CreateRouteWithoutParentsPathHandling - Controls how the Service path, Route path and requested path are combined when sending a request to the upstream. See above for a detailed description of each behavior.
type CreateRouteWithoutParentsPathHandling string

const (
	CreateRouteWithoutParentsPathHandlingV0 CreateRouteWithoutParentsPathHandling = "v0"
	CreateRouteWithoutParentsPathHandlingV1 CreateRouteWithoutParentsPathHandling = "v1"
)

func (e CreateRouteWithoutParentsPathHandling) ToPointer() *CreateRouteWithoutParentsPathHandling {
	return &e
}
func (e *CreateRouteWithoutParentsPathHandling) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "v0":
		fallthrough
	case "v1":
		*e = CreateRouteWithoutParentsPathHandling(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateRouteWithoutParentsPathHandling: %v", v)
	}
}

type CreateRouteWithoutParentsProtocols string

const (
	CreateRouteWithoutParentsProtocolsGrpc           CreateRouteWithoutParentsProtocols = "grpc"
	CreateRouteWithoutParentsProtocolsGrpcs          CreateRouteWithoutParentsProtocols = "grpcs"
	CreateRouteWithoutParentsProtocolsHTTP           CreateRouteWithoutParentsProtocols = "http"
	CreateRouteWithoutParentsProtocolsHTTPS          CreateRouteWithoutParentsProtocols = "https"
	CreateRouteWithoutParentsProtocolsTCP            CreateRouteWithoutParentsProtocols = "tcp"
	CreateRouteWithoutParentsProtocolsTLS            CreateRouteWithoutParentsProtocols = "tls"
	CreateRouteWithoutParentsProtocolsTLSPassthrough CreateRouteWithoutParentsProtocols = "tls_passthrough"
	CreateRouteWithoutParentsProtocolsUDP            CreateRouteWithoutParentsProtocols = "udp"
	CreateRouteWithoutParentsProtocolsWs             CreateRouteWithoutParentsProtocols = "ws"
	CreateRouteWithoutParentsProtocolsWss            CreateRouteWithoutParentsProtocols = "wss"
)

func (e CreateRouteWithoutParentsProtocols) ToPointer() *CreateRouteWithoutParentsProtocols {
	return &e
}
func (e *CreateRouteWithoutParentsProtocols) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "grpc":
		fallthrough
	case "grpcs":
		fallthrough
	case "http":
		fallthrough
	case "https":
		fallthrough
	case "tcp":
		fallthrough
	case "tls":
		fallthrough
	case "tls_passthrough":
		fallthrough
	case "udp":
		fallthrough
	case "ws":
		fallthrough
	case "wss":
		*e = CreateRouteWithoutParentsProtocols(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateRouteWithoutParentsProtocols: %v", v)
	}
}

type CreateRouteWithoutParentsSources struct {
	IP   *string `json:"ip,omitempty"`
	Port *int64  `json:"port,omitempty"`
}

func (o *CreateRouteWithoutParentsSources) GetIP() *string {
	if o == nil {
		return nil
	}
	return o.IP
}

func (o *CreateRouteWithoutParentsSources) GetPort() *int64 {
	if o == nil {
		return nil
	}
	return o.Port
}

// CreateRouteWithoutParents - The request schema for the create route's request.
type CreateRouteWithoutParents struct {
	// A list of IP destinations of incoming connections that match this Route when using stream routing. Each entry is an object with fields "ip" (optionally in CIDR range notation) and/or "port".
	Destinations []CreateRouteWithoutParentsDestinations `json:"destinations,omitempty"`
	// One or more lists of values indexed by header name that will cause this Route to match if present in the request. The `Host` header cannot be used with this attribute: hosts should be specified using the `hosts` attribute. When `headers` contains only one value and that value starts with the special prefix `~*`, the value is interpreted as a regular expression.
	Headers map[string]string `json:"headers,omitempty"`
	// A list of domain names that match this Route. Note that the hosts value is case sensitive.
	Hosts []string `json:"hosts,omitempty"`
	// The status code Kong responds with when all properties of a Route match except the protocol i.e. if the protocol of the request is `HTTP` instead of `HTTPS`. `Location` header is injected by Kong if the field is set to 301, 302, 307 or 308. Note: This config applies only if the Route is configured to only accept the `https` protocol.
	HTTPSRedirectStatusCode *CreateRouteWithoutParentsHTTPSRedirectStatusCode `json:"https_redirect_status_code,omitempty"`
	// A list of HTTP methods that match this Route.
	Methods []string `json:"methods,omitempty"`
	// The name of the Route. Route names must be unique, and they are case sensitive. For example, there can be two different Routes named "test" and "Test".
	Name *string `json:"name,omitempty"`
	// Controls how the Service path, Route path and requested path are combined when sending a request to the upstream. See above for a detailed description of each behavior.
	PathHandling *CreateRouteWithoutParentsPathHandling `json:"path_handling,omitempty"`
	// A list of paths that match this Route.
	Paths []string `json:"paths,omitempty"`
	// When matching a Route via one of the `hosts` domain names, use the request `Host` header in the upstream request headers. If set to `false`, the upstream `Host` header will be that of the Service's `host`.
	PreserveHost *bool `json:"preserve_host,omitempty"`
	// An array of the protocols this Route should allow. See the [Route Object](#route-object) section for a list of accepted protocols. When set to only `"https"`, HTTP requests are answered with an upgrade error. When set to only `"http"`, HTTPS requests are answered with an error.
	Protocols []CreateRouteWithoutParentsProtocols `json:"protocols,omitempty"`
	// A number used to choose which route resolves a given request when several routes match it using regexes simultaneously. When two routes match the path and have the same `regex_priority`, the older one (lowest `created_at`) is used. Note that the priority for non-regex routes is different (longer non-regex routes are matched before shorter ones).
	RegexPriority *int64 `json:"regex_priority,omitempty"`
	// Whether to enable request body buffering or not. With HTTP 1.1, it may make sense to turn this off on services that receive data with chunked transfer encoding.
	RequestBuffering *bool `json:"request_buffering,omitempty"`
	// Whether to enable response body buffering or not. With HTTP 1.1, it may make sense to turn this off on services that send data with chunked transfer encoding.
	ResponseBuffering *bool `json:"response_buffering,omitempty"`
	// A list of SNIs that match this Route when using stream routing.
	Snis []string `json:"snis,omitempty"`
	// A list of IP sources of incoming connections that match this Route when using stream routing. Each entry is an object with fields "ip" (optionally in CIDR range notation) and/or "port".
	Sources []CreateRouteWithoutParentsSources `json:"sources,omitempty"`
	// When matching a Route via one of the `paths`, strip the matching prefix from the upstream request URL.
	StripPath *bool `json:"strip_path,omitempty"`
	// An optional set of strings associated with the Route for grouping and filtering.
	Tags []string `json:"tags,omitempty"`
}

func (o *CreateRouteWithoutParents) GetDestinations() []CreateRouteWithoutParentsDestinations {
	if o == nil {
		return nil
	}
	return o.Destinations
}

func (o *CreateRouteWithoutParents) GetHeaders() map[string]string {
	if o == nil {
		return nil
	}
	return o.Headers
}

func (o *CreateRouteWithoutParents) GetHosts() []string {
	if o == nil {
		return nil
	}
	return o.Hosts
}

func (o *CreateRouteWithoutParents) GetHTTPSRedirectStatusCode() *CreateRouteWithoutParentsHTTPSRedirectStatusCode {
	if o == nil {
		return nil
	}
	return o.HTTPSRedirectStatusCode
}

func (o *CreateRouteWithoutParents) GetMethods() []string {
	if o == nil {
		return nil
	}
	return o.Methods
}

func (o *CreateRouteWithoutParents) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *CreateRouteWithoutParents) GetPathHandling() *CreateRouteWithoutParentsPathHandling {
	if o == nil {
		return nil
	}
	return o.PathHandling
}

func (o *CreateRouteWithoutParents) GetPaths() []string {
	if o == nil {
		return nil
	}
	return o.Paths
}

func (o *CreateRouteWithoutParents) GetPreserveHost() *bool {
	if o == nil {
		return nil
	}
	return o.PreserveHost
}

func (o *CreateRouteWithoutParents) GetProtocols() []CreateRouteWithoutParentsProtocols {
	if o == nil {
		return nil
	}
	return o.Protocols
}

func (o *CreateRouteWithoutParents) GetRegexPriority() *int64 {
	if o == nil {
		return nil
	}
	return o.RegexPriority
}

func (o *CreateRouteWithoutParents) GetRequestBuffering() *bool {
	if o == nil {
		return nil
	}
	return o.RequestBuffering
}

func (o *CreateRouteWithoutParents) GetResponseBuffering() *bool {
	if o == nil {
		return nil
	}
	return o.ResponseBuffering
}

func (o *CreateRouteWithoutParents) GetSnis() []string {
	if o == nil {
		return nil
	}
	return o.Snis
}

func (o *CreateRouteWithoutParents) GetSources() []CreateRouteWithoutParentsSources {
	if o == nil {
		return nil
	}
	return o.Sources
}

func (o *CreateRouteWithoutParents) GetStripPath() *bool {
	if o == nil {
		return nil
	}
	return o.StripPath
}

func (o *CreateRouteWithoutParents) GetTags() []string {
	if o == nil {
		return nil
	}
	return o.Tags
}
