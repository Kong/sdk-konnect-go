// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"github.com/Kong/sdk-konnect-go/internal/utils"
)

type PluginWithoutParentsAfter struct {
	Access []string `json:"access,omitempty"`
}

func (o *PluginWithoutParentsAfter) GetAccess() []string {
	if o == nil {
		return nil
	}
	return o.Access
}

type PluginWithoutParentsBefore struct {
	Access []string `json:"access,omitempty"`
}

func (o *PluginWithoutParentsBefore) GetAccess() []string {
	if o == nil {
		return nil
	}
	return o.Access
}

type PluginWithoutParentsOrdering struct {
	After  *PluginWithoutParentsAfter  `json:"after,omitempty"`
	Before *PluginWithoutParentsBefore `json:"before,omitempty"`
}

func (o *PluginWithoutParentsOrdering) GetAfter() *PluginWithoutParentsAfter {
	if o == nil {
		return nil
	}
	return o.After
}

func (o *PluginWithoutParentsOrdering) GetBefore() *PluginWithoutParentsBefore {
	if o == nil {
		return nil
	}
	return o.Before
}

type PluginWithoutParentsProtocols string

const (
	PluginWithoutParentsProtocolsGrpc           PluginWithoutParentsProtocols = "grpc"
	PluginWithoutParentsProtocolsGrpcs          PluginWithoutParentsProtocols = "grpcs"
	PluginWithoutParentsProtocolsHTTP           PluginWithoutParentsProtocols = "http"
	PluginWithoutParentsProtocolsHTTPS          PluginWithoutParentsProtocols = "https"
	PluginWithoutParentsProtocolsTCP            PluginWithoutParentsProtocols = "tcp"
	PluginWithoutParentsProtocolsTLS            PluginWithoutParentsProtocols = "tls"
	PluginWithoutParentsProtocolsTLSPassthrough PluginWithoutParentsProtocols = "tls_passthrough"
	PluginWithoutParentsProtocolsUDP            PluginWithoutParentsProtocols = "udp"
	PluginWithoutParentsProtocolsWs             PluginWithoutParentsProtocols = "ws"
	PluginWithoutParentsProtocolsWss            PluginWithoutParentsProtocols = "wss"
)

func (e PluginWithoutParentsProtocols) ToPointer() *PluginWithoutParentsProtocols {
	return &e
}
func (e *PluginWithoutParentsProtocols) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "grpc":
		fallthrough
	case "grpcs":
		fallthrough
	case "http":
		fallthrough
	case "https":
		fallthrough
	case "tcp":
		fallthrough
	case "tls":
		fallthrough
	case "tls_passthrough":
		fallthrough
	case "udp":
		fallthrough
	case "ws":
		fallthrough
	case "wss":
		*e = PluginWithoutParentsProtocols(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PluginWithoutParentsProtocols: %v", v)
	}
}

// PluginWithoutParents - A Plugin entity represents a plugin configuration that will be executed during the HTTP request/response lifecycle. It is how you can add functionalities to Services that run behind Kong, like Authentication or Rate Limiting for example. You can find more information about how to install and what values each plugin takes by visiting the [Kong Hub](https://docs.konghq.com/hub/). When adding a Plugin Configuration to a Service, every request made by a client to that Service will run said Plugin. If a Plugin needs to be tuned to different values for some specific Consumers, you can do so by creating a separate plugin instance that specifies both the Service and the Consumer, through the `service` and `consumer` fields.
type PluginWithoutParents struct {
	// The configuration properties for the Plugin which can be found on the plugins documentation page in the [Kong Hub](https://docs.konghq.com/hub/).
	Config map[string]any `json:"config"`
	// Whether the plugin is applied.
	Enabled      *bool   `default:"true" json:"enabled"`
	ID           *string `json:"id,omitempty"`
	InstanceName *string `json:"instance_name,omitempty"`
	// The name of the Plugin that's going to be added. Currently, the Plugin must be installed in every Kong instance separately.
	Name     string                        `json:"name"`
	Ordering *PluginWithoutParentsOrdering `json:"ordering,omitempty"`
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols []PluginWithoutParentsProtocols `json:"protocols,omitempty"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `json:"tags,omitempty"`
}

func (p PluginWithoutParents) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *PluginWithoutParents) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *PluginWithoutParents) GetConfig() map[string]any {
	if o == nil {
		return map[string]any{}
	}
	return o.Config
}

func (o *PluginWithoutParents) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

func (o *PluginWithoutParents) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *PluginWithoutParents) GetInstanceName() *string {
	if o == nil {
		return nil
	}
	return o.InstanceName
}

func (o *PluginWithoutParents) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *PluginWithoutParents) GetOrdering() *PluginWithoutParentsOrdering {
	if o == nil {
		return nil
	}
	return o.Ordering
}

func (o *PluginWithoutParents) GetProtocols() []PluginWithoutParentsProtocols {
	if o == nil {
		return nil
	}
	return o.Protocols
}

func (o *PluginWithoutParents) GetTags() []string {
	if o == nil {
		return nil
	}
	return o.Tags
}
