// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"github.com/Kong/sdk-konnect-go/internal/utils"
)

// PluginWithoutParentsConsumer - If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
type PluginWithoutParentsConsumer struct {
	ID *string `json:"id,omitempty"`
}

func (p *PluginWithoutParentsConsumer) GetID() *string {
	if p == nil {
		return nil
	}
	return p.ID
}

// PluginWithoutParentsConsumerGroup - If set, the plugin will activate only for requests where the specified group has been authenticated
type PluginWithoutParentsConsumerGroup struct {
	ID *string `json:"id,omitempty"`
}

func (p *PluginWithoutParentsConsumerGroup) GetID() *string {
	if p == nil {
		return nil
	}
	return p.ID
}

type PluginWithoutParentsAfter struct {
	Access []string `json:"access,omitempty"`
}

func (p *PluginWithoutParentsAfter) GetAccess() []string {
	if p == nil {
		return nil
	}
	return p.Access
}

type PluginWithoutParentsBefore struct {
	Access []string `json:"access,omitempty"`
}

func (p *PluginWithoutParentsBefore) GetAccess() []string {
	if p == nil {
		return nil
	}
	return p.Access
}

type PluginWithoutParentsOrdering struct {
	After  *PluginWithoutParentsAfter  `json:"after,omitempty"`
	Before *PluginWithoutParentsBefore `json:"before,omitempty"`
}

func (p *PluginWithoutParentsOrdering) GetAfter() *PluginWithoutParentsAfter {
	if p == nil {
		return nil
	}
	return p.After
}

func (p *PluginWithoutParentsOrdering) GetBefore() *PluginWithoutParentsBefore {
	if p == nil {
		return nil
	}
	return p.Before
}

type PluginWithoutParentsPartials struct {
	// A string representing a UUID (universally unique identifier).
	ID *string `json:"id,omitempty"`
	// A unique string representing a UTF-8 encoded name.
	Name *string `default:"null" json:"name"`
	Path *string `default:"null" json:"path"`
}

func (p PluginWithoutParentsPartials) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *PluginWithoutParentsPartials) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (p *PluginWithoutParentsPartials) GetID() *string {
	if p == nil {
		return nil
	}
	return p.ID
}

func (p *PluginWithoutParentsPartials) GetName() *string {
	if p == nil {
		return nil
	}
	return p.Name
}

func (p *PluginWithoutParentsPartials) GetPath() *string {
	if p == nil {
		return nil
	}
	return p.Path
}

// PluginWithoutParentsProtocols - A string representing a protocol, such as HTTP or HTTPS.
type PluginWithoutParentsProtocols string

const (
	PluginWithoutParentsProtocolsGrpc           PluginWithoutParentsProtocols = "grpc"
	PluginWithoutParentsProtocolsGrpcs          PluginWithoutParentsProtocols = "grpcs"
	PluginWithoutParentsProtocolsHTTP           PluginWithoutParentsProtocols = "http"
	PluginWithoutParentsProtocolsHTTPS          PluginWithoutParentsProtocols = "https"
	PluginWithoutParentsProtocolsTCP            PluginWithoutParentsProtocols = "tcp"
	PluginWithoutParentsProtocolsTLS            PluginWithoutParentsProtocols = "tls"
	PluginWithoutParentsProtocolsTLSPassthrough PluginWithoutParentsProtocols = "tls_passthrough"
	PluginWithoutParentsProtocolsUDP            PluginWithoutParentsProtocols = "udp"
	PluginWithoutParentsProtocolsWs             PluginWithoutParentsProtocols = "ws"
	PluginWithoutParentsProtocolsWss            PluginWithoutParentsProtocols = "wss"
)

func (e PluginWithoutParentsProtocols) ToPointer() *PluginWithoutParentsProtocols {
	return &e
}

// PluginWithoutParentsRoute - If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
type PluginWithoutParentsRoute struct {
	ID *string `json:"id,omitempty"`
}

func (p *PluginWithoutParentsRoute) GetID() *string {
	if p == nil {
		return nil
	}
	return p.ID
}

// PluginWithoutParentsService - If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
type PluginWithoutParentsService struct {
	ID *string `json:"id,omitempty"`
}

func (p *PluginWithoutParentsService) GetID() *string {
	if p == nil {
		return nil
	}
	return p.ID
}

// PluginWithoutParents - A Plugin entity represents a plugin configuration that will be executed during the HTTP request/response lifecycle. It is how you can add functionalities to Services that run behind Kong, like Authentication or Rate Limiting for example. You can find more information about how to install and what values each plugin takes by visiting the [Kong Hub](https://docs.konghq.com/hub/). When adding a Plugin Configuration to a Service, every request made by a client to that Service will run said Plugin. If a Plugin needs to be tuned to different values for some specific Consumers, you can do so by creating a separate plugin instance that specifies both the Service and the Consumer, through the `service` and `consumer` fields.
type PluginWithoutParents struct {
	// The configuration properties for the Plugin which can be found on the plugins documentation page in the [Kong Hub](https://docs.konghq.com/hub/).
	Config map[string]any `json:"config,omitempty"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer *PluginWithoutParentsConsumer `json:"consumer,omitempty"`
	// If set, the plugin will activate only for requests where the specified group has been authenticated
	ConsumerGroup *PluginWithoutParentsConsumerGroup `json:"consumer_group,omitempty"`
	// Unix epoch when the resource was created.
	CreatedAt *int64 `json:"created_at,omitempty"`
	// Whether the plugin is applied.
	Enabled *bool `default:"true" json:"enabled"`
	// A string representing a UUID (universally unique identifier).
	ID *string `json:"id,omitempty"`
	// A unique string representing a UTF-8 encoded name.
	InstanceName *string `default:"null" json:"instance_name"`
	// The name of the Plugin that's going to be added. Currently, the Plugin must be installed in every Kong instance separately.
	Name     string                        `json:"name"`
	Ordering *PluginWithoutParentsOrdering `json:"ordering,omitempty"`
	// A list of partials to be used by the plugin.
	Partials []PluginWithoutParentsPartials `json:"partials,omitempty"`
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols []PluginWithoutParentsProtocols `json:"protocols,omitempty"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route *PluginWithoutParentsRoute `json:"route,omitempty"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *PluginWithoutParentsService `json:"service,omitempty"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `json:"tags,omitempty"`
	// Unix epoch when the resource was last updated.
	UpdatedAt *int64 `json:"updated_at,omitempty"`
}

func (p PluginWithoutParents) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *PluginWithoutParents) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, []string{"name"}); err != nil {
		return err
	}
	return nil
}

func (p *PluginWithoutParents) GetConfig() map[string]any {
	if p == nil {
		return nil
	}
	return p.Config
}

func (p *PluginWithoutParents) GetConsumer() *PluginWithoutParentsConsumer {
	if p == nil {
		return nil
	}
	return p.Consumer
}

func (p *PluginWithoutParents) GetConsumerGroup() *PluginWithoutParentsConsumerGroup {
	if p == nil {
		return nil
	}
	return p.ConsumerGroup
}

func (p *PluginWithoutParents) GetCreatedAt() *int64 {
	if p == nil {
		return nil
	}
	return p.CreatedAt
}

func (p *PluginWithoutParents) GetEnabled() *bool {
	if p == nil {
		return nil
	}
	return p.Enabled
}

func (p *PluginWithoutParents) GetID() *string {
	if p == nil {
		return nil
	}
	return p.ID
}

func (p *PluginWithoutParents) GetInstanceName() *string {
	if p == nil {
		return nil
	}
	return p.InstanceName
}

func (p *PluginWithoutParents) GetName() string {
	if p == nil {
		return ""
	}
	return p.Name
}

func (p *PluginWithoutParents) GetOrdering() *PluginWithoutParentsOrdering {
	if p == nil {
		return nil
	}
	return p.Ordering
}

func (p *PluginWithoutParents) GetPartials() []PluginWithoutParentsPartials {
	if p == nil {
		return nil
	}
	return p.Partials
}

func (p *PluginWithoutParents) GetProtocols() []PluginWithoutParentsProtocols {
	if p == nil {
		return nil
	}
	return p.Protocols
}

func (p *PluginWithoutParents) GetRoute() *PluginWithoutParentsRoute {
	if p == nil {
		return nil
	}
	return p.Route
}

func (p *PluginWithoutParents) GetService() *PluginWithoutParentsService {
	if p == nil {
		return nil
	}
	return p.Service
}

func (p *PluginWithoutParents) GetTags() []string {
	if p == nil {
		return nil
	}
	return p.Tags
}

func (p *PluginWithoutParents) GetUpdatedAt() *int64 {
	if p == nil {
		return nil
	}
	return p.UpdatedAt
}
