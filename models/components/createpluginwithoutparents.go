// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"github.com/Kong/sdk-konnect-go/internal/utils"
)

type CreatePluginWithoutParentsProtocols string

const (
	CreatePluginWithoutParentsProtocolsGrpc           CreatePluginWithoutParentsProtocols = "grpc"
	CreatePluginWithoutParentsProtocolsGrpcs          CreatePluginWithoutParentsProtocols = "grpcs"
	CreatePluginWithoutParentsProtocolsHTTP           CreatePluginWithoutParentsProtocols = "http"
	CreatePluginWithoutParentsProtocolsHTTPS          CreatePluginWithoutParentsProtocols = "https"
	CreatePluginWithoutParentsProtocolsTCP            CreatePluginWithoutParentsProtocols = "tcp"
	CreatePluginWithoutParentsProtocolsTLS            CreatePluginWithoutParentsProtocols = "tls"
	CreatePluginWithoutParentsProtocolsTLSPassthrough CreatePluginWithoutParentsProtocols = "tls_passthrough"
	CreatePluginWithoutParentsProtocolsUDP            CreatePluginWithoutParentsProtocols = "udp"
	CreatePluginWithoutParentsProtocolsWs             CreatePluginWithoutParentsProtocols = "ws"
	CreatePluginWithoutParentsProtocolsWss            CreatePluginWithoutParentsProtocols = "wss"
)

func (e CreatePluginWithoutParentsProtocols) ToPointer() *CreatePluginWithoutParentsProtocols {
	return &e
}
func (e *CreatePluginWithoutParentsProtocols) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "grpc":
		fallthrough
	case "grpcs":
		fallthrough
	case "http":
		fallthrough
	case "https":
		fallthrough
	case "tcp":
		fallthrough
	case "tls":
		fallthrough
	case "tls_passthrough":
		fallthrough
	case "udp":
		fallthrough
	case "ws":
		fallthrough
	case "wss":
		*e = CreatePluginWithoutParentsProtocols(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreatePluginWithoutParentsProtocols: %v", v)
	}
}

type CreatePluginWithoutParents struct {
	// The configuration properties for the Plugin which can be found on the plugins documentation page in the [Kong Hub](https://docs.konghq.com/hub/).
	Config map[string]any `json:"config,omitempty"`
	// Whether the plugin is applied.
	Enabled *bool `default:"true" json:"enabled"`
	// The name of the Plugin that's going to be added. Currently, the Plugin must be installed in every Kong instance separately.
	Name     *string        `json:"name,omitempty"`
	Ordering map[string]any `json:"ordering,omitempty"`
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols []CreatePluginWithoutParentsProtocols `json:"protocols,omitempty"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `json:"tags,omitempty"`
}

func (c CreatePluginWithoutParents) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreatePluginWithoutParents) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CreatePluginWithoutParents) GetConfig() map[string]any {
	if o == nil {
		return nil
	}
	return o.Config
}

func (o *CreatePluginWithoutParents) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

func (o *CreatePluginWithoutParents) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *CreatePluginWithoutParents) GetOrdering() map[string]any {
	if o == nil {
		return nil
	}
	return o.Ordering
}

func (o *CreatePluginWithoutParents) GetProtocols() []CreatePluginWithoutParentsProtocols {
	if o == nil {
		return nil
	}
	return o.Protocols
}

func (o *CreatePluginWithoutParents) GetTags() []string {
	if o == nil {
		return nil
	}
	return o.Tags
}
