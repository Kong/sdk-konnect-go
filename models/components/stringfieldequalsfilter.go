// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"errors"
	"fmt"
	"github.com/Kong/sdk-konnect-go/internal/utils"
)

type Two1 struct {
}

type StringFieldEqualsFilter2Type string

const (
	StringFieldEqualsFilter2TypeTwo1 StringFieldEqualsFilter2Type = "2_1"
	StringFieldEqualsFilter2TypeStr  StringFieldEqualsFilter2Type = "str"
)

type StringFieldEqualsFilter2 struct {
	Two1 *Two1   `queryParam:"inline"`
	Str  *string `queryParam:"inline"`

	Type StringFieldEqualsFilter2Type
}

func CreateStringFieldEqualsFilter2Two1(two1 Two1) StringFieldEqualsFilter2 {
	typ := StringFieldEqualsFilter2TypeTwo1

	return StringFieldEqualsFilter2{
		Two1: &two1,
		Type: typ,
	}
}

func CreateStringFieldEqualsFilter2Str(str string) StringFieldEqualsFilter2 {
	typ := StringFieldEqualsFilter2TypeStr

	return StringFieldEqualsFilter2{
		Str:  &str,
		Type: typ,
	}
}

func (u *StringFieldEqualsFilter2) UnmarshalJSON(data []byte) error {

	var two1 Two1 = Two1{}
	if err := utils.UnmarshalJSON(data, &two1, "", true, true); err == nil {
		u.Two1 = &two1
		u.Type = StringFieldEqualsFilter2TypeTwo1
		return nil
	}

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = StringFieldEqualsFilter2TypeStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for StringFieldEqualsFilter2", string(data))
}

func (u StringFieldEqualsFilter2) MarshalJSON() ([]byte, error) {
	if u.Two1 != nil {
		return utils.MarshalJSON(u.Two1, "", true)
	}

	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	return nil, errors.New("could not marshal union type StringFieldEqualsFilter2: all fields are null")
}

type StringFieldEqualsFilterType string

const (
	StringFieldEqualsFilterTypeStr                      StringFieldEqualsFilterType = "str"
	StringFieldEqualsFilterTypeStringFieldEqualsFilter2 StringFieldEqualsFilterType = "StringFieldEqualsFilter_2"
)

// StringFieldEqualsFilter - Filters on the given string field value by exact match.
type StringFieldEqualsFilter struct {
	Str                      *string                   `queryParam:"inline"`
	StringFieldEqualsFilter2 *StringFieldEqualsFilter2 `queryParam:"inline"`

	Type StringFieldEqualsFilterType
}

func CreateStringFieldEqualsFilterStr(str string) StringFieldEqualsFilter {
	typ := StringFieldEqualsFilterTypeStr

	return StringFieldEqualsFilter{
		Str:  &str,
		Type: typ,
	}
}

func CreateStringFieldEqualsFilterStringFieldEqualsFilter2(stringFieldEqualsFilter2 StringFieldEqualsFilter2) StringFieldEqualsFilter {
	typ := StringFieldEqualsFilterTypeStringFieldEqualsFilter2

	return StringFieldEqualsFilter{
		StringFieldEqualsFilter2: &stringFieldEqualsFilter2,
		Type:                     typ,
	}
}

func (u *StringFieldEqualsFilter) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = StringFieldEqualsFilterTypeStr
		return nil
	}

	var stringFieldEqualsFilter2 StringFieldEqualsFilter2 = StringFieldEqualsFilter2{}
	if err := utils.UnmarshalJSON(data, &stringFieldEqualsFilter2, "", true, true); err == nil {
		u.StringFieldEqualsFilter2 = &stringFieldEqualsFilter2
		u.Type = StringFieldEqualsFilterTypeStringFieldEqualsFilter2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for StringFieldEqualsFilter", string(data))
}

func (u StringFieldEqualsFilter) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.StringFieldEqualsFilter2 != nil {
		return utils.MarshalJSON(u.StringFieldEqualsFilter2, "", true)
	}

	return nil, errors.New("could not marshal union type StringFieldEqualsFilter: all fields are null")
}
