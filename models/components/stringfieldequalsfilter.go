// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"errors"
	"fmt"
	"github.com/Kong/sdk-konnect-go/internal/utils"
)

type One struct {
}

type TwoType string

const (
	TwoTypeOne TwoType = "1"
	TwoTypeStr TwoType = "str"
)

type Two struct {
	One *One
	Str *string

	Type TwoType
}

func CreateTwoOne(one One) Two {
	typ := TwoTypeOne

	return Two{
		One:  &one,
		Type: typ,
	}
}

func CreateTwoStr(str string) Two {
	typ := TwoTypeStr

	return Two{
		Str:  &str,
		Type: typ,
	}
}

func (u *Two) UnmarshalJSON(data []byte) error {

	var one One = One{}
	if err := utils.UnmarshalJSON(data, &one, "", true, true); err == nil {
		u.One = &one
		u.Type = TwoTypeOne
		return nil
	}

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = TwoTypeStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for Two", string(data))
}

func (u Two) MarshalJSON() ([]byte, error) {
	if u.One != nil {
		return utils.MarshalJSON(u.One, "", true)
	}

	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	return nil, errors.New("could not marshal union type Two: all fields are null")
}

type StringFieldEqualsFilterType string

const (
	StringFieldEqualsFilterTypeStr StringFieldEqualsFilterType = "str"
	StringFieldEqualsFilterTypeTwo StringFieldEqualsFilterType = "2"
)

// StringFieldEqualsFilter - Filter a string value by exact match.
type StringFieldEqualsFilter struct {
	Str *string
	Two *Two

	Type StringFieldEqualsFilterType
}

func CreateStringFieldEqualsFilterStr(str string) StringFieldEqualsFilter {
	typ := StringFieldEqualsFilterTypeStr

	return StringFieldEqualsFilter{
		Str:  &str,
		Type: typ,
	}
}

func CreateStringFieldEqualsFilterTwo(two Two) StringFieldEqualsFilter {
	typ := StringFieldEqualsFilterTypeTwo

	return StringFieldEqualsFilter{
		Two:  &two,
		Type: typ,
	}
}

func (u *StringFieldEqualsFilter) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = StringFieldEqualsFilterTypeStr
		return nil
	}

	var two Two = Two{}
	if err := utils.UnmarshalJSON(data, &two, "", true, true); err == nil {
		u.Two = &two
		u.Type = StringFieldEqualsFilterTypeTwo
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for StringFieldEqualsFilter", string(data))
}

func (u StringFieldEqualsFilter) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Two != nil {
		return utils.MarshalJSON(u.Two, "", true)
	}

	return nil, errors.New("could not marshal union type StringFieldEqualsFilter: all fields are null")
}
