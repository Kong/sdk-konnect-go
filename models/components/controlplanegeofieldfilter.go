// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"errors"
	"fmt"
	"github.com/Kong/sdk-konnect-go/internal/utils"
)

type ControlPlaneGeoFieldFilterType string

const (
	ControlPlaneGeoFieldFilterTypeControlPlaneGeoFieldEqualsFilter     ControlPlaneGeoFieldFilterType = "ControlPlaneGeoFieldEqualsFilter"
	ControlPlaneGeoFieldFilterTypeControlPlaneGeoFieldNotEqualsFilter  ControlPlaneGeoFieldFilterType = "ControlPlaneGeoFieldNotEqualsFilter"
	ControlPlaneGeoFieldFilterTypeControlPlaneGeoFieldOrEqualityFilter ControlPlaneGeoFieldFilterType = "ControlPlaneGeoFieldOrEqualityFilter"
)

type ControlPlaneGeoFieldFilter struct {
	ControlPlaneGeoFieldEqualsFilter     *ControlPlaneGeoFieldEqualsFilter     `queryParam:"inline"`
	ControlPlaneGeoFieldNotEqualsFilter  *ControlPlaneGeoFieldNotEqualsFilter  `queryParam:"inline"`
	ControlPlaneGeoFieldOrEqualityFilter *ControlPlaneGeoFieldOrEqualityFilter `queryParam:"inline"`

	Type ControlPlaneGeoFieldFilterType
}

func CreateControlPlaneGeoFieldFilterControlPlaneGeoFieldEqualsFilter(controlPlaneGeoFieldEqualsFilter ControlPlaneGeoFieldEqualsFilter) ControlPlaneGeoFieldFilter {
	typ := ControlPlaneGeoFieldFilterTypeControlPlaneGeoFieldEqualsFilter

	return ControlPlaneGeoFieldFilter{
		ControlPlaneGeoFieldEqualsFilter: &controlPlaneGeoFieldEqualsFilter,
		Type:                             typ,
	}
}

func CreateControlPlaneGeoFieldFilterControlPlaneGeoFieldNotEqualsFilter(controlPlaneGeoFieldNotEqualsFilter ControlPlaneGeoFieldNotEqualsFilter) ControlPlaneGeoFieldFilter {
	typ := ControlPlaneGeoFieldFilterTypeControlPlaneGeoFieldNotEqualsFilter

	return ControlPlaneGeoFieldFilter{
		ControlPlaneGeoFieldNotEqualsFilter: &controlPlaneGeoFieldNotEqualsFilter,
		Type:                                typ,
	}
}

func CreateControlPlaneGeoFieldFilterControlPlaneGeoFieldOrEqualityFilter(controlPlaneGeoFieldOrEqualityFilter ControlPlaneGeoFieldOrEqualityFilter) ControlPlaneGeoFieldFilter {
	typ := ControlPlaneGeoFieldFilterTypeControlPlaneGeoFieldOrEqualityFilter

	return ControlPlaneGeoFieldFilter{
		ControlPlaneGeoFieldOrEqualityFilter: &controlPlaneGeoFieldOrEqualityFilter,
		Type:                                 typ,
	}
}

func (u *ControlPlaneGeoFieldFilter) UnmarshalJSON(data []byte) error {

	var controlPlaneGeoFieldNotEqualsFilter ControlPlaneGeoFieldNotEqualsFilter = ControlPlaneGeoFieldNotEqualsFilter{}
	if err := utils.UnmarshalJSON(data, &controlPlaneGeoFieldNotEqualsFilter, "", true, true); err == nil {
		u.ControlPlaneGeoFieldNotEqualsFilter = &controlPlaneGeoFieldNotEqualsFilter
		u.Type = ControlPlaneGeoFieldFilterTypeControlPlaneGeoFieldNotEqualsFilter
		return nil
	}

	var controlPlaneGeoFieldOrEqualityFilter ControlPlaneGeoFieldOrEqualityFilter = ControlPlaneGeoFieldOrEqualityFilter{}
	if err := utils.UnmarshalJSON(data, &controlPlaneGeoFieldOrEqualityFilter, "", true, true); err == nil {
		u.ControlPlaneGeoFieldOrEqualityFilter = &controlPlaneGeoFieldOrEqualityFilter
		u.Type = ControlPlaneGeoFieldFilterTypeControlPlaneGeoFieldOrEqualityFilter
		return nil
	}

	var controlPlaneGeoFieldEqualsFilter ControlPlaneGeoFieldEqualsFilter = ControlPlaneGeoFieldEqualsFilter{}
	if err := utils.UnmarshalJSON(data, &controlPlaneGeoFieldEqualsFilter, "", true, true); err == nil {
		u.ControlPlaneGeoFieldEqualsFilter = &controlPlaneGeoFieldEqualsFilter
		u.Type = ControlPlaneGeoFieldFilterTypeControlPlaneGeoFieldEqualsFilter
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for ControlPlaneGeoFieldFilter", string(data))
}

func (u ControlPlaneGeoFieldFilter) MarshalJSON() ([]byte, error) {
	if u.ControlPlaneGeoFieldEqualsFilter != nil {
		return utils.MarshalJSON(u.ControlPlaneGeoFieldEqualsFilter, "", true)
	}

	if u.ControlPlaneGeoFieldNotEqualsFilter != nil {
		return utils.MarshalJSON(u.ControlPlaneGeoFieldNotEqualsFilter, "", true)
	}

	if u.ControlPlaneGeoFieldOrEqualityFilter != nil {
		return utils.MarshalJSON(u.ControlPlaneGeoFieldOrEqualityFilter, "", true)
	}

	return nil, errors.New("could not marshal union type ControlPlaneGeoFieldFilter: all fields are null")
}
