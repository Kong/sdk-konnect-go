// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/Kong/sdk-konnect-go/internal/utils"
	"time"
)

type AppAuthStrategyOpenIDConnectResponseAppAuthStrategyStrategyType string

const (
	AppAuthStrategyOpenIDConnectResponseAppAuthStrategyStrategyTypeOpenidConnect AppAuthStrategyOpenIDConnectResponseAppAuthStrategyStrategyType = "openid_connect"
)

func (e AppAuthStrategyOpenIDConnectResponseAppAuthStrategyStrategyType) ToPointer() *AppAuthStrategyOpenIDConnectResponseAppAuthStrategyStrategyType {
	return &e
}
func (e *AppAuthStrategyOpenIDConnectResponseAppAuthStrategyStrategyType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "openid_connect":
		*e = AppAuthStrategyOpenIDConnectResponseAppAuthStrategyStrategyType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AppAuthStrategyOpenIDConnectResponseAppAuthStrategyStrategyType: %v", v)
	}
}

// AppAuthStrategyOpenIDConnectResponseAppAuthStrategyConfigs - JSON-B object containing the configuration for the OIDC strategy
type AppAuthStrategyOpenIDConnectResponseAppAuthStrategyConfigs struct {
	// A more advanced mode to configure an API Product Version’s Application Auth Strategy.
	// Using this mode will allow developers to use API credentials issued from an external IdP that will authenticate their application requests.
	// Once authenticated, an application will be granted access to any Product Version it is registered for that is configured for the same Auth Strategy.
	// An OIDC strategy may be used in conjunction with a DCR provider to automatically create the IdP application.
	//
	OpenidConnect AppAuthStrategyConfigOpenIDConnect `json:"openid-connect"`
}

func (a AppAuthStrategyOpenIDConnectResponseAppAuthStrategyConfigs) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AppAuthStrategyOpenIDConnectResponseAppAuthStrategyConfigs) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, []string{"openid-connect"}); err != nil {
		return err
	}
	return nil
}

func (a *AppAuthStrategyOpenIDConnectResponseAppAuthStrategyConfigs) GetOpenidConnect() AppAuthStrategyConfigOpenIDConnect {
	if a == nil {
		return AppAuthStrategyConfigOpenIDConnect{}
	}
	return a.OpenidConnect
}

type AppAuthStrategyOpenIDConnectResponseAppAuthStrategyDcrProvider struct {
	// Contains a unique identifier used for this resource.
	ID   string `json:"id"`
	Name string `json:"name"`
	// The display name of the DCR provider. This is used to identify the DCR provider in the Portal UI.
	//
	DisplayName *string `json:"display_name,omitempty"`
	// The type of DCR provider. Can be one of the following - auth0, azureAd, curity, okta, http
	ProviderType DcrProviderType `json:"provider_type"`
}

func (a AppAuthStrategyOpenIDConnectResponseAppAuthStrategyDcrProvider) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AppAuthStrategyOpenIDConnectResponseAppAuthStrategyDcrProvider) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, []string{"id", "name", "provider_type"}); err != nil {
		return err
	}
	return nil
}

func (a *AppAuthStrategyOpenIDConnectResponseAppAuthStrategyDcrProvider) GetID() string {
	if a == nil {
		return ""
	}
	return a.ID
}

func (a *AppAuthStrategyOpenIDConnectResponseAppAuthStrategyDcrProvider) GetName() string {
	if a == nil {
		return ""
	}
	return a.Name
}

func (a *AppAuthStrategyOpenIDConnectResponseAppAuthStrategyDcrProvider) GetDisplayName() *string {
	if a == nil {
		return nil
	}
	return a.DisplayName
}

func (a *AppAuthStrategyOpenIDConnectResponseAppAuthStrategyDcrProvider) GetProviderType() DcrProviderType {
	if a == nil {
		return DcrProviderType("")
	}
	return a.ProviderType
}

// AppAuthStrategyOpenIDConnectResponseAppAuthStrategyOpenIDConnectResponse - Response payload from creating an OIDC Application Auth Strategy
type AppAuthStrategyOpenIDConnectResponseAppAuthStrategyOpenIDConnectResponse struct {
	// Contains a unique identifier used for this resource.
	ID string `json:"id"`
	// The name of the auth strategy. This is used to identify the auth strategy in the Konnect UI.
	//
	Name string `json:"name"`
	// The display name of the Auth strategy. This is used to identify the Auth strategy in the Portal UI.
	//
	DisplayName  string                                                          `json:"display_name"`
	StrategyType AppAuthStrategyOpenIDConnectResponseAppAuthStrategyStrategyType `json:"strategy_type"`
	// JSON-B object containing the configuration for the OIDC strategy
	Configs AppAuthStrategyOpenIDConnectResponseAppAuthStrategyConfigs `json:"configs"`
	// At least one published entity is using this auth strategy.
	Active      bool                                                            `json:"active"`
	DcrProvider *AppAuthStrategyOpenIDConnectResponseAppAuthStrategyDcrProvider `json:"dcr_provider"`
	// Labels store metadata of an entity that can be used for filtering an entity list or for searching across entity types.
	//
	// Keys must be of length 1-63 characters, and cannot start with "kong", "konnect", "mesh", "kic", or "_".
	//
	Labels map[string]string `json:"labels"`
	// An ISO-8601 timestamp representation of entity creation date.
	CreatedAt time.Time `json:"created_at"`
	// An ISO-8601 timestamp representation of entity update date.
	UpdatedAt time.Time `json:"updated_at"`
}

func (a AppAuthStrategyOpenIDConnectResponseAppAuthStrategyOpenIDConnectResponse) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AppAuthStrategyOpenIDConnectResponseAppAuthStrategyOpenIDConnectResponse) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, []string{"id", "name", "display_name", "strategy_type", "configs", "active", "labels", "created_at", "updated_at"}); err != nil {
		return err
	}
	return nil
}

func (a *AppAuthStrategyOpenIDConnectResponseAppAuthStrategyOpenIDConnectResponse) GetID() string {
	if a == nil {
		return ""
	}
	return a.ID
}

func (a *AppAuthStrategyOpenIDConnectResponseAppAuthStrategyOpenIDConnectResponse) GetName() string {
	if a == nil {
		return ""
	}
	return a.Name
}

func (a *AppAuthStrategyOpenIDConnectResponseAppAuthStrategyOpenIDConnectResponse) GetDisplayName() string {
	if a == nil {
		return ""
	}
	return a.DisplayName
}

func (a *AppAuthStrategyOpenIDConnectResponseAppAuthStrategyOpenIDConnectResponse) GetStrategyType() AppAuthStrategyOpenIDConnectResponseAppAuthStrategyStrategyType {
	if a == nil {
		return AppAuthStrategyOpenIDConnectResponseAppAuthStrategyStrategyType("")
	}
	return a.StrategyType
}

func (a *AppAuthStrategyOpenIDConnectResponseAppAuthStrategyOpenIDConnectResponse) GetConfigs() AppAuthStrategyOpenIDConnectResponseAppAuthStrategyConfigs {
	if a == nil {
		return AppAuthStrategyOpenIDConnectResponseAppAuthStrategyConfigs{}
	}
	return a.Configs
}

func (a *AppAuthStrategyOpenIDConnectResponseAppAuthStrategyOpenIDConnectResponse) GetActive() bool {
	if a == nil {
		return false
	}
	return a.Active
}

func (a *AppAuthStrategyOpenIDConnectResponseAppAuthStrategyOpenIDConnectResponse) GetDcrProvider() *AppAuthStrategyOpenIDConnectResponseAppAuthStrategyDcrProvider {
	if a == nil {
		return nil
	}
	return a.DcrProvider
}

func (a *AppAuthStrategyOpenIDConnectResponseAppAuthStrategyOpenIDConnectResponse) GetLabels() map[string]string {
	if a == nil {
		return map[string]string{}
	}
	return a.Labels
}

func (a *AppAuthStrategyOpenIDConnectResponseAppAuthStrategyOpenIDConnectResponse) GetCreatedAt() time.Time {
	if a == nil {
		return time.Time{}
	}
	return a.CreatedAt
}

func (a *AppAuthStrategyOpenIDConnectResponseAppAuthStrategyOpenIDConnectResponse) GetUpdatedAt() time.Time {
	if a == nil {
		return time.Time{}
	}
	return a.UpdatedAt
}

type AppAuthStrategyKeyAuthResponseAppAuthStrategyStrategyType string

const (
	AppAuthStrategyKeyAuthResponseAppAuthStrategyStrategyTypeKeyAuth AppAuthStrategyKeyAuthResponseAppAuthStrategyStrategyType = "key_auth"
)

func (e AppAuthStrategyKeyAuthResponseAppAuthStrategyStrategyType) ToPointer() *AppAuthStrategyKeyAuthResponseAppAuthStrategyStrategyType {
	return &e
}
func (e *AppAuthStrategyKeyAuthResponseAppAuthStrategyStrategyType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "key_auth":
		*e = AppAuthStrategyKeyAuthResponseAppAuthStrategyStrategyType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AppAuthStrategyKeyAuthResponseAppAuthStrategyStrategyType: %v", v)
	}
}

// AppAuthStrategyKeyAuthResponseAppAuthStrategyConfigs - JSON-B object containing the configuration for the Key Auth strategy
type AppAuthStrategyKeyAuthResponseAppAuthStrategyConfigs struct {
	// The most basic mode to configure an Application Auth Strategy for an API Product Version.
	// Using this mode will allow developers to generate API keys that will authenticate their application requests.
	// Once authenticated, an application will be granted access to any Product Version it is registered for that is configured for Key Auth.
	//
	KeyAuth AppAuthStrategyConfigKeyAuth `json:"key-auth"`
}

func (a AppAuthStrategyKeyAuthResponseAppAuthStrategyConfigs) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AppAuthStrategyKeyAuthResponseAppAuthStrategyConfigs) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, []string{"key-auth"}); err != nil {
		return err
	}
	return nil
}

func (a *AppAuthStrategyKeyAuthResponseAppAuthStrategyConfigs) GetKeyAuth() AppAuthStrategyConfigKeyAuth {
	if a == nil {
		return AppAuthStrategyConfigKeyAuth{}
	}
	return a.KeyAuth
}

type AppAuthStrategyKeyAuthResponseDcrProvider struct {
	// Contains a unique identifier used for this resource.
	ID   string `json:"id"`
	Name string `json:"name"`
	// The display name of the DCR provider. This is used to identify the DCR provider in the Portal UI.
	//
	DisplayName *string `json:"display_name,omitempty"`
	// The type of DCR provider. Can be one of the following - auth0, azureAd, curity, okta, http
	ProviderType DcrProviderType `json:"provider_type"`
}

func (a AppAuthStrategyKeyAuthResponseDcrProvider) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AppAuthStrategyKeyAuthResponseDcrProvider) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, []string{"id", "name", "provider_type"}); err != nil {
		return err
	}
	return nil
}

func (a *AppAuthStrategyKeyAuthResponseDcrProvider) GetID() string {
	if a == nil {
		return ""
	}
	return a.ID
}

func (a *AppAuthStrategyKeyAuthResponseDcrProvider) GetName() string {
	if a == nil {
		return ""
	}
	return a.Name
}

func (a *AppAuthStrategyKeyAuthResponseDcrProvider) GetDisplayName() *string {
	if a == nil {
		return nil
	}
	return a.DisplayName
}

func (a *AppAuthStrategyKeyAuthResponseDcrProvider) GetProviderType() DcrProviderType {
	if a == nil {
		return DcrProviderType("")
	}
	return a.ProviderType
}

// AppAuthStrategyKeyAuthResponseAppAuthStrategyKeyAuthResponse - Response payload from creating or updating a Key Auth Application Auth Strategy
type AppAuthStrategyKeyAuthResponseAppAuthStrategyKeyAuthResponse struct {
	// Contains a unique identifier used for this resource.
	ID string `json:"id"`
	// The name of the auth strategy. This is used to identify the auth strategy in the Konnect UI.
	//
	Name string `json:"name"`
	// The display name of the Auth strategy. This is used to identify the Auth strategy in the Portal UI.
	//
	DisplayName  string                                                    `json:"display_name"`
	StrategyType AppAuthStrategyKeyAuthResponseAppAuthStrategyStrategyType `json:"strategy_type"`
	// JSON-B object containing the configuration for the Key Auth strategy
	Configs AppAuthStrategyKeyAuthResponseAppAuthStrategyConfigs `json:"configs"`
	// At least one published entity is using this auth strategy.
	Active      bool                                       `json:"active"`
	DcrProvider *AppAuthStrategyKeyAuthResponseDcrProvider `json:"dcr_provider"`
	// Labels store metadata of an entity that can be used for filtering an entity list or for searching across entity types.
	//
	// Keys must be of length 1-63 characters, and cannot start with "kong", "konnect", "mesh", "kic", or "_".
	//
	Labels map[string]string `json:"labels"`
	// An ISO-8601 timestamp representation of entity creation date.
	CreatedAt time.Time `json:"created_at"`
	// An ISO-8601 timestamp representation of entity update date.
	UpdatedAt time.Time `json:"updated_at"`
}

func (a AppAuthStrategyKeyAuthResponseAppAuthStrategyKeyAuthResponse) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AppAuthStrategyKeyAuthResponseAppAuthStrategyKeyAuthResponse) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, []string{"id", "name", "display_name", "strategy_type", "configs", "active", "labels", "created_at", "updated_at"}); err != nil {
		return err
	}
	return nil
}

func (a *AppAuthStrategyKeyAuthResponseAppAuthStrategyKeyAuthResponse) GetID() string {
	if a == nil {
		return ""
	}
	return a.ID
}

func (a *AppAuthStrategyKeyAuthResponseAppAuthStrategyKeyAuthResponse) GetName() string {
	if a == nil {
		return ""
	}
	return a.Name
}

func (a *AppAuthStrategyKeyAuthResponseAppAuthStrategyKeyAuthResponse) GetDisplayName() string {
	if a == nil {
		return ""
	}
	return a.DisplayName
}

func (a *AppAuthStrategyKeyAuthResponseAppAuthStrategyKeyAuthResponse) GetStrategyType() AppAuthStrategyKeyAuthResponseAppAuthStrategyStrategyType {
	if a == nil {
		return AppAuthStrategyKeyAuthResponseAppAuthStrategyStrategyType("")
	}
	return a.StrategyType
}

func (a *AppAuthStrategyKeyAuthResponseAppAuthStrategyKeyAuthResponse) GetConfigs() AppAuthStrategyKeyAuthResponseAppAuthStrategyConfigs {
	if a == nil {
		return AppAuthStrategyKeyAuthResponseAppAuthStrategyConfigs{}
	}
	return a.Configs
}

func (a *AppAuthStrategyKeyAuthResponseAppAuthStrategyKeyAuthResponse) GetActive() bool {
	if a == nil {
		return false
	}
	return a.Active
}

func (a *AppAuthStrategyKeyAuthResponseAppAuthStrategyKeyAuthResponse) GetDcrProvider() *AppAuthStrategyKeyAuthResponseDcrProvider {
	if a == nil {
		return nil
	}
	return a.DcrProvider
}

func (a *AppAuthStrategyKeyAuthResponseAppAuthStrategyKeyAuthResponse) GetLabels() map[string]string {
	if a == nil {
		return map[string]string{}
	}
	return a.Labels
}

func (a *AppAuthStrategyKeyAuthResponseAppAuthStrategyKeyAuthResponse) GetCreatedAt() time.Time {
	if a == nil {
		return time.Time{}
	}
	return a.CreatedAt
}

func (a *AppAuthStrategyKeyAuthResponseAppAuthStrategyKeyAuthResponse) GetUpdatedAt() time.Time {
	if a == nil {
		return time.Time{}
	}
	return a.UpdatedAt
}

type AppAuthStrategyType string

const (
	AppAuthStrategyTypeKeyAuth       AppAuthStrategyType = "key_auth"
	AppAuthStrategyTypeOpenidConnect AppAuthStrategyType = "openid_connect"
)

// AppAuthStrategy - A set of plugin configurations that represent how the gateway will perform authentication and authorization for a Product Version. Called “Auth Strategy” for short in the context of portals/applications. The plugins are synced to any Gateway Service that is currently linked or becomes linked to the Product Version.
type AppAuthStrategy struct {
	AppAuthStrategyKeyAuthResponseAppAuthStrategyKeyAuthResponse             *AppAuthStrategyKeyAuthResponseAppAuthStrategyKeyAuthResponse             `queryParam:"inline,name=AppAuthStrategy"`
	AppAuthStrategyOpenIDConnectResponseAppAuthStrategyOpenIDConnectResponse *AppAuthStrategyOpenIDConnectResponseAppAuthStrategyOpenIDConnectResponse `queryParam:"inline,name=AppAuthStrategy"`

	Type AppAuthStrategyType
}

func CreateAppAuthStrategyKeyAuth(keyAuth AppAuthStrategyKeyAuthResponseAppAuthStrategyKeyAuthResponse) AppAuthStrategy {
	typ := AppAuthStrategyTypeKeyAuth

	typStr := AppAuthStrategyKeyAuthResponseAppAuthStrategyStrategyType(typ)
	keyAuth.StrategyType = typStr

	return AppAuthStrategy{
		AppAuthStrategyKeyAuthResponseAppAuthStrategyKeyAuthResponse: &keyAuth,
		Type: typ,
	}
}

func CreateAppAuthStrategyOpenidConnect(openidConnect AppAuthStrategyOpenIDConnectResponseAppAuthStrategyOpenIDConnectResponse) AppAuthStrategy {
	typ := AppAuthStrategyTypeOpenidConnect

	typStr := AppAuthStrategyOpenIDConnectResponseAppAuthStrategyStrategyType(typ)
	openidConnect.StrategyType = typStr

	return AppAuthStrategy{
		AppAuthStrategyOpenIDConnectResponseAppAuthStrategyOpenIDConnectResponse: &openidConnect,
		Type: typ,
	}
}

func (u *AppAuthStrategy) UnmarshalJSON(data []byte) error {

	type discriminator struct {
		StrategyType string `json:"strategy_type"`
	}

	dis := new(discriminator)
	if err := json.Unmarshal(data, &dis); err != nil {
		return fmt.Errorf("could not unmarshal discriminator: %w", err)
	}

	switch dis.StrategyType {
	case "key_auth":
		appAuthStrategyKeyAuthResponseAppAuthStrategyKeyAuthResponse := new(AppAuthStrategyKeyAuthResponseAppAuthStrategyKeyAuthResponse)
		if err := utils.UnmarshalJSON(data, &appAuthStrategyKeyAuthResponseAppAuthStrategyKeyAuthResponse, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (StrategyType == key_auth) type AppAuthStrategyKeyAuthResponseAppAuthStrategyKeyAuthResponse within AppAuthStrategy: %w", string(data), err)
		}

		u.AppAuthStrategyKeyAuthResponseAppAuthStrategyKeyAuthResponse = appAuthStrategyKeyAuthResponseAppAuthStrategyKeyAuthResponse
		u.Type = AppAuthStrategyTypeKeyAuth
		return nil
	case "openid_connect":
		appAuthStrategyOpenIDConnectResponseAppAuthStrategyOpenIDConnectResponse := new(AppAuthStrategyOpenIDConnectResponseAppAuthStrategyOpenIDConnectResponse)
		if err := utils.UnmarshalJSON(data, &appAuthStrategyOpenIDConnectResponseAppAuthStrategyOpenIDConnectResponse, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (StrategyType == openid_connect) type AppAuthStrategyOpenIDConnectResponseAppAuthStrategyOpenIDConnectResponse within AppAuthStrategy: %w", string(data), err)
		}

		u.AppAuthStrategyOpenIDConnectResponseAppAuthStrategyOpenIDConnectResponse = appAuthStrategyOpenIDConnectResponseAppAuthStrategyOpenIDConnectResponse
		u.Type = AppAuthStrategyTypeOpenidConnect
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for AppAuthStrategy", string(data))
}

func (u AppAuthStrategy) MarshalJSON() ([]byte, error) {
	if u.AppAuthStrategyKeyAuthResponseAppAuthStrategyKeyAuthResponse != nil {
		return utils.MarshalJSON(u.AppAuthStrategyKeyAuthResponseAppAuthStrategyKeyAuthResponse, "", true)
	}

	if u.AppAuthStrategyOpenIDConnectResponseAppAuthStrategyOpenIDConnectResponse != nil {
		return utils.MarshalJSON(u.AppAuthStrategyOpenIDConnectResponseAppAuthStrategyOpenIDConnectResponse, "", true)
	}

	return nil, errors.New("could not marshal union type AppAuthStrategy: all fields are null")
}
