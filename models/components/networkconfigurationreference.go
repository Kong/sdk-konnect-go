// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"github.com/Kong/sdk-konnect-go/internal/utils"
	"time"
)

// NetworkConfigurationReference - Object containing information about a control-plane's cloud-gateways configuration.
type NetworkConfigurationReference struct {
	ID string `json:"id"`
	// Supported gateway version.
	Version string `json:"version"`
	// Type of API access data-plane groups will support for a configuration.
	APIAccess *APIAccess `default:"private+public" json:"api_access"`
	// Object that describes where data-planes will be deployed to, along with how many instances.
	DataplaneGroupConfig []ConfigurationDataPlaneGroupConfig `json:"dataplane_group_config"`
	// List of data-plane groups that describe where data-planes will be deployed to, along with how many
	// instances.
	//
	DataplaneGroups []ConfigurationDataPlaneGroup `json:"dataplane_groups"`
	// Positive, monotonically increasing version integer, to serialize configuration changes.
	//
	EntityVersion float64 `json:"entity_version"`
	// An RFC-3339 timestamp representation of configuration creation date.
	CreatedAt time.Time `json:"created_at"`
	// An RFC-3339 timestamp representation of configuration update date.
	UpdatedAt      time.Time `json:"updated_at"`
	ControlPlaneID string    `json:"control_plane_id"`
	// Set of control-plane geos supported for deploying cloud-gateways configurations.
	ControlPlaneGeo ControlPlaneGeo `json:"control_plane_geo"`
}

func (n NetworkConfigurationReference) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(n, "", false)
}

func (n *NetworkConfigurationReference) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &n, "", false, []string{"id", "version", "dataplane_group_config", "dataplane_groups", "entity_version", "created_at", "updated_at", "control_plane_id", "control_plane_geo"}); err != nil {
		return err
	}
	return nil
}

func (n *NetworkConfigurationReference) GetID() string {
	if n == nil {
		return ""
	}
	return n.ID
}

func (n *NetworkConfigurationReference) GetVersion() string {
	if n == nil {
		return ""
	}
	return n.Version
}

func (n *NetworkConfigurationReference) GetAPIAccess() *APIAccess {
	if n == nil {
		return nil
	}
	return n.APIAccess
}

func (n *NetworkConfigurationReference) GetDataplaneGroupConfig() []ConfigurationDataPlaneGroupConfig {
	if n == nil {
		return []ConfigurationDataPlaneGroupConfig{}
	}
	return n.DataplaneGroupConfig
}

func (n *NetworkConfigurationReference) GetDataplaneGroups() []ConfigurationDataPlaneGroup {
	if n == nil {
		return []ConfigurationDataPlaneGroup{}
	}
	return n.DataplaneGroups
}

func (n *NetworkConfigurationReference) GetEntityVersion() float64 {
	if n == nil {
		return 0.0
	}
	return n.EntityVersion
}

func (n *NetworkConfigurationReference) GetCreatedAt() time.Time {
	if n == nil {
		return time.Time{}
	}
	return n.CreatedAt
}

func (n *NetworkConfigurationReference) GetUpdatedAt() time.Time {
	if n == nil {
		return time.Time{}
	}
	return n.UpdatedAt
}

func (n *NetworkConfigurationReference) GetControlPlaneID() string {
	if n == nil {
		return ""
	}
	return n.ControlPlaneID
}

func (n *NetworkConfigurationReference) GetControlPlaneGeo() ControlPlaneGeo {
	if n == nil {
		return ControlPlaneGeo("")
	}
	return n.ControlPlaneGeo
}
