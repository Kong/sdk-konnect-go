// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"github.com/Kong/sdk-konnect-go/internal/utils"
	"time"
)

// PersonalAccessToken - Properties of a personal access token.
type PersonalAccessToken struct {
	// Contains a unique identifier used for this resource.
	ID string `json:"id"`
	// Contains a unique identifier used for a user.
	UserID string `json:"user_id"`
	Name   string `json:"name"`
	// State of the personal access token.
	State PersonalAccessTokenState `json:"state"`
	// Contains a unique identifier used for the user that revoked this token.
	RevokedBy *string `json:"revoked_by,omitempty"`
	// An ISO-8601 timestamp representation of entity creation date.
	CreatedAt time.Time `json:"created_at"`
	// An ISO-8601 timestamp representation of entity update date.
	UpdatedAt time.Time `json:"updated_at"`
	// An ISO-8601 timestamp representation of entity last used date.
	LastUsedAt *time.Time `json:"last_used_at,omitempty"`
	// An ISO-8601 timestamp representation of entity expiration date.
	ExpiresAt *time.Time `json:"expires_at"`
	// An ISO-8601 timestamp representation of entity revoked at date.
	RevokedAt *time.Time `json:"revoked_at,omitempty"`
}

func (p PersonalAccessToken) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *PersonalAccessToken) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, []string{"id", "user_id", "name", "state", "created_at", "updated_at"}); err != nil {
		return err
	}
	return nil
}

func (p *PersonalAccessToken) GetID() string {
	if p == nil {
		return ""
	}
	return p.ID
}

func (p *PersonalAccessToken) GetUserID() string {
	if p == nil {
		return ""
	}
	return p.UserID
}

func (p *PersonalAccessToken) GetName() string {
	if p == nil {
		return ""
	}
	return p.Name
}

func (p *PersonalAccessToken) GetState() PersonalAccessTokenState {
	if p == nil {
		return PersonalAccessTokenState("")
	}
	return p.State
}

func (p *PersonalAccessToken) GetRevokedBy() *string {
	if p == nil {
		return nil
	}
	return p.RevokedBy
}

func (p *PersonalAccessToken) GetCreatedAt() time.Time {
	if p == nil {
		return time.Time{}
	}
	return p.CreatedAt
}

func (p *PersonalAccessToken) GetUpdatedAt() time.Time {
	if p == nil {
		return time.Time{}
	}
	return p.UpdatedAt
}

func (p *PersonalAccessToken) GetLastUsedAt() *time.Time {
	if p == nil {
		return nil
	}
	return p.LastUsedAt
}

func (p *PersonalAccessToken) GetExpiresAt() *time.Time {
	if p == nil {
		return nil
	}
	return p.ExpiresAt
}

func (p *PersonalAccessToken) GetRevokedAt() *time.Time {
	if p == nil {
		return nil
	}
	return p.RevokedAt
}
