// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

type RolesName string

const (
	RolesNameControlPlanes RolesName = "Control Planes"
)

func (e RolesName) ToPointer() *RolesName {
	return &e
}
func (e *RolesName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Control Planes":
		*e = RolesName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RolesName: %v", v)
	}
}

type RolesControlPlanesName string

const (
	RolesControlPlanesNameAdmin RolesControlPlanesName = "Admin"
)

func (e RolesControlPlanesName) ToPointer() *RolesControlPlanesName {
	return &e
}
func (e *RolesControlPlanesName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Admin":
		*e = RolesControlPlanesName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RolesControlPlanesName: %v", v)
	}
}

type RolesDescription string

const (
	RolesDescriptionThisRoleGrantsFullWriteAccessToAllEntitiesWithinAControlPlane RolesDescription = "This role grants full write access to all entities within a control plane."
)

func (e RolesDescription) ToPointer() *RolesDescription {
	return &e
}
func (e *RolesDescription) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "This role grants full write access to all entities within a control plane.":
		*e = RolesDescription(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RolesDescription: %v", v)
	}
}

type Admin struct {
	Name        RolesControlPlanesName `json:"name"`
	Description RolesDescription       `json:"description"`
}

func (a *Admin) GetName() RolesControlPlanesName {
	if a == nil {
		return RolesControlPlanesName("")
	}
	return a.Name
}

func (a *Admin) GetDescription() RolesDescription {
	if a == nil {
		return RolesDescription("")
	}
	return a.Description
}

type RolesControlPlanesRolesName string

const (
	RolesControlPlanesRolesNameCertificateAdmin RolesControlPlanesRolesName = "Certificate Admin"
)

func (e RolesControlPlanesRolesName) ToPointer() *RolesControlPlanesRolesName {
	return &e
}
func (e *RolesControlPlanesRolesName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Certificate Admin":
		*e = RolesControlPlanesRolesName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RolesControlPlanesRolesName: %v", v)
	}
}

type RolesControlPlanesDescription string

const (
	RolesControlPlanesDescriptionThisRoleGrantsFullWriteAccessToAdministerCertificates RolesControlPlanesDescription = "This role grants full write access to administer certificates."
)

func (e RolesControlPlanesDescription) ToPointer() *RolesControlPlanesDescription {
	return &e
}
func (e *RolesControlPlanesDescription) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "This role grants full write access to administer certificates.":
		*e = RolesControlPlanesDescription(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RolesControlPlanesDescription: %v", v)
	}
}

type CertificateAdmin struct {
	Name        RolesControlPlanesRolesName   `json:"name"`
	Description RolesControlPlanesDescription `json:"description"`
}

func (c *CertificateAdmin) GetName() RolesControlPlanesRolesName {
	if c == nil {
		return RolesControlPlanesRolesName("")
	}
	return c.Name
}

func (c *CertificateAdmin) GetDescription() RolesControlPlanesDescription {
	if c == nil {
		return RolesControlPlanesDescription("")
	}
	return c.Description
}

type RolesControlPlanesRolesConsumerAdminName string

const (
	RolesControlPlanesRolesConsumerAdminNameConsumerAdmin RolesControlPlanesRolesConsumerAdminName = "Consumer Admin"
)

func (e RolesControlPlanesRolesConsumerAdminName) ToPointer() *RolesControlPlanesRolesConsumerAdminName {
	return &e
}
func (e *RolesControlPlanesRolesConsumerAdminName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Consumer Admin":
		*e = RolesControlPlanesRolesConsumerAdminName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RolesControlPlanesRolesConsumerAdminName: %v", v)
	}
}

// RolesControlPlanesRolesDescription - This role grants full write access to administer Consumers. Can configure plugins and view plugin partials for Consumers they have access to. Cannot create or modify global plugins or plugins outside their scope.
type RolesControlPlanesRolesDescription string

const (
	RolesControlPlanesRolesDescriptionThisRoleGrantsFullWriteAccessToAdministerConsumers RolesControlPlanesRolesDescription = "This role grants full write access to administer consumers."
)

func (e RolesControlPlanesRolesDescription) ToPointer() *RolesControlPlanesRolesDescription {
	return &e
}
func (e *RolesControlPlanesRolesDescription) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "This role grants full write access to administer consumers.":
		*e = RolesControlPlanesRolesDescription(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RolesControlPlanesRolesDescription: %v", v)
	}
}

type ConsumerAdmin struct {
	Name RolesControlPlanesRolesConsumerAdminName `json:"name"`
	// This role grants full write access to administer Consumers. Can configure plugins and view plugin partials for Consumers they have access to. Cannot create or modify global plugins or plugins outside their scope.
	Description RolesControlPlanesRolesDescription `json:"description"`
}

func (c *ConsumerAdmin) GetName() RolesControlPlanesRolesConsumerAdminName {
	if c == nil {
		return RolesControlPlanesRolesConsumerAdminName("")
	}
	return c.Name
}

func (c *ConsumerAdmin) GetDescription() RolesControlPlanesRolesDescription {
	if c == nil {
		return RolesControlPlanesRolesDescription("")
	}
	return c.Description
}

type RolesControlPlanesRolesCreatorName string

const (
	RolesControlPlanesRolesCreatorNameCreator RolesControlPlanesRolesCreatorName = "Creator"
)

func (e RolesControlPlanesRolesCreatorName) ToPointer() *RolesControlPlanesRolesCreatorName {
	return &e
}
func (e *RolesControlPlanesRolesCreatorName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Creator":
		*e = RolesControlPlanesRolesCreatorName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RolesControlPlanesRolesCreatorName: %v", v)
	}
}

type RolesControlPlanesRolesCreatorDescription string

const (
	RolesControlPlanesRolesCreatorDescriptionCreatesANewControlPlaneInAnOrganizationTheCreatorBecomesTheOwnerOfTheControlPlaneTheyCreate RolesControlPlanesRolesCreatorDescription = "Creates a new Control Plane in an organization. The creator becomes the owner of the Control Plane they create."
)

func (e RolesControlPlanesRolesCreatorDescription) ToPointer() *RolesControlPlanesRolesCreatorDescription {
	return &e
}
func (e *RolesControlPlanesRolesCreatorDescription) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Creates a new Control Plane in an organization. The creator becomes the owner of the Control Plane they create.":
		*e = RolesControlPlanesRolesCreatorDescription(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RolesControlPlanesRolesCreatorDescription: %v", v)
	}
}

type Creator struct {
	Name        RolesControlPlanesRolesCreatorName        `json:"name"`
	Description RolesControlPlanesRolesCreatorDescription `json:"description"`
}

func (c *Creator) GetName() RolesControlPlanesRolesCreatorName {
	if c == nil {
		return RolesControlPlanesRolesCreatorName("")
	}
	return c.Name
}

func (c *Creator) GetDescription() RolesControlPlanesRolesCreatorDescription {
	if c == nil {
		return RolesControlPlanesRolesCreatorDescription("")
	}
	return c.Description
}

type RolesControlPlanesRolesDeployerName string

const (
	RolesControlPlanesRolesDeployerNameDeployer RolesControlPlanesRolesDeployerName = "Deployer"
)

func (e RolesControlPlanesRolesDeployerName) ToPointer() *RolesControlPlanesRolesDeployerName {
	return &e
}
func (e *RolesControlPlanesRolesDeployerName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Deployer":
		*e = RolesControlPlanesRolesDeployerName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RolesControlPlanesRolesDeployerName: %v", v)
	}
}

type RolesControlPlanesRolesDeployerDescription string

const (
	RolesControlPlanesRolesDeployerDescriptionThisRoleGrantsFullWriteAccessToAdministerServicesRoutesAndPluginsNecessaryToDeployServicesInServiceHub RolesControlPlanesRolesDeployerDescription = "This role grants full write access to administer services, routes and plugins necessary to deploy services in Service Hub."
)

func (e RolesControlPlanesRolesDeployerDescription) ToPointer() *RolesControlPlanesRolesDeployerDescription {
	return &e
}
func (e *RolesControlPlanesRolesDeployerDescription) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "This role grants full write access to administer services, routes and plugins necessary to deploy services in Service Hub.":
		*e = RolesControlPlanesRolesDeployerDescription(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RolesControlPlanesRolesDeployerDescription: %v", v)
	}
}

type Deployer struct {
	Name        RolesControlPlanesRolesDeployerName        `json:"name"`
	Description RolesControlPlanesRolesDeployerDescription `json:"description"`
}

func (d *Deployer) GetName() RolesControlPlanesRolesDeployerName {
	if d == nil {
		return RolesControlPlanesRolesDeployerName("")
	}
	return d.Name
}

func (d *Deployer) GetDescription() RolesControlPlanesRolesDeployerDescription {
	if d == nil {
		return RolesControlPlanesRolesDeployerDescription("")
	}
	return d.Description
}

type RolesControlPlanesRolesGatewayServiceAdminName string

const (
	RolesControlPlanesRolesGatewayServiceAdminNameGatewayServiceAdmin RolesControlPlanesRolesGatewayServiceAdminName = "Gateway Service Admin"
)

func (e RolesControlPlanesRolesGatewayServiceAdminName) ToPointer() *RolesControlPlanesRolesGatewayServiceAdminName {
	return &e
}
func (e *RolesControlPlanesRolesGatewayServiceAdminName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Gateway Service Admin":
		*e = RolesControlPlanesRolesGatewayServiceAdminName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RolesControlPlanesRolesGatewayServiceAdminName: %v", v)
	}
}

// RolesControlPlanesRolesGatewayServiceAdminDescription - This role grants full write access to administer Gateway Services. Can configure plugins and view plugin partials for Services they have access to. Cannot create or modify global plugins or plugins outside their scope.
type RolesControlPlanesRolesGatewayServiceAdminDescription string

const (
	RolesControlPlanesRolesGatewayServiceAdminDescriptionThisRoleGrantsFullWriteAccessToAdministerGatewayServices RolesControlPlanesRolesGatewayServiceAdminDescription = "This role grants full write access to administer gateway services."
)

func (e RolesControlPlanesRolesGatewayServiceAdminDescription) ToPointer() *RolesControlPlanesRolesGatewayServiceAdminDescription {
	return &e
}
func (e *RolesControlPlanesRolesGatewayServiceAdminDescription) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "This role grants full write access to administer gateway services.":
		*e = RolesControlPlanesRolesGatewayServiceAdminDescription(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RolesControlPlanesRolesGatewayServiceAdminDescription: %v", v)
	}
}

type GatewayServiceAdmin struct {
	Name RolesControlPlanesRolesGatewayServiceAdminName `json:"name"`
	// This role grants full write access to administer Gateway Services. Can configure plugins and view plugin partials for Services they have access to. Cannot create or modify global plugins or plugins outside their scope.
	Description RolesControlPlanesRolesGatewayServiceAdminDescription `json:"description"`
}

func (g *GatewayServiceAdmin) GetName() RolesControlPlanesRolesGatewayServiceAdminName {
	if g == nil {
		return RolesControlPlanesRolesGatewayServiceAdminName("")
	}
	return g.Name
}

func (g *GatewayServiceAdmin) GetDescription() RolesControlPlanesRolesGatewayServiceAdminDescription {
	if g == nil {
		return RolesControlPlanesRolesGatewayServiceAdminDescription("")
	}
	return g.Description
}

type RolesControlPlanesRolesPluginAdminName string

const (
	RolesControlPlanesRolesPluginAdminNamePluginAdmin RolesControlPlanesRolesPluginAdminName = "Plugin Admin"
)

func (e RolesControlPlanesRolesPluginAdminName) ToPointer() *RolesControlPlanesRolesPluginAdminName {
	return &e
}
func (e *RolesControlPlanesRolesPluginAdminName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Plugin Admin":
		*e = RolesControlPlanesRolesPluginAdminName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RolesControlPlanesRolesPluginAdminName: %v", v)
	}
}

// RolesControlPlanesRolesPluginAdminDescription - Can configure plugins at any scope (global, Service, Route, or Consumer) within a Control Plane Group. Also has write access to plugin partials.
type RolesControlPlanesRolesPluginAdminDescription string

const (
	RolesControlPlanesRolesPluginAdminDescriptionThisRoleGrantsFullWriteAccessToAdministerPlugins RolesControlPlanesRolesPluginAdminDescription = "This role grants full write access to administer plugins."
)

func (e RolesControlPlanesRolesPluginAdminDescription) ToPointer() *RolesControlPlanesRolesPluginAdminDescription {
	return &e
}
func (e *RolesControlPlanesRolesPluginAdminDescription) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "This role grants full write access to administer plugins.":
		*e = RolesControlPlanesRolesPluginAdminDescription(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RolesControlPlanesRolesPluginAdminDescription: %v", v)
	}
}

type PluginAdmin struct {
	Name RolesControlPlanesRolesPluginAdminName `json:"name"`
	// Can configure plugins at any scope (global, Service, Route, or Consumer) within a Control Plane Group. Also has write access to plugin partials.
	Description RolesControlPlanesRolesPluginAdminDescription `json:"description"`
}

func (p *PluginAdmin) GetName() RolesControlPlanesRolesPluginAdminName {
	if p == nil {
		return RolesControlPlanesRolesPluginAdminName("")
	}
	return p.Name
}

func (p *PluginAdmin) GetDescription() RolesControlPlanesRolesPluginAdminDescription {
	if p == nil {
		return RolesControlPlanesRolesPluginAdminDescription("")
	}
	return p.Description
}

type RolesControlPlanesRolesRouteAdminName string

const (
	RolesControlPlanesRolesRouteAdminNameRouteAdmin RolesControlPlanesRolesRouteAdminName = "Route Admin"
)

func (e RolesControlPlanesRolesRouteAdminName) ToPointer() *RolesControlPlanesRolesRouteAdminName {
	return &e
}
func (e *RolesControlPlanesRolesRouteAdminName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Route Admin":
		*e = RolesControlPlanesRolesRouteAdminName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RolesControlPlanesRolesRouteAdminName: %v", v)
	}
}

// RolesControlPlanesRolesRouteAdminDescription - This role grants full write access to administer Routes. Can configure plugins and view plugin partials for Routes they have access to. Cannot create or modify global plugins or plugins outside their scope.
type RolesControlPlanesRolesRouteAdminDescription string

const (
	RolesControlPlanesRolesRouteAdminDescriptionThisRoleGrantsFullWriteAccessToAdministerRoutes RolesControlPlanesRolesRouteAdminDescription = "This role grants full write access to administer routes."
)

func (e RolesControlPlanesRolesRouteAdminDescription) ToPointer() *RolesControlPlanesRolesRouteAdminDescription {
	return &e
}
func (e *RolesControlPlanesRolesRouteAdminDescription) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "This role grants full write access to administer routes.":
		*e = RolesControlPlanesRolesRouteAdminDescription(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RolesControlPlanesRolesRouteAdminDescription: %v", v)
	}
}

type RouteAdmin struct {
	Name RolesControlPlanesRolesRouteAdminName `json:"name"`
	// This role grants full write access to administer Routes. Can configure plugins and view plugin partials for Routes they have access to. Cannot create or modify global plugins or plugins outside their scope.
	Description RolesControlPlanesRolesRouteAdminDescription `json:"description"`
}

func (r *RouteAdmin) GetName() RolesControlPlanesRolesRouteAdminName {
	if r == nil {
		return RolesControlPlanesRolesRouteAdminName("")
	}
	return r.Name
}

func (r *RouteAdmin) GetDescription() RolesControlPlanesRolesRouteAdminDescription {
	if r == nil {
		return RolesControlPlanesRolesRouteAdminDescription("")
	}
	return r.Description
}

type RolesControlPlanesRolesSniAdminName string

const (
	RolesControlPlanesRolesSniAdminNameSniAdmin RolesControlPlanesRolesSniAdminName = "SNI Admin"
)

func (e RolesControlPlanesRolesSniAdminName) ToPointer() *RolesControlPlanesRolesSniAdminName {
	return &e
}
func (e *RolesControlPlanesRolesSniAdminName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SNI Admin":
		*e = RolesControlPlanesRolesSniAdminName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RolesControlPlanesRolesSniAdminName: %v", v)
	}
}

type RolesControlPlanesRolesSniAdminDescription string

const (
	RolesControlPlanesRolesSniAdminDescriptionThisRoleGrantsFullWriteAccessToAdministerSnIs RolesControlPlanesRolesSniAdminDescription = "This role grants full write access to administer SNIs."
)

func (e RolesControlPlanesRolesSniAdminDescription) ToPointer() *RolesControlPlanesRolesSniAdminDescription {
	return &e
}
func (e *RolesControlPlanesRolesSniAdminDescription) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "This role grants full write access to administer SNIs.":
		*e = RolesControlPlanesRolesSniAdminDescription(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RolesControlPlanesRolesSniAdminDescription: %v", v)
	}
}

type SniAdmin struct {
	Name        RolesControlPlanesRolesSniAdminName        `json:"name"`
	Description RolesControlPlanesRolesSniAdminDescription `json:"description"`
}

func (s *SniAdmin) GetName() RolesControlPlanesRolesSniAdminName {
	if s == nil {
		return RolesControlPlanesRolesSniAdminName("")
	}
	return s.Name
}

func (s *SniAdmin) GetDescription() RolesControlPlanesRolesSniAdminDescription {
	if s == nil {
		return RolesControlPlanesRolesSniAdminDescription("")
	}
	return s.Description
}

type RolesControlPlanesRolesUpstreamAdminName string

const (
	RolesControlPlanesRolesUpstreamAdminNameUpstreamAdmin RolesControlPlanesRolesUpstreamAdminName = "Upstream Admin"
)

func (e RolesControlPlanesRolesUpstreamAdminName) ToPointer() *RolesControlPlanesRolesUpstreamAdminName {
	return &e
}
func (e *RolesControlPlanesRolesUpstreamAdminName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Upstream Admin":
		*e = RolesControlPlanesRolesUpstreamAdminName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RolesControlPlanesRolesUpstreamAdminName: %v", v)
	}
}

type RolesControlPlanesRolesUpstreamAdminDescription string

const (
	RolesControlPlanesRolesUpstreamAdminDescriptionThisRoleGrantsFullWriteAccessToAdministerUpstreams RolesControlPlanesRolesUpstreamAdminDescription = "This role grants full write access to administer upstreams."
)

func (e RolesControlPlanesRolesUpstreamAdminDescription) ToPointer() *RolesControlPlanesRolesUpstreamAdminDescription {
	return &e
}
func (e *RolesControlPlanesRolesUpstreamAdminDescription) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "This role grants full write access to administer upstreams.":
		*e = RolesControlPlanesRolesUpstreamAdminDescription(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RolesControlPlanesRolesUpstreamAdminDescription: %v", v)
	}
}

type UpstreamAdmin struct {
	Name        RolesControlPlanesRolesUpstreamAdminName        `json:"name"`
	Description RolesControlPlanesRolesUpstreamAdminDescription `json:"description"`
}

func (u *UpstreamAdmin) GetName() RolesControlPlanesRolesUpstreamAdminName {
	if u == nil {
		return RolesControlPlanesRolesUpstreamAdminName("")
	}
	return u.Name
}

func (u *UpstreamAdmin) GetDescription() RolesControlPlanesRolesUpstreamAdminDescription {
	if u == nil {
		return RolesControlPlanesRolesUpstreamAdminDescription("")
	}
	return u.Description
}

type RolesControlPlanesRolesViewerName string

const (
	RolesControlPlanesRolesViewerNameViewer RolesControlPlanesRolesViewerName = "Viewer"
)

func (e RolesControlPlanesRolesViewerName) ToPointer() *RolesControlPlanesRolesViewerName {
	return &e
}
func (e *RolesControlPlanesRolesViewerName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Viewer":
		*e = RolesControlPlanesRolesViewerName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RolesControlPlanesRolesViewerName: %v", v)
	}
}

// RolesControlPlanesRolesViewerDescription - This role grants read-only access to all the configurations of a Control Plane Group and corresponding Data Plane nodes. Includes read-only access to plugin partials within accessible scopes.
type RolesControlPlanesRolesViewerDescription string

const (
	RolesControlPlanesRolesViewerDescriptionThisRoleGrantsReadOnlyAccessToAllEntitiesWithinAControlPlane RolesControlPlanesRolesViewerDescription = "This role grants read only access to all entities within a control plane."
)

func (e RolesControlPlanesRolesViewerDescription) ToPointer() *RolesControlPlanesRolesViewerDescription {
	return &e
}
func (e *RolesControlPlanesRolesViewerDescription) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "This role grants read only access to all entities within a control plane.":
		*e = RolesControlPlanesRolesViewerDescription(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RolesControlPlanesRolesViewerDescription: %v", v)
	}
}

type Viewer struct {
	Name RolesControlPlanesRolesViewerName `json:"name"`
	// This role grants read-only access to all the configurations of a Control Plane Group and corresponding Data Plane nodes. Includes read-only access to plugin partials within accessible scopes.
	Description RolesControlPlanesRolesViewerDescription `json:"description"`
}

func (v *Viewer) GetName() RolesControlPlanesRolesViewerName {
	if v == nil {
		return RolesControlPlanesRolesViewerName("")
	}
	return v.Name
}

func (v *Viewer) GetDescription() RolesControlPlanesRolesViewerDescription {
	if v == nil {
		return RolesControlPlanesRolesViewerDescription("")
	}
	return v.Description
}

type RolesRoles struct {
	Admin               *Admin               `json:"admin,omitempty"`
	CertificateAdmin    *CertificateAdmin    `json:"certificate_admin,omitempty"`
	ConsumerAdmin       *ConsumerAdmin       `json:"consumer_admin,omitempty"`
	Creator             *Creator             `json:"creator,omitempty"`
	Deployer            *Deployer            `json:"deployer,omitempty"`
	GatewayServiceAdmin *GatewayServiceAdmin `json:"gateway_service_admin,omitempty"`
	PluginAdmin         *PluginAdmin         `json:"plugin_admin,omitempty"`
	RouteAdmin          *RouteAdmin          `json:"route_admin,omitempty"`
	SniAdmin            *SniAdmin            `json:"sni_admin,omitempty"`
	UpstreamAdmin       *UpstreamAdmin       `json:"upstream_admin,omitempty"`
	Viewer              *Viewer              `json:"viewer,omitempty"`
}

func (r *RolesRoles) GetAdmin() *Admin {
	if r == nil {
		return nil
	}
	return r.Admin
}

func (r *RolesRoles) GetCertificateAdmin() *CertificateAdmin {
	if r == nil {
		return nil
	}
	return r.CertificateAdmin
}

func (r *RolesRoles) GetConsumerAdmin() *ConsumerAdmin {
	if r == nil {
		return nil
	}
	return r.ConsumerAdmin
}

func (r *RolesRoles) GetCreator() *Creator {
	if r == nil {
		return nil
	}
	return r.Creator
}

func (r *RolesRoles) GetDeployer() *Deployer {
	if r == nil {
		return nil
	}
	return r.Deployer
}

func (r *RolesRoles) GetGatewayServiceAdmin() *GatewayServiceAdmin {
	if r == nil {
		return nil
	}
	return r.GatewayServiceAdmin
}

func (r *RolesRoles) GetPluginAdmin() *PluginAdmin {
	if r == nil {
		return nil
	}
	return r.PluginAdmin
}

func (r *RolesRoles) GetRouteAdmin() *RouteAdmin {
	if r == nil {
		return nil
	}
	return r.RouteAdmin
}

func (r *RolesRoles) GetSniAdmin() *SniAdmin {
	if r == nil {
		return nil
	}
	return r.SniAdmin
}

func (r *RolesRoles) GetUpstreamAdmin() *UpstreamAdmin {
	if r == nil {
		return nil
	}
	return r.UpstreamAdmin
}

func (r *RolesRoles) GetViewer() *Viewer {
	if r == nil {
		return nil
	}
	return r.Viewer
}

type ControlPlanes struct {
	Name  RolesName  `json:"name"`
	Roles RolesRoles `json:"roles"`
}

func (c *ControlPlanes) GetName() RolesName {
	if c == nil {
		return RolesName("")
	}
	return c.Name
}

func (c *ControlPlanes) GetRoles() RolesRoles {
	if c == nil {
		return RolesRoles{}
	}
	return c.Roles
}

type RolesAPIProductsName string

const (
	RolesAPIProductsNameAPIProducts RolesAPIProductsName = "API Products"
)

func (e RolesAPIProductsName) ToPointer() *RolesAPIProductsName {
	return &e
}
func (e *RolesAPIProductsName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "API Products":
		*e = RolesAPIProductsName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RolesAPIProductsName: %v", v)
	}
}

type RolesAPIProductsRolesName string

const (
	RolesAPIProductsRolesNameAdmin RolesAPIProductsRolesName = "Admin"
)

func (e RolesAPIProductsRolesName) ToPointer() *RolesAPIProductsRolesName {
	return &e
}
func (e *RolesAPIProductsRolesName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Admin":
		*e = RolesAPIProductsRolesName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RolesAPIProductsRolesName: %v", v)
	}
}

type RolesAPIProductsDescription string

const (
	RolesAPIProductsDescriptionThisRoleGrantsFullWriteAccessToAnAPIProductAndItsVersions RolesAPIProductsDescription = "This role grants full write access to an API product and its versions."
)

func (e RolesAPIProductsDescription) ToPointer() *RolesAPIProductsDescription {
	return &e
}
func (e *RolesAPIProductsDescription) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "This role grants full write access to an API product and its versions.":
		*e = RolesAPIProductsDescription(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RolesAPIProductsDescription: %v", v)
	}
}

type RolesAdmin struct {
	Name        RolesAPIProductsRolesName   `json:"name"`
	Description RolesAPIProductsDescription `json:"description"`
}

func (r *RolesAdmin) GetName() RolesAPIProductsRolesName {
	if r == nil {
		return RolesAPIProductsRolesName("")
	}
	return r.Name
}

func (r *RolesAdmin) GetDescription() RolesAPIProductsDescription {
	if r == nil {
		return RolesAPIProductsDescription("")
	}
	return r.Description
}

type RolesAPIProductsRolesApplicationRegistrationName string

const (
	RolesAPIProductsRolesApplicationRegistrationNameApplicationRegistration RolesAPIProductsRolesApplicationRegistrationName = "Application Registration"
)

func (e RolesAPIProductsRolesApplicationRegistrationName) ToPointer() *RolesAPIProductsRolesApplicationRegistrationName {
	return &e
}
func (e *RolesAPIProductsRolesApplicationRegistrationName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Application Registration":
		*e = RolesAPIProductsRolesApplicationRegistrationName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RolesAPIProductsRolesApplicationRegistrationName: %v", v)
	}
}

type RolesAPIProductsRolesDescription string

const (
	RolesAPIProductsRolesDescriptionThisRoleGrantsPermissionToEnableAndDisableApplicationRegistrationOnAnAPIProduct RolesAPIProductsRolesDescription = "This role grants permission to enable and disable application registration on an API product."
)

func (e RolesAPIProductsRolesDescription) ToPointer() *RolesAPIProductsRolesDescription {
	return &e
}
func (e *RolesAPIProductsRolesDescription) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "This role grants permission to enable and disable application registration on an API product.":
		*e = RolesAPIProductsRolesDescription(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RolesAPIProductsRolesDescription: %v", v)
	}
}

type RolesApplicationRegistration struct {
	Name        RolesAPIProductsRolesApplicationRegistrationName `json:"name"`
	Description RolesAPIProductsRolesDescription                 `json:"description"`
}

func (r *RolesApplicationRegistration) GetName() RolesAPIProductsRolesApplicationRegistrationName {
	if r == nil {
		return RolesAPIProductsRolesApplicationRegistrationName("")
	}
	return r.Name
}

func (r *RolesApplicationRegistration) GetDescription() RolesAPIProductsRolesDescription {
	if r == nil {
		return RolesAPIProductsRolesDescription("")
	}
	return r.Description
}

type RolesAPIProductsRolesCreatorName string

const (
	RolesAPIProductsRolesCreatorNameCreator RolesAPIProductsRolesCreatorName = "Creator"
)

func (e RolesAPIProductsRolesCreatorName) ToPointer() *RolesAPIProductsRolesCreatorName {
	return &e
}
func (e *RolesAPIProductsRolesCreatorName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Creator":
		*e = RolesAPIProductsRolesCreatorName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RolesAPIProductsRolesCreatorName: %v", v)
	}
}

type RolesAPIProductsRolesCreatorDescription string

const (
	RolesAPIProductsRolesCreatorDescriptionThisAccessIsRequiredToCreateAPIProductsThisAccessIsNotForCreatingSubEntitiesSuchAsVersionsAPISpecsEtc RolesAPIProductsRolesCreatorDescription = "This access is required to create API products. This access is not for creating sub-entities such as versions, API specs, etc."
)

func (e RolesAPIProductsRolesCreatorDescription) ToPointer() *RolesAPIProductsRolesCreatorDescription {
	return &e
}
func (e *RolesAPIProductsRolesCreatorDescription) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "This access is required to create API products. This access is not for creating sub-entities such as versions, API specs, etc.":
		*e = RolesAPIProductsRolesCreatorDescription(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RolesAPIProductsRolesCreatorDescription: %v", v)
	}
}

type RolesCreator struct {
	Name        RolesAPIProductsRolesCreatorName        `json:"name"`
	Description RolesAPIProductsRolesCreatorDescription `json:"description"`
}

func (r *RolesCreator) GetName() RolesAPIProductsRolesCreatorName {
	if r == nil {
		return RolesAPIProductsRolesCreatorName("")
	}
	return r.Name
}

func (r *RolesCreator) GetDescription() RolesAPIProductsRolesCreatorDescription {
	if r == nil {
		return RolesAPIProductsRolesCreatorDescription("")
	}
	return r.Description
}

type RolesAPIProductsRolesDeployerName string

const (
	RolesAPIProductsRolesDeployerNameDeployer RolesAPIProductsRolesDeployerName = "Deployer"
)

func (e RolesAPIProductsRolesDeployerName) ToPointer() *RolesAPIProductsRolesDeployerName {
	return &e
}
func (e *RolesAPIProductsRolesDeployerName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Deployer":
		*e = RolesAPIProductsRolesDeployerName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RolesAPIProductsRolesDeployerName: %v", v)
	}
}

type RolesAPIProductsRolesDeployerDescription string

const (
	RolesAPIProductsRolesDeployerDescriptionThisRoleGrantsPermissionToDeployAndRemoveAnAPIProductFromAControlPlane RolesAPIProductsRolesDeployerDescription = "This role grants permission to deploy and remove an API product from a control plane."
)

func (e RolesAPIProductsRolesDeployerDescription) ToPointer() *RolesAPIProductsRolesDeployerDescription {
	return &e
}
func (e *RolesAPIProductsRolesDeployerDescription) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "This role grants permission to deploy and remove an API product from a control plane.":
		*e = RolesAPIProductsRolesDeployerDescription(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RolesAPIProductsRolesDeployerDescription: %v", v)
	}
}

type RolesDeployer struct {
	Name        RolesAPIProductsRolesDeployerName        `json:"name"`
	Description RolesAPIProductsRolesDeployerDescription `json:"description"`
}

func (r *RolesDeployer) GetName() RolesAPIProductsRolesDeployerName {
	if r == nil {
		return RolesAPIProductsRolesDeployerName("")
	}
	return r.Name
}

func (r *RolesDeployer) GetDescription() RolesAPIProductsRolesDeployerDescription {
	if r == nil {
		return RolesAPIProductsRolesDeployerDescription("")
	}
	return r.Description
}

type RolesAPIProductsRolesMaintainerName string

const (
	RolesAPIProductsRolesMaintainerNameMaintainer RolesAPIProductsRolesMaintainerName = "Maintainer"
)

func (e RolesAPIProductsRolesMaintainerName) ToPointer() *RolesAPIProductsRolesMaintainerName {
	return &e
}
func (e *RolesAPIProductsRolesMaintainerName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Maintainer":
		*e = RolesAPIProductsRolesMaintainerName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RolesAPIProductsRolesMaintainerName: %v", v)
	}
}

type RolesAPIProductsRolesMaintainerDescription string

const (
	RolesAPIProductsRolesMaintainerDescriptionThisRoleGrantsAllWritePermissionToManageAnAPIProductAndToAdministerPlugins RolesAPIProductsRolesMaintainerDescription = "This role grants all write permission to manage an API product and to administer plugins."
)

func (e RolesAPIProductsRolesMaintainerDescription) ToPointer() *RolesAPIProductsRolesMaintainerDescription {
	return &e
}
func (e *RolesAPIProductsRolesMaintainerDescription) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "This role grants all write permission to manage an API product and to administer plugins.":
		*e = RolesAPIProductsRolesMaintainerDescription(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RolesAPIProductsRolesMaintainerDescription: %v", v)
	}
}

type Maintainer struct {
	Name        RolesAPIProductsRolesMaintainerName        `json:"name"`
	Description RolesAPIProductsRolesMaintainerDescription `json:"description"`
}

func (m *Maintainer) GetName() RolesAPIProductsRolesMaintainerName {
	if m == nil {
		return RolesAPIProductsRolesMaintainerName("")
	}
	return m.Name
}

func (m *Maintainer) GetDescription() RolesAPIProductsRolesMaintainerDescription {
	if m == nil {
		return RolesAPIProductsRolesMaintainerDescription("")
	}
	return m.Description
}

type RolesAPIProductsRolesPluginsAdminName string

const (
	RolesAPIProductsRolesPluginsAdminNamePluginsAdmin RolesAPIProductsRolesPluginsAdminName = "Plugins Admin"
)

func (e RolesAPIProductsRolesPluginsAdminName) ToPointer() *RolesAPIProductsRolesPluginsAdminName {
	return &e
}
func (e *RolesAPIProductsRolesPluginsAdminName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Plugins Admin":
		*e = RolesAPIProductsRolesPluginsAdminName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RolesAPIProductsRolesPluginsAdminName: %v", v)
	}
}

type RolesAPIProductsRolesPluginsAdminDescription string

const (
	RolesAPIProductsRolesPluginsAdminDescriptionThisRoleGrantsFullWritePermissionToAdministerPlugins RolesAPIProductsRolesPluginsAdminDescription = "This role grants full write permission to administer plugins."
)

func (e RolesAPIProductsRolesPluginsAdminDescription) ToPointer() *RolesAPIProductsRolesPluginsAdminDescription {
	return &e
}
func (e *RolesAPIProductsRolesPluginsAdminDescription) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "This role grants full write permission to administer plugins.":
		*e = RolesAPIProductsRolesPluginsAdminDescription(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RolesAPIProductsRolesPluginsAdminDescription: %v", v)
	}
}

type PluginsAdmin struct {
	Name        RolesAPIProductsRolesPluginsAdminName        `json:"name"`
	Description RolesAPIProductsRolesPluginsAdminDescription `json:"description"`
}

func (p *PluginsAdmin) GetName() RolesAPIProductsRolesPluginsAdminName {
	if p == nil {
		return RolesAPIProductsRolesPluginsAdminName("")
	}
	return p.Name
}

func (p *PluginsAdmin) GetDescription() RolesAPIProductsRolesPluginsAdminDescription {
	if p == nil {
		return RolesAPIProductsRolesPluginsAdminDescription("")
	}
	return p.Description
}

type RolesAPIProductsRolesPublisherName string

const (
	RolesAPIProductsRolesPublisherNamePublisher RolesAPIProductsRolesPublisherName = "Publisher"
)

func (e RolesAPIProductsRolesPublisherName) ToPointer() *RolesAPIProductsRolesPublisherName {
	return &e
}
func (e *RolesAPIProductsRolesPublisherName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher":
		*e = RolesAPIProductsRolesPublisherName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RolesAPIProductsRolesPublisherName: %v", v)
	}
}

type RolesAPIProductsRolesPublisherDescription string

const (
	RolesAPIProductsRolesPublisherDescriptionThisRoleGrantsPermissionToPublishAnAPIProductToOneOrMorePortals RolesAPIProductsRolesPublisherDescription = "This role grants permission to publish an API product to one or more portals."
)

func (e RolesAPIProductsRolesPublisherDescription) ToPointer() *RolesAPIProductsRolesPublisherDescription {
	return &e
}
func (e *RolesAPIProductsRolesPublisherDescription) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "This role grants permission to publish an API product to one or more portals.":
		*e = RolesAPIProductsRolesPublisherDescription(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RolesAPIProductsRolesPublisherDescription: %v", v)
	}
}

type Publisher struct {
	Name        RolesAPIProductsRolesPublisherName        `json:"name"`
	Description RolesAPIProductsRolesPublisherDescription `json:"description"`
}

func (p *Publisher) GetName() RolesAPIProductsRolesPublisherName {
	if p == nil {
		return RolesAPIProductsRolesPublisherName("")
	}
	return p.Name
}

func (p *Publisher) GetDescription() RolesAPIProductsRolesPublisherDescription {
	if p == nil {
		return RolesAPIProductsRolesPublisherDescription("")
	}
	return p.Description
}

type RolesAPIProductsRolesViewerName string

const (
	RolesAPIProductsRolesViewerNameViewer RolesAPIProductsRolesViewerName = "Viewer"
)

func (e RolesAPIProductsRolesViewerName) ToPointer() *RolesAPIProductsRolesViewerName {
	return &e
}
func (e *RolesAPIProductsRolesViewerName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Viewer":
		*e = RolesAPIProductsRolesViewerName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RolesAPIProductsRolesViewerName: %v", v)
	}
}

type RolesAPIProductsRolesViewerDescription string

const (
	RolesAPIProductsRolesViewerDescriptionViewerHasReadOnlyAccessToAnAPIProductAndItsSubEntities RolesAPIProductsRolesViewerDescription = "Viewer has read-only access to an API product and its sub-entities."
)

func (e RolesAPIProductsRolesViewerDescription) ToPointer() *RolesAPIProductsRolesViewerDescription {
	return &e
}
func (e *RolesAPIProductsRolesViewerDescription) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Viewer has read-only access to an API product and its sub-entities.":
		*e = RolesAPIProductsRolesViewerDescription(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RolesAPIProductsRolesViewerDescription: %v", v)
	}
}

type RolesViewer struct {
	Name        RolesAPIProductsRolesViewerName        `json:"name"`
	Description RolesAPIProductsRolesViewerDescription `json:"description"`
}

func (r *RolesViewer) GetName() RolesAPIProductsRolesViewerName {
	if r == nil {
		return RolesAPIProductsRolesViewerName("")
	}
	return r.Name
}

func (r *RolesViewer) GetDescription() RolesAPIProductsRolesViewerDescription {
	if r == nil {
		return RolesAPIProductsRolesViewerDescription("")
	}
	return r.Description
}

type RolesAPIProductsRoles struct {
	Admin                   *RolesAdmin                   `json:"admin,omitempty"`
	ApplicationRegistration *RolesApplicationRegistration `json:"application_registration,omitempty"`
	Creator                 *RolesCreator                 `json:"creator,omitempty"`
	Deployer                *RolesDeployer                `json:"deployer,omitempty"`
	Maintainer              *Maintainer                   `json:"maintainer,omitempty"`
	PluginsAdmin            *PluginsAdmin                 `json:"plugins_admin,omitempty"`
	Publisher               *Publisher                    `json:"publisher,omitempty"`
	Viewer                  *RolesViewer                  `json:"viewer,omitempty"`
}

func (r *RolesAPIProductsRoles) GetAdmin() *RolesAdmin {
	if r == nil {
		return nil
	}
	return r.Admin
}

func (r *RolesAPIProductsRoles) GetApplicationRegistration() *RolesApplicationRegistration {
	if r == nil {
		return nil
	}
	return r.ApplicationRegistration
}

func (r *RolesAPIProductsRoles) GetCreator() *RolesCreator {
	if r == nil {
		return nil
	}
	return r.Creator
}

func (r *RolesAPIProductsRoles) GetDeployer() *RolesDeployer {
	if r == nil {
		return nil
	}
	return r.Deployer
}

func (r *RolesAPIProductsRoles) GetMaintainer() *Maintainer {
	if r == nil {
		return nil
	}
	return r.Maintainer
}

func (r *RolesAPIProductsRoles) GetPluginsAdmin() *PluginsAdmin {
	if r == nil {
		return nil
	}
	return r.PluginsAdmin
}

func (r *RolesAPIProductsRoles) GetPublisher() *Publisher {
	if r == nil {
		return nil
	}
	return r.Publisher
}

func (r *RolesAPIProductsRoles) GetViewer() *RolesViewer {
	if r == nil {
		return nil
	}
	return r.Viewer
}

type APIProducts struct {
	Name  RolesAPIProductsName  `json:"name"`
	Roles RolesAPIProductsRoles `json:"roles"`
}

func (a *APIProducts) GetName() RolesAPIProductsName {
	if a == nil {
		return RolesAPIProductsName("")
	}
	return a.Name
}

func (a *APIProducts) GetRoles() RolesAPIProductsRoles {
	if a == nil {
		return RolesAPIProductsRoles{}
	}
	return a.Roles
}

type RolesAuditLogsName string

const (
	RolesAuditLogsNameAuditLogs RolesAuditLogsName = "Audit Logs"
)

func (e RolesAuditLogsName) ToPointer() *RolesAuditLogsName {
	return &e
}
func (e *RolesAuditLogsName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Audit Logs":
		*e = RolesAuditLogsName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RolesAuditLogsName: %v", v)
	}
}

type RolesAuditLogsRolesName string

const (
	RolesAuditLogsRolesNameAdmin RolesAuditLogsRolesName = "Admin"
)

func (e RolesAuditLogsRolesName) ToPointer() *RolesAuditLogsRolesName {
	return &e
}
func (e *RolesAuditLogsRolesName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Admin":
		*e = RolesAuditLogsRolesName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RolesAuditLogsRolesName: %v", v)
	}
}

type RolesAuditLogsDescription string

const (
	RolesAuditLogsDescriptionThisRoleGrantsFullWriteAccessToTheAuditLogConfiguration RolesAuditLogsDescription = "This role grants full write access to the Audit log configuration."
)

func (e RolesAuditLogsDescription) ToPointer() *RolesAuditLogsDescription {
	return &e
}
func (e *RolesAuditLogsDescription) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "This role grants full write access to the Audit log configuration.":
		*e = RolesAuditLogsDescription(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RolesAuditLogsDescription: %v", v)
	}
}

type RolesAuditLogsAdmin struct {
	Name        RolesAuditLogsRolesName   `json:"name"`
	Description RolesAuditLogsDescription `json:"description"`
}

func (r *RolesAuditLogsAdmin) GetName() RolesAuditLogsRolesName {
	if r == nil {
		return RolesAuditLogsRolesName("")
	}
	return r.Name
}

func (r *RolesAuditLogsAdmin) GetDescription() RolesAuditLogsDescription {
	if r == nil {
		return RolesAuditLogsDescription("")
	}
	return r.Description
}

type RolesAuditLogsRoles struct {
	Admin *RolesAuditLogsAdmin `json:"admin,omitempty"`
}

func (r *RolesAuditLogsRoles) GetAdmin() *RolesAuditLogsAdmin {
	if r == nil {
		return nil
	}
	return r.Admin
}

type AuditLogs struct {
	Name  RolesAuditLogsName  `json:"name"`
	Roles RolesAuditLogsRoles `json:"roles"`
}

func (a *AuditLogs) GetName() RolesAuditLogsName {
	if a == nil {
		return RolesAuditLogsName("")
	}
	return a.Name
}

func (a *AuditLogs) GetRoles() RolesAuditLogsRoles {
	if a == nil {
		return RolesAuditLogsRoles{}
	}
	return a.Roles
}

type RolesIdentityName string

const (
	RolesIdentityNameIdentity RolesIdentityName = "Identity"
)

func (e RolesIdentityName) ToPointer() *RolesIdentityName {
	return &e
}
func (e *RolesIdentityName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Identity":
		*e = RolesIdentityName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RolesIdentityName: %v", v)
	}
}

type RolesIdentityRolesName string

const (
	RolesIdentityRolesNameAdmin RolesIdentityRolesName = "Admin"
)

func (e RolesIdentityRolesName) ToPointer() *RolesIdentityRolesName {
	return &e
}
func (e *RolesIdentityRolesName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Admin":
		*e = RolesIdentityRolesName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RolesIdentityRolesName: %v", v)
	}
}

type RolesIdentityDescription string

const (
	RolesIdentityDescriptionThisRoleGrantsFullWriteAccessToTheIdentityConfiguration RolesIdentityDescription = "This role grants full write access to the Identity configuration."
)

func (e RolesIdentityDescription) ToPointer() *RolesIdentityDescription {
	return &e
}
func (e *RolesIdentityDescription) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "This role grants full write access to the Identity configuration.":
		*e = RolesIdentityDescription(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RolesIdentityDescription: %v", v)
	}
}

type RolesIdentityAdmin struct {
	Name        RolesIdentityRolesName   `json:"name"`
	Description RolesIdentityDescription `json:"description"`
}

func (r *RolesIdentityAdmin) GetName() RolesIdentityRolesName {
	if r == nil {
		return RolesIdentityRolesName("")
	}
	return r.Name
}

func (r *RolesIdentityAdmin) GetDescription() RolesIdentityDescription {
	if r == nil {
		return RolesIdentityDescription("")
	}
	return r.Description
}

type RolesIdentityRoles struct {
	Admin *RolesIdentityAdmin `json:"admin,omitempty"`
}

func (r *RolesIdentityRoles) GetAdmin() *RolesIdentityAdmin {
	if r == nil {
		return nil
	}
	return r.Admin
}

type Identity struct {
	Name  RolesIdentityName  `json:"name"`
	Roles RolesIdentityRoles `json:"roles"`
}

func (i *Identity) GetName() RolesIdentityName {
	if i == nil {
		return RolesIdentityName("")
	}
	return i.Name
}

func (i *Identity) GetRoles() RolesIdentityRoles {
	if i == nil {
		return RolesIdentityRoles{}
	}
	return i.Roles
}

type RolesMeshControlPlanesName string

const (
	RolesMeshControlPlanesNameMeshControlPlane RolesMeshControlPlanesName = "Mesh Control Plane"
)

func (e RolesMeshControlPlanesName) ToPointer() *RolesMeshControlPlanesName {
	return &e
}
func (e *RolesMeshControlPlanesName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Mesh Control Plane":
		*e = RolesMeshControlPlanesName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RolesMeshControlPlanesName: %v", v)
	}
}

type RolesMeshControlPlanesRolesName string

const (
	RolesMeshControlPlanesRolesNameAdmin RolesMeshControlPlanesRolesName = "Admin"
)

func (e RolesMeshControlPlanesRolesName) ToPointer() *RolesMeshControlPlanesRolesName {
	return &e
}
func (e *RolesMeshControlPlanesRolesName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Admin":
		*e = RolesMeshControlPlanesRolesName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RolesMeshControlPlanesRolesName: %v", v)
	}
}

type RolesMeshControlPlanesDescription string

const (
	RolesMeshControlPlanesDescriptionThisRoleGrantsFullWriteAccessToTheRelatedToMeshControlPlanes RolesMeshControlPlanesDescription = "This role grants full write access to the related to Mesh control planes."
)

func (e RolesMeshControlPlanesDescription) ToPointer() *RolesMeshControlPlanesDescription {
	return &e
}
func (e *RolesMeshControlPlanesDescription) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "This role grants full write access to the related to Mesh control planes.":
		*e = RolesMeshControlPlanesDescription(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RolesMeshControlPlanesDescription: %v", v)
	}
}

type RolesMeshControlPlanesAdmin struct {
	Name        RolesMeshControlPlanesRolesName   `json:"name"`
	Description RolesMeshControlPlanesDescription `json:"description"`
}

func (r *RolesMeshControlPlanesAdmin) GetName() RolesMeshControlPlanesRolesName {
	if r == nil {
		return RolesMeshControlPlanesRolesName("")
	}
	return r.Name
}

func (r *RolesMeshControlPlanesAdmin) GetDescription() RolesMeshControlPlanesDescription {
	if r == nil {
		return RolesMeshControlPlanesDescription("")
	}
	return r.Description
}

type RolesMeshControlPlanesRolesConnectorName string

const (
	RolesMeshControlPlanesRolesConnectorNameConnector RolesMeshControlPlanesRolesConnectorName = "Connector"
)

func (e RolesMeshControlPlanesRolesConnectorName) ToPointer() *RolesMeshControlPlanesRolesConnectorName {
	return &e
}
func (e *RolesMeshControlPlanesRolesConnectorName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Connector":
		*e = RolesMeshControlPlanesRolesConnectorName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RolesMeshControlPlanesRolesConnectorName: %v", v)
	}
}

type RolesMeshControlPlanesRolesDescription string

const (
	RolesMeshControlPlanesRolesDescriptionThisRoleGrantsAMeshZoneToConnectToTheMeshControlPlaneInKonnect RolesMeshControlPlanesRolesDescription = "This role grants a mesh zone to connect to the mesh control plane in Konnect."
)

func (e RolesMeshControlPlanesRolesDescription) ToPointer() *RolesMeshControlPlanesRolesDescription {
	return &e
}
func (e *RolesMeshControlPlanesRolesDescription) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "This role grants a mesh zone to connect to the mesh control plane in Konnect.":
		*e = RolesMeshControlPlanesRolesDescription(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RolesMeshControlPlanesRolesDescription: %v", v)
	}
}

type Connector struct {
	Name        RolesMeshControlPlanesRolesConnectorName `json:"name"`
	Description RolesMeshControlPlanesRolesDescription   `json:"description"`
}

func (c *Connector) GetName() RolesMeshControlPlanesRolesConnectorName {
	if c == nil {
		return RolesMeshControlPlanesRolesConnectorName("")
	}
	return c.Name
}

func (c *Connector) GetDescription() RolesMeshControlPlanesRolesDescription {
	if c == nil {
		return RolesMeshControlPlanesRolesDescription("")
	}
	return c.Description
}

type RolesMeshControlPlanesRolesCreatorName string

const (
	RolesMeshControlPlanesRolesCreatorNameCreator RolesMeshControlPlanesRolesCreatorName = "Creator"
)

func (e RolesMeshControlPlanesRolesCreatorName) ToPointer() *RolesMeshControlPlanesRolesCreatorName {
	return &e
}
func (e *RolesMeshControlPlanesRolesCreatorName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Creator":
		*e = RolesMeshControlPlanesRolesCreatorName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RolesMeshControlPlanesRolesCreatorName: %v", v)
	}
}

type RolesMeshControlPlanesRolesCreatorDescription string

const (
	RolesMeshControlPlanesRolesCreatorDescriptionThisRoleGrantsAccessToCreateNewMeshControlPlanes RolesMeshControlPlanesRolesCreatorDescription = "This role grants access to create new Mesh control planes."
)

func (e RolesMeshControlPlanesRolesCreatorDescription) ToPointer() *RolesMeshControlPlanesRolesCreatorDescription {
	return &e
}
func (e *RolesMeshControlPlanesRolesCreatorDescription) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "This role grants access to create new Mesh control planes.":
		*e = RolesMeshControlPlanesRolesCreatorDescription(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RolesMeshControlPlanesRolesCreatorDescription: %v", v)
	}
}

type RolesMeshControlPlanesCreator struct {
	Name        RolesMeshControlPlanesRolesCreatorName        `json:"name"`
	Description RolesMeshControlPlanesRolesCreatorDescription `json:"description"`
}

func (r *RolesMeshControlPlanesCreator) GetName() RolesMeshControlPlanesRolesCreatorName {
	if r == nil {
		return RolesMeshControlPlanesRolesCreatorName("")
	}
	return r.Name
}

func (r *RolesMeshControlPlanesCreator) GetDescription() RolesMeshControlPlanesRolesCreatorDescription {
	if r == nil {
		return RolesMeshControlPlanesRolesCreatorDescription("")
	}
	return r.Description
}

type RolesMeshControlPlanesRolesViewerName string

const (
	RolesMeshControlPlanesRolesViewerNameViewer RolesMeshControlPlanesRolesViewerName = "Viewer"
)

func (e RolesMeshControlPlanesRolesViewerName) ToPointer() *RolesMeshControlPlanesRolesViewerName {
	return &e
}
func (e *RolesMeshControlPlanesRolesViewerName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Viewer":
		*e = RolesMeshControlPlanesRolesViewerName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RolesMeshControlPlanesRolesViewerName: %v", v)
	}
}

type RolesMeshControlPlanesRolesViewerDescription string

const (
	RolesMeshControlPlanesRolesViewerDescriptionThisRoleGrantsAccessToReadOnlyPermissionsToMeshControlPlanes RolesMeshControlPlanesRolesViewerDescription = "This role grants access to read-only permissions to Mesh control planes."
)

func (e RolesMeshControlPlanesRolesViewerDescription) ToPointer() *RolesMeshControlPlanesRolesViewerDescription {
	return &e
}
func (e *RolesMeshControlPlanesRolesViewerDescription) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "This role grants access to read-only permissions to Mesh control planes.":
		*e = RolesMeshControlPlanesRolesViewerDescription(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RolesMeshControlPlanesRolesViewerDescription: %v", v)
	}
}

type RolesMeshControlPlanesViewer struct {
	Name        RolesMeshControlPlanesRolesViewerName        `json:"name"`
	Description RolesMeshControlPlanesRolesViewerDescription `json:"description"`
}

func (r *RolesMeshControlPlanesViewer) GetName() RolesMeshControlPlanesRolesViewerName {
	if r == nil {
		return RolesMeshControlPlanesRolesViewerName("")
	}
	return r.Name
}

func (r *RolesMeshControlPlanesViewer) GetDescription() RolesMeshControlPlanesRolesViewerDescription {
	if r == nil {
		return RolesMeshControlPlanesRolesViewerDescription("")
	}
	return r.Description
}

type RolesMeshControlPlanesRoles struct {
	Admin     *RolesMeshControlPlanesAdmin   `json:"admin,omitempty"`
	Connector *Connector                     `json:"connector,omitempty"`
	Creator   *RolesMeshControlPlanesCreator `json:"creator,omitempty"`
	Viewer    *RolesMeshControlPlanesViewer  `json:"viewer,omitempty"`
}

func (r *RolesMeshControlPlanesRoles) GetAdmin() *RolesMeshControlPlanesAdmin {
	if r == nil {
		return nil
	}
	return r.Admin
}

func (r *RolesMeshControlPlanesRoles) GetConnector() *Connector {
	if r == nil {
		return nil
	}
	return r.Connector
}

func (r *RolesMeshControlPlanesRoles) GetCreator() *RolesMeshControlPlanesCreator {
	if r == nil {
		return nil
	}
	return r.Creator
}

func (r *RolesMeshControlPlanesRoles) GetViewer() *RolesMeshControlPlanesViewer {
	if r == nil {
		return nil
	}
	return r.Viewer
}

type MeshControlPlanes struct {
	Name  RolesMeshControlPlanesName  `json:"name"`
	Roles RolesMeshControlPlanesRoles `json:"roles"`
}

func (m *MeshControlPlanes) GetName() RolesMeshControlPlanesName {
	if m == nil {
		return RolesMeshControlPlanesName("")
	}
	return m.Name
}

func (m *MeshControlPlanes) GetRoles() RolesMeshControlPlanesRoles {
	if m == nil {
		return RolesMeshControlPlanesRoles{}
	}
	return m.Roles
}

type RolesDashboardsName string

const (
	RolesDashboardsNameDashboards RolesDashboardsName = "Dashboards"
)

func (e RolesDashboardsName) ToPointer() *RolesDashboardsName {
	return &e
}
func (e *RolesDashboardsName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Dashboards":
		*e = RolesDashboardsName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RolesDashboardsName: %v", v)
	}
}

type RolesDashboardsRolesName string

const (
	RolesDashboardsRolesNameViewer RolesDashboardsRolesName = "Viewer"
)

func (e RolesDashboardsRolesName) ToPointer() *RolesDashboardsRolesName {
	return &e
}
func (e *RolesDashboardsRolesName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Viewer":
		*e = RolesDashboardsRolesName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RolesDashboardsRolesName: %v", v)
	}
}

type RolesDashboardsDescription string

const (
	RolesDashboardsDescriptionAllowsUsersToViewAnyDashboardsContentInKonnectAnalytics RolesDashboardsDescription = "Allows users to view any Dashboards content in Konnect Analytics."
)

func (e RolesDashboardsDescription) ToPointer() *RolesDashboardsDescription {
	return &e
}
func (e *RolesDashboardsDescription) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Allows users to view any Dashboards content in Konnect Analytics.":
		*e = RolesDashboardsDescription(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RolesDashboardsDescription: %v", v)
	}
}

type RolesDashboardsViewer struct {
	Name        RolesDashboardsRolesName   `json:"name"`
	Description RolesDashboardsDescription `json:"description"`
}

func (r *RolesDashboardsViewer) GetName() RolesDashboardsRolesName {
	if r == nil {
		return RolesDashboardsRolesName("")
	}
	return r.Name
}

func (r *RolesDashboardsViewer) GetDescription() RolesDashboardsDescription {
	if r == nil {
		return RolesDashboardsDescription("")
	}
	return r.Description
}

type RolesDashboardsRoles struct {
	Viewer *RolesDashboardsViewer `json:"viewer,omitempty"`
}

func (r *RolesDashboardsRoles) GetViewer() *RolesDashboardsViewer {
	if r == nil {
		return nil
	}
	return r.Viewer
}

type Dashboards struct {
	Name  RolesDashboardsName  `json:"name"`
	Roles RolesDashboardsRoles `json:"roles"`
}

func (d *Dashboards) GetName() RolesDashboardsName {
	if d == nil {
		return RolesDashboardsName("")
	}
	return d.Name
}

func (d *Dashboards) GetRoles() RolesDashboardsRoles {
	if d == nil {
		return RolesDashboardsRoles{}
	}
	return d.Roles
}

// Roles - The predefined, or system managed, roles.
type Roles struct {
	ControlPlanes     *ControlPlanes     `json:"control_planes,omitempty"`
	APIProducts       *APIProducts       `json:"api_products,omitempty"`
	AuditLogs         *AuditLogs         `json:"audit_logs,omitempty"`
	Identity          *Identity          `json:"identity,omitempty"`
	MeshControlPlanes *MeshControlPlanes `json:"mesh_control_planes,omitempty"`
	Dashboards        *Dashboards        `json:"dashboards,omitempty"`
}

func (r *Roles) GetControlPlanes() *ControlPlanes {
	if r == nil {
		return nil
	}
	return r.ControlPlanes
}

func (r *Roles) GetAPIProducts() *APIProducts {
	if r == nil {
		return nil
	}
	return r.APIProducts
}

func (r *Roles) GetAuditLogs() *AuditLogs {
	if r == nil {
		return nil
	}
	return r.AuditLogs
}

func (r *Roles) GetIdentity() *Identity {
	if r == nil {
		return nil
	}
	return r.Identity
}

func (r *Roles) GetMeshControlPlanes() *MeshControlPlanes {
	if r == nil {
		return nil
	}
	return r.MeshControlPlanes
}

func (r *Roles) GetDashboards() *Dashboards {
	if r == nil {
		return nil
	}
	return r.Dashboards
}
