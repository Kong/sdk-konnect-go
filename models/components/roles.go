// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

type Name string

const (
	NameControlPlanes Name = "Control Planes"
)

func (e Name) ToPointer() *Name {
	return &e
}
func (e *Name) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Control Planes":
		*e = Name(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Name: %v", v)
	}
}

type RolesControlPlanesRolesAdminName string

const (
	RolesControlPlanesRolesAdminNameAdmin RolesControlPlanesRolesAdminName = "Admin"
)

func (e RolesControlPlanesRolesAdminName) ToPointer() *RolesControlPlanesRolesAdminName {
	return &e
}
func (e *RolesControlPlanesRolesAdminName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Admin":
		*e = RolesControlPlanesRolesAdminName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RolesControlPlanesRolesAdminName: %v", v)
	}
}

type Description string

const (
	DescriptionThisRoleGrantsFullWriteAccessToAllEntitiesWithinAControlPlane Description = "This role grants full write access to all entities within a control plane."
)

func (e Description) ToPointer() *Description {
	return &e
}
func (e *Description) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "This role grants full write access to all entities within a control plane.":
		*e = Description(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Description: %v", v)
	}
}

type Admin struct {
	Name        RolesControlPlanesRolesAdminName `json:"name"`
	Description Description                      `json:"description"`
}

func (o *Admin) GetName() RolesControlPlanesRolesAdminName {
	if o == nil {
		return RolesControlPlanesRolesAdminName("")
	}
	return o.Name
}

func (o *Admin) GetDescription() Description {
	if o == nil {
		return Description("")
	}
	return o.Description
}

type RolesControlPlanesName string

const (
	RolesControlPlanesNameCertificateAdmin RolesControlPlanesName = "Certificate Admin"
)

func (e RolesControlPlanesName) ToPointer() *RolesControlPlanesName {
	return &e
}
func (e *RolesControlPlanesName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Certificate Admin":
		*e = RolesControlPlanesName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RolesControlPlanesName: %v", v)
	}
}

type RolesDescription string

const (
	RolesDescriptionThisRoleGrantsFullWriteAccessToAdministerCertificates RolesDescription = "This role grants full write access to administer certificates."
)

func (e RolesDescription) ToPointer() *RolesDescription {
	return &e
}
func (e *RolesDescription) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "This role grants full write access to administer certificates.":
		*e = RolesDescription(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RolesDescription: %v", v)
	}
}

type CertificateAdmin struct {
	Name        RolesControlPlanesName `json:"name"`
	Description RolesDescription       `json:"description"`
}

func (o *CertificateAdmin) GetName() RolesControlPlanesName {
	if o == nil {
		return RolesControlPlanesName("")
	}
	return o.Name
}

func (o *CertificateAdmin) GetDescription() RolesDescription {
	if o == nil {
		return RolesDescription("")
	}
	return o.Description
}

type RolesControlPlanesRolesName string

const (
	RolesControlPlanesRolesNameConsumerAdmin RolesControlPlanesRolesName = "Consumer Admin"
)

func (e RolesControlPlanesRolesName) ToPointer() *RolesControlPlanesRolesName {
	return &e
}
func (e *RolesControlPlanesRolesName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Consumer Admin":
		*e = RolesControlPlanesRolesName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RolesControlPlanesRolesName: %v", v)
	}
}

type RolesControlPlanesDescription string

const (
	RolesControlPlanesDescriptionThisRoleGrantsFullWriteAccessToAdministerConsumers RolesControlPlanesDescription = "This role grants full write access to administer consumers."
)

func (e RolesControlPlanesDescription) ToPointer() *RolesControlPlanesDescription {
	return &e
}
func (e *RolesControlPlanesDescription) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "This role grants full write access to administer consumers.":
		*e = RolesControlPlanesDescription(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RolesControlPlanesDescription: %v", v)
	}
}

type ConsumerAdmin struct {
	Name        RolesControlPlanesRolesName   `json:"name"`
	Description RolesControlPlanesDescription `json:"description"`
}

func (o *ConsumerAdmin) GetName() RolesControlPlanesRolesName {
	if o == nil {
		return RolesControlPlanesRolesName("")
	}
	return o.Name
}

func (o *ConsumerAdmin) GetDescription() RolesControlPlanesDescription {
	if o == nil {
		return RolesControlPlanesDescription("")
	}
	return o.Description
}

type RolesControlPlanesRolesCreatorName string

const (
	RolesControlPlanesRolesCreatorNameCreator RolesControlPlanesRolesCreatorName = "Creator"
)

func (e RolesControlPlanesRolesCreatorName) ToPointer() *RolesControlPlanesRolesCreatorName {
	return &e
}
func (e *RolesControlPlanesRolesCreatorName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Creator":
		*e = RolesControlPlanesRolesCreatorName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RolesControlPlanesRolesCreatorName: %v", v)
	}
}

type RolesControlPlanesRolesDescription string

const (
	RolesControlPlanesRolesDescriptionCreatesANewControlPlaneInAnOrganizationTheCreatorBecomesTheOwnerOfTheControlPlaneTheyCreate RolesControlPlanesRolesDescription = "Creates a new Control Plane in an organization. The creator becomes the owner of the Control Plane they create."
)

func (e RolesControlPlanesRolesDescription) ToPointer() *RolesControlPlanesRolesDescription {
	return &e
}
func (e *RolesControlPlanesRolesDescription) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Creates a new Control Plane in an organization. The creator becomes the owner of the Control Plane they create.":
		*e = RolesControlPlanesRolesDescription(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RolesControlPlanesRolesDescription: %v", v)
	}
}

type Creator struct {
	Name        RolesControlPlanesRolesCreatorName `json:"name"`
	Description RolesControlPlanesRolesDescription `json:"description"`
}

func (o *Creator) GetName() RolesControlPlanesRolesCreatorName {
	if o == nil {
		return RolesControlPlanesRolesCreatorName("")
	}
	return o.Name
}

func (o *Creator) GetDescription() RolesControlPlanesRolesDescription {
	if o == nil {
		return RolesControlPlanesRolesDescription("")
	}
	return o.Description
}

type RolesControlPlanesRolesDeployerName string

const (
	RolesControlPlanesRolesDeployerNameDeployer RolesControlPlanesRolesDeployerName = "Deployer"
)

func (e RolesControlPlanesRolesDeployerName) ToPointer() *RolesControlPlanesRolesDeployerName {
	return &e
}
func (e *RolesControlPlanesRolesDeployerName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Deployer":
		*e = RolesControlPlanesRolesDeployerName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RolesControlPlanesRolesDeployerName: %v", v)
	}
}

type RolesControlPlanesRolesDeployerDescription string

const (
	RolesControlPlanesRolesDeployerDescriptionThisRoleGrantsFullWriteAccessToAdministerServicesRoutesAndPluginsNecessaryToDeployServicesInServiceHub RolesControlPlanesRolesDeployerDescription = "This role grants full write access to administer services, routes and plugins necessary to deploy services in Service Hub."
)

func (e RolesControlPlanesRolesDeployerDescription) ToPointer() *RolesControlPlanesRolesDeployerDescription {
	return &e
}
func (e *RolesControlPlanesRolesDeployerDescription) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "This role grants full write access to administer services, routes and plugins necessary to deploy services in Service Hub.":
		*e = RolesControlPlanesRolesDeployerDescription(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RolesControlPlanesRolesDeployerDescription: %v", v)
	}
}

type Deployer struct {
	Name        RolesControlPlanesRolesDeployerName        `json:"name"`
	Description RolesControlPlanesRolesDeployerDescription `json:"description"`
}

func (o *Deployer) GetName() RolesControlPlanesRolesDeployerName {
	if o == nil {
		return RolesControlPlanesRolesDeployerName("")
	}
	return o.Name
}

func (o *Deployer) GetDescription() RolesControlPlanesRolesDeployerDescription {
	if o == nil {
		return RolesControlPlanesRolesDeployerDescription("")
	}
	return o.Description
}

type RolesControlPlanesRolesGatewayServiceAdminName string

const (
	RolesControlPlanesRolesGatewayServiceAdminNameGatewayServiceAdmin RolesControlPlanesRolesGatewayServiceAdminName = "Gateway Service Admin"
)

func (e RolesControlPlanesRolesGatewayServiceAdminName) ToPointer() *RolesControlPlanesRolesGatewayServiceAdminName {
	return &e
}
func (e *RolesControlPlanesRolesGatewayServiceAdminName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Gateway Service Admin":
		*e = RolesControlPlanesRolesGatewayServiceAdminName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RolesControlPlanesRolesGatewayServiceAdminName: %v", v)
	}
}

type RolesControlPlanesRolesGatewayServiceAdminDescription string

const (
	RolesControlPlanesRolesGatewayServiceAdminDescriptionThisRoleGrantsFullWriteAccessToAdministerGatewayServices RolesControlPlanesRolesGatewayServiceAdminDescription = "This role grants full write access to administer gateway services."
)

func (e RolesControlPlanesRolesGatewayServiceAdminDescription) ToPointer() *RolesControlPlanesRolesGatewayServiceAdminDescription {
	return &e
}
func (e *RolesControlPlanesRolesGatewayServiceAdminDescription) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "This role grants full write access to administer gateway services.":
		*e = RolesControlPlanesRolesGatewayServiceAdminDescription(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RolesControlPlanesRolesGatewayServiceAdminDescription: %v", v)
	}
}

type GatewayServiceAdmin struct {
	Name        RolesControlPlanesRolesGatewayServiceAdminName        `json:"name"`
	Description RolesControlPlanesRolesGatewayServiceAdminDescription `json:"description"`
}

func (o *GatewayServiceAdmin) GetName() RolesControlPlanesRolesGatewayServiceAdminName {
	if o == nil {
		return RolesControlPlanesRolesGatewayServiceAdminName("")
	}
	return o.Name
}

func (o *GatewayServiceAdmin) GetDescription() RolesControlPlanesRolesGatewayServiceAdminDescription {
	if o == nil {
		return RolesControlPlanesRolesGatewayServiceAdminDescription("")
	}
	return o.Description
}

type RolesControlPlanesRolesPluginAdminName string

const (
	RolesControlPlanesRolesPluginAdminNamePluginAdmin RolesControlPlanesRolesPluginAdminName = "Plugin Admin"
)

func (e RolesControlPlanesRolesPluginAdminName) ToPointer() *RolesControlPlanesRolesPluginAdminName {
	return &e
}
func (e *RolesControlPlanesRolesPluginAdminName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Plugin Admin":
		*e = RolesControlPlanesRolesPluginAdminName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RolesControlPlanesRolesPluginAdminName: %v", v)
	}
}

type RolesControlPlanesRolesPluginAdminDescription string

const (
	RolesControlPlanesRolesPluginAdminDescriptionThisRoleGrantsFullWriteAccessToAdministerPlugins RolesControlPlanesRolesPluginAdminDescription = "This role grants full write access to administer plugins."
)

func (e RolesControlPlanesRolesPluginAdminDescription) ToPointer() *RolesControlPlanesRolesPluginAdminDescription {
	return &e
}
func (e *RolesControlPlanesRolesPluginAdminDescription) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "This role grants full write access to administer plugins.":
		*e = RolesControlPlanesRolesPluginAdminDescription(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RolesControlPlanesRolesPluginAdminDescription: %v", v)
	}
}

type PluginAdmin struct {
	Name        RolesControlPlanesRolesPluginAdminName        `json:"name"`
	Description RolesControlPlanesRolesPluginAdminDescription `json:"description"`
}

func (o *PluginAdmin) GetName() RolesControlPlanesRolesPluginAdminName {
	if o == nil {
		return RolesControlPlanesRolesPluginAdminName("")
	}
	return o.Name
}

func (o *PluginAdmin) GetDescription() RolesControlPlanesRolesPluginAdminDescription {
	if o == nil {
		return RolesControlPlanesRolesPluginAdminDescription("")
	}
	return o.Description
}

type RolesControlPlanesRolesRouteAdminName string

const (
	RolesControlPlanesRolesRouteAdminNameRouteAdmin RolesControlPlanesRolesRouteAdminName = "Route Admin"
)

func (e RolesControlPlanesRolesRouteAdminName) ToPointer() *RolesControlPlanesRolesRouteAdminName {
	return &e
}
func (e *RolesControlPlanesRolesRouteAdminName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Route Admin":
		*e = RolesControlPlanesRolesRouteAdminName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RolesControlPlanesRolesRouteAdminName: %v", v)
	}
}

type RolesControlPlanesRolesRouteAdminDescription string

const (
	RolesControlPlanesRolesRouteAdminDescriptionThisRoleGrantsFullWriteAccessToAdministerRoutes RolesControlPlanesRolesRouteAdminDescription = "This role grants full write access to administer routes."
)

func (e RolesControlPlanesRolesRouteAdminDescription) ToPointer() *RolesControlPlanesRolesRouteAdminDescription {
	return &e
}
func (e *RolesControlPlanesRolesRouteAdminDescription) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "This role grants full write access to administer routes.":
		*e = RolesControlPlanesRolesRouteAdminDescription(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RolesControlPlanesRolesRouteAdminDescription: %v", v)
	}
}

type RouteAdmin struct {
	Name        RolesControlPlanesRolesRouteAdminName        `json:"name"`
	Description RolesControlPlanesRolesRouteAdminDescription `json:"description"`
}

func (o *RouteAdmin) GetName() RolesControlPlanesRolesRouteAdminName {
	if o == nil {
		return RolesControlPlanesRolesRouteAdminName("")
	}
	return o.Name
}

func (o *RouteAdmin) GetDescription() RolesControlPlanesRolesRouteAdminDescription {
	if o == nil {
		return RolesControlPlanesRolesRouteAdminDescription("")
	}
	return o.Description
}

type RolesControlPlanesRolesSniAdminName string

const (
	RolesControlPlanesRolesSniAdminNameSniAdmin RolesControlPlanesRolesSniAdminName = "SNI Admin"
)

func (e RolesControlPlanesRolesSniAdminName) ToPointer() *RolesControlPlanesRolesSniAdminName {
	return &e
}
func (e *RolesControlPlanesRolesSniAdminName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SNI Admin":
		*e = RolesControlPlanesRolesSniAdminName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RolesControlPlanesRolesSniAdminName: %v", v)
	}
}

type RolesControlPlanesRolesSniAdminDescription string

const (
	RolesControlPlanesRolesSniAdminDescriptionThisRoleGrantsFullWriteAccessToAdministerSnIs RolesControlPlanesRolesSniAdminDescription = "This role grants full write access to administer SNIs."
)

func (e RolesControlPlanesRolesSniAdminDescription) ToPointer() *RolesControlPlanesRolesSniAdminDescription {
	return &e
}
func (e *RolesControlPlanesRolesSniAdminDescription) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "This role grants full write access to administer SNIs.":
		*e = RolesControlPlanesRolesSniAdminDescription(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RolesControlPlanesRolesSniAdminDescription: %v", v)
	}
}

type SniAdmin struct {
	Name        RolesControlPlanesRolesSniAdminName        `json:"name"`
	Description RolesControlPlanesRolesSniAdminDescription `json:"description"`
}

func (o *SniAdmin) GetName() RolesControlPlanesRolesSniAdminName {
	if o == nil {
		return RolesControlPlanesRolesSniAdminName("")
	}
	return o.Name
}

func (o *SniAdmin) GetDescription() RolesControlPlanesRolesSniAdminDescription {
	if o == nil {
		return RolesControlPlanesRolesSniAdminDescription("")
	}
	return o.Description
}

type RolesControlPlanesRolesUpstreamAdminName string

const (
	RolesControlPlanesRolesUpstreamAdminNameUpstreamAdmin RolesControlPlanesRolesUpstreamAdminName = "Upstream Admin"
)

func (e RolesControlPlanesRolesUpstreamAdminName) ToPointer() *RolesControlPlanesRolesUpstreamAdminName {
	return &e
}
func (e *RolesControlPlanesRolesUpstreamAdminName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Upstream Admin":
		*e = RolesControlPlanesRolesUpstreamAdminName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RolesControlPlanesRolesUpstreamAdminName: %v", v)
	}
}

type RolesControlPlanesRolesUpstreamAdminDescription string

const (
	RolesControlPlanesRolesUpstreamAdminDescriptionThisRoleGrantsFullWriteAccessToAdministerUpstreams RolesControlPlanesRolesUpstreamAdminDescription = "This role grants full write access to administer upstreams."
)

func (e RolesControlPlanesRolesUpstreamAdminDescription) ToPointer() *RolesControlPlanesRolesUpstreamAdminDescription {
	return &e
}
func (e *RolesControlPlanesRolesUpstreamAdminDescription) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "This role grants full write access to administer upstreams.":
		*e = RolesControlPlanesRolesUpstreamAdminDescription(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RolesControlPlanesRolesUpstreamAdminDescription: %v", v)
	}
}

type UpstreamAdmin struct {
	Name        RolesControlPlanesRolesUpstreamAdminName        `json:"name"`
	Description RolesControlPlanesRolesUpstreamAdminDescription `json:"description"`
}

func (o *UpstreamAdmin) GetName() RolesControlPlanesRolesUpstreamAdminName {
	if o == nil {
		return RolesControlPlanesRolesUpstreamAdminName("")
	}
	return o.Name
}

func (o *UpstreamAdmin) GetDescription() RolesControlPlanesRolesUpstreamAdminDescription {
	if o == nil {
		return RolesControlPlanesRolesUpstreamAdminDescription("")
	}
	return o.Description
}

type RolesControlPlanesRolesViewerName string

const (
	RolesControlPlanesRolesViewerNameViewer RolesControlPlanesRolesViewerName = "Viewer"
)

func (e RolesControlPlanesRolesViewerName) ToPointer() *RolesControlPlanesRolesViewerName {
	return &e
}
func (e *RolesControlPlanesRolesViewerName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Viewer":
		*e = RolesControlPlanesRolesViewerName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RolesControlPlanesRolesViewerName: %v", v)
	}
}

type RolesControlPlanesRolesViewerDescription string

const (
	RolesControlPlanesRolesViewerDescriptionThisRoleGrantsReadOnlyAccessToAllEntitiesWithinAControlPlane RolesControlPlanesRolesViewerDescription = "This role grants read only access to all entities within a control plane."
)

func (e RolesControlPlanesRolesViewerDescription) ToPointer() *RolesControlPlanesRolesViewerDescription {
	return &e
}
func (e *RolesControlPlanesRolesViewerDescription) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "This role grants read only access to all entities within a control plane.":
		*e = RolesControlPlanesRolesViewerDescription(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RolesControlPlanesRolesViewerDescription: %v", v)
	}
}

type Viewer struct {
	Name        RolesControlPlanesRolesViewerName        `json:"name"`
	Description RolesControlPlanesRolesViewerDescription `json:"description"`
}

func (o *Viewer) GetName() RolesControlPlanesRolesViewerName {
	if o == nil {
		return RolesControlPlanesRolesViewerName("")
	}
	return o.Name
}

func (o *Viewer) GetDescription() RolesControlPlanesRolesViewerDescription {
	if o == nil {
		return RolesControlPlanesRolesViewerDescription("")
	}
	return o.Description
}

type RolesControlPlanesRoles struct {
	Admin               *Admin               `json:"admin,omitempty"`
	CertificateAdmin    *CertificateAdmin    `json:"certificate_admin,omitempty"`
	ConsumerAdmin       *ConsumerAdmin       `json:"consumer_admin,omitempty"`
	Creator             *Creator             `json:"creator,omitempty"`
	Deployer            *Deployer            `json:"deployer,omitempty"`
	GatewayServiceAdmin *GatewayServiceAdmin `json:"gateway_service_admin,omitempty"`
	PluginAdmin         *PluginAdmin         `json:"plugin_admin,omitempty"`
	RouteAdmin          *RouteAdmin          `json:"route_admin,omitempty"`
	SniAdmin            *SniAdmin            `json:"sni_admin,omitempty"`
	UpstreamAdmin       *UpstreamAdmin       `json:"upstream_admin,omitempty"`
	Viewer              *Viewer              `json:"viewer,omitempty"`
}

func (o *RolesControlPlanesRoles) GetAdmin() *Admin {
	if o == nil {
		return nil
	}
	return o.Admin
}

func (o *RolesControlPlanesRoles) GetCertificateAdmin() *CertificateAdmin {
	if o == nil {
		return nil
	}
	return o.CertificateAdmin
}

func (o *RolesControlPlanesRoles) GetConsumerAdmin() *ConsumerAdmin {
	if o == nil {
		return nil
	}
	return o.ConsumerAdmin
}

func (o *RolesControlPlanesRoles) GetCreator() *Creator {
	if o == nil {
		return nil
	}
	return o.Creator
}

func (o *RolesControlPlanesRoles) GetDeployer() *Deployer {
	if o == nil {
		return nil
	}
	return o.Deployer
}

func (o *RolesControlPlanesRoles) GetGatewayServiceAdmin() *GatewayServiceAdmin {
	if o == nil {
		return nil
	}
	return o.GatewayServiceAdmin
}

func (o *RolesControlPlanesRoles) GetPluginAdmin() *PluginAdmin {
	if o == nil {
		return nil
	}
	return o.PluginAdmin
}

func (o *RolesControlPlanesRoles) GetRouteAdmin() *RouteAdmin {
	if o == nil {
		return nil
	}
	return o.RouteAdmin
}

func (o *RolesControlPlanesRoles) GetSniAdmin() *SniAdmin {
	if o == nil {
		return nil
	}
	return o.SniAdmin
}

func (o *RolesControlPlanesRoles) GetUpstreamAdmin() *UpstreamAdmin {
	if o == nil {
		return nil
	}
	return o.UpstreamAdmin
}

func (o *RolesControlPlanesRoles) GetViewer() *Viewer {
	if o == nil {
		return nil
	}
	return o.Viewer
}

type ControlPlanes struct {
	Name  Name                    `json:"name"`
	Roles RolesControlPlanesRoles `json:"roles"`
}

func (o *ControlPlanes) GetName() Name {
	if o == nil {
		return Name("")
	}
	return o.Name
}

func (o *ControlPlanes) GetRoles() RolesControlPlanesRoles {
	if o == nil {
		return RolesControlPlanesRoles{}
	}
	return o.Roles
}

type RolesName string

const (
	RolesNameAPIProducts RolesName = "API Products"
)

func (e RolesName) ToPointer() *RolesName {
	return &e
}
func (e *RolesName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "API Products":
		*e = RolesName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RolesName: %v", v)
	}
}

type RolesAPIProductsName string

const (
	RolesAPIProductsNameAdmin RolesAPIProductsName = "Admin"
)

func (e RolesAPIProductsName) ToPointer() *RolesAPIProductsName {
	return &e
}
func (e *RolesAPIProductsName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Admin":
		*e = RolesAPIProductsName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RolesAPIProductsName: %v", v)
	}
}

type RolesAPIProductsDescription string

const (
	RolesAPIProductsDescriptionThisRoleGrantsFullWriteAccessToAnAPIProductAndItsVersions RolesAPIProductsDescription = "This role grants full write access to an API product and its versions."
)

func (e RolesAPIProductsDescription) ToPointer() *RolesAPIProductsDescription {
	return &e
}
func (e *RolesAPIProductsDescription) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "This role grants full write access to an API product and its versions.":
		*e = RolesAPIProductsDescription(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RolesAPIProductsDescription: %v", v)
	}
}

type RolesAdmin struct {
	Name        RolesAPIProductsName        `json:"name"`
	Description RolesAPIProductsDescription `json:"description"`
}

func (o *RolesAdmin) GetName() RolesAPIProductsName {
	if o == nil {
		return RolesAPIProductsName("")
	}
	return o.Name
}

func (o *RolesAdmin) GetDescription() RolesAPIProductsDescription {
	if o == nil {
		return RolesAPIProductsDescription("")
	}
	return o.Description
}

type RolesAPIProductsRolesName string

const (
	RolesAPIProductsRolesNameApplicationRegistration RolesAPIProductsRolesName = "Application Registration"
)

func (e RolesAPIProductsRolesName) ToPointer() *RolesAPIProductsRolesName {
	return &e
}
func (e *RolesAPIProductsRolesName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Application Registration":
		*e = RolesAPIProductsRolesName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RolesAPIProductsRolesName: %v", v)
	}
}

type RolesAPIProductsRolesDescription string

const (
	RolesAPIProductsRolesDescriptionThisRoleGrantsPermissionToEnableAndDisableApplicationRegistrationOnAnAPIProduct RolesAPIProductsRolesDescription = "This role grants permission to enable and disable application registration on an API product."
)

func (e RolesAPIProductsRolesDescription) ToPointer() *RolesAPIProductsRolesDescription {
	return &e
}
func (e *RolesAPIProductsRolesDescription) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "This role grants permission to enable and disable application registration on an API product.":
		*e = RolesAPIProductsRolesDescription(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RolesAPIProductsRolesDescription: %v", v)
	}
}

type ApplicationRegistration struct {
	Name        RolesAPIProductsRolesName        `json:"name"`
	Description RolesAPIProductsRolesDescription `json:"description"`
}

func (o *ApplicationRegistration) GetName() RolesAPIProductsRolesName {
	if o == nil {
		return RolesAPIProductsRolesName("")
	}
	return o.Name
}

func (o *ApplicationRegistration) GetDescription() RolesAPIProductsRolesDescription {
	if o == nil {
		return RolesAPIProductsRolesDescription("")
	}
	return o.Description
}

type RolesAPIProductsRolesCreatorName string

const (
	RolesAPIProductsRolesCreatorNameCreator RolesAPIProductsRolesCreatorName = "Creator"
)

func (e RolesAPIProductsRolesCreatorName) ToPointer() *RolesAPIProductsRolesCreatorName {
	return &e
}
func (e *RolesAPIProductsRolesCreatorName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Creator":
		*e = RolesAPIProductsRolesCreatorName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RolesAPIProductsRolesCreatorName: %v", v)
	}
}

type RolesAPIProductsRolesCreatorDescription string

const (
	RolesAPIProductsRolesCreatorDescriptionThisAccessIsRequiredToCreateAPIProductsThisAccessIsNotForCreatingSubEntitiesSuchAsVersionsAPISpecsEtc RolesAPIProductsRolesCreatorDescription = "This access is required to create API products. This access is not for creating sub-entities such as versions, API specs, etc."
)

func (e RolesAPIProductsRolesCreatorDescription) ToPointer() *RolesAPIProductsRolesCreatorDescription {
	return &e
}
func (e *RolesAPIProductsRolesCreatorDescription) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "This access is required to create API products. This access is not for creating sub-entities such as versions, API specs, etc.":
		*e = RolesAPIProductsRolesCreatorDescription(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RolesAPIProductsRolesCreatorDescription: %v", v)
	}
}

type RolesCreator struct {
	Name        RolesAPIProductsRolesCreatorName        `json:"name"`
	Description RolesAPIProductsRolesCreatorDescription `json:"description"`
}

func (o *RolesCreator) GetName() RolesAPIProductsRolesCreatorName {
	if o == nil {
		return RolesAPIProductsRolesCreatorName("")
	}
	return o.Name
}

func (o *RolesCreator) GetDescription() RolesAPIProductsRolesCreatorDescription {
	if o == nil {
		return RolesAPIProductsRolesCreatorDescription("")
	}
	return o.Description
}

type RolesAPIProductsRolesDeployerName string

const (
	RolesAPIProductsRolesDeployerNameDeployer RolesAPIProductsRolesDeployerName = "Deployer"
)

func (e RolesAPIProductsRolesDeployerName) ToPointer() *RolesAPIProductsRolesDeployerName {
	return &e
}
func (e *RolesAPIProductsRolesDeployerName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Deployer":
		*e = RolesAPIProductsRolesDeployerName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RolesAPIProductsRolesDeployerName: %v", v)
	}
}

type RolesAPIProductsRolesDeployerDescription string

const (
	RolesAPIProductsRolesDeployerDescriptionThisRoleGrantsPermissionToDeployAndRemoveAnAPIProductFromAControlPlane RolesAPIProductsRolesDeployerDescription = "This role grants permission to deploy and remove an API product from a control plane."
)

func (e RolesAPIProductsRolesDeployerDescription) ToPointer() *RolesAPIProductsRolesDeployerDescription {
	return &e
}
func (e *RolesAPIProductsRolesDeployerDescription) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "This role grants permission to deploy and remove an API product from a control plane.":
		*e = RolesAPIProductsRolesDeployerDescription(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RolesAPIProductsRolesDeployerDescription: %v", v)
	}
}

type RolesDeployer struct {
	Name        RolesAPIProductsRolesDeployerName        `json:"name"`
	Description RolesAPIProductsRolesDeployerDescription `json:"description"`
}

func (o *RolesDeployer) GetName() RolesAPIProductsRolesDeployerName {
	if o == nil {
		return RolesAPIProductsRolesDeployerName("")
	}
	return o.Name
}

func (o *RolesDeployer) GetDescription() RolesAPIProductsRolesDeployerDescription {
	if o == nil {
		return RolesAPIProductsRolesDeployerDescription("")
	}
	return o.Description
}

type RolesAPIProductsRolesMaintainerName string

const (
	RolesAPIProductsRolesMaintainerNameMaintainer RolesAPIProductsRolesMaintainerName = "Maintainer"
)

func (e RolesAPIProductsRolesMaintainerName) ToPointer() *RolesAPIProductsRolesMaintainerName {
	return &e
}
func (e *RolesAPIProductsRolesMaintainerName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Maintainer":
		*e = RolesAPIProductsRolesMaintainerName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RolesAPIProductsRolesMaintainerName: %v", v)
	}
}

type RolesAPIProductsRolesMaintainerDescription string

const (
	RolesAPIProductsRolesMaintainerDescriptionThisRoleGrantsAllWritePermissionToManageAnAPIProductAndToAdministerPlugins RolesAPIProductsRolesMaintainerDescription = "This role grants all write permission to manage an API product and to administer plugins."
)

func (e RolesAPIProductsRolesMaintainerDescription) ToPointer() *RolesAPIProductsRolesMaintainerDescription {
	return &e
}
func (e *RolesAPIProductsRolesMaintainerDescription) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "This role grants all write permission to manage an API product and to administer plugins.":
		*e = RolesAPIProductsRolesMaintainerDescription(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RolesAPIProductsRolesMaintainerDescription: %v", v)
	}
}

type Maintainer struct {
	Name        RolesAPIProductsRolesMaintainerName        `json:"name"`
	Description RolesAPIProductsRolesMaintainerDescription `json:"description"`
}

func (o *Maintainer) GetName() RolesAPIProductsRolesMaintainerName {
	if o == nil {
		return RolesAPIProductsRolesMaintainerName("")
	}
	return o.Name
}

func (o *Maintainer) GetDescription() RolesAPIProductsRolesMaintainerDescription {
	if o == nil {
		return RolesAPIProductsRolesMaintainerDescription("")
	}
	return o.Description
}

type RolesAPIProductsRolesPluginsAdminName string

const (
	RolesAPIProductsRolesPluginsAdminNamePluginsAdmin RolesAPIProductsRolesPluginsAdminName = "Plugins Admin"
)

func (e RolesAPIProductsRolesPluginsAdminName) ToPointer() *RolesAPIProductsRolesPluginsAdminName {
	return &e
}
func (e *RolesAPIProductsRolesPluginsAdminName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Plugins Admin":
		*e = RolesAPIProductsRolesPluginsAdminName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RolesAPIProductsRolesPluginsAdminName: %v", v)
	}
}

type RolesAPIProductsRolesPluginsAdminDescription string

const (
	RolesAPIProductsRolesPluginsAdminDescriptionThisRoleGrantsFullWritePermissionToAdministerPlugins RolesAPIProductsRolesPluginsAdminDescription = "This role grants full write permission to administer plugins."
)

func (e RolesAPIProductsRolesPluginsAdminDescription) ToPointer() *RolesAPIProductsRolesPluginsAdminDescription {
	return &e
}
func (e *RolesAPIProductsRolesPluginsAdminDescription) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "This role grants full write permission to administer plugins.":
		*e = RolesAPIProductsRolesPluginsAdminDescription(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RolesAPIProductsRolesPluginsAdminDescription: %v", v)
	}
}

type PluginsAdmin struct {
	Name        RolesAPIProductsRolesPluginsAdminName        `json:"name"`
	Description RolesAPIProductsRolesPluginsAdminDescription `json:"description"`
}

func (o *PluginsAdmin) GetName() RolesAPIProductsRolesPluginsAdminName {
	if o == nil {
		return RolesAPIProductsRolesPluginsAdminName("")
	}
	return o.Name
}

func (o *PluginsAdmin) GetDescription() RolesAPIProductsRolesPluginsAdminDescription {
	if o == nil {
		return RolesAPIProductsRolesPluginsAdminDescription("")
	}
	return o.Description
}

type RolesAPIProductsRolesPublisherName string

const (
	RolesAPIProductsRolesPublisherNamePublisher RolesAPIProductsRolesPublisherName = "Publisher"
)

func (e RolesAPIProductsRolesPublisherName) ToPointer() *RolesAPIProductsRolesPublisherName {
	return &e
}
func (e *RolesAPIProductsRolesPublisherName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher":
		*e = RolesAPIProductsRolesPublisherName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RolesAPIProductsRolesPublisherName: %v", v)
	}
}

type RolesAPIProductsRolesPublisherDescription string

const (
	RolesAPIProductsRolesPublisherDescriptionThisRoleGrantsPermissionToPublishAnAPIProductToOneOrMorePortals RolesAPIProductsRolesPublisherDescription = "This role grants permission to publish an API product to one or more portals."
)

func (e RolesAPIProductsRolesPublisherDescription) ToPointer() *RolesAPIProductsRolesPublisherDescription {
	return &e
}
func (e *RolesAPIProductsRolesPublisherDescription) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "This role grants permission to publish an API product to one or more portals.":
		*e = RolesAPIProductsRolesPublisherDescription(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RolesAPIProductsRolesPublisherDescription: %v", v)
	}
}

type Publisher struct {
	Name        RolesAPIProductsRolesPublisherName        `json:"name"`
	Description RolesAPIProductsRolesPublisherDescription `json:"description"`
}

func (o *Publisher) GetName() RolesAPIProductsRolesPublisherName {
	if o == nil {
		return RolesAPIProductsRolesPublisherName("")
	}
	return o.Name
}

func (o *Publisher) GetDescription() RolesAPIProductsRolesPublisherDescription {
	if o == nil {
		return RolesAPIProductsRolesPublisherDescription("")
	}
	return o.Description
}

type RolesAPIProductsRolesViewerName string

const (
	RolesAPIProductsRolesViewerNameViewer RolesAPIProductsRolesViewerName = "Viewer"
)

func (e RolesAPIProductsRolesViewerName) ToPointer() *RolesAPIProductsRolesViewerName {
	return &e
}
func (e *RolesAPIProductsRolesViewerName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Viewer":
		*e = RolesAPIProductsRolesViewerName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RolesAPIProductsRolesViewerName: %v", v)
	}
}

type RolesAPIProductsRolesViewerDescription string

const (
	RolesAPIProductsRolesViewerDescriptionViewerHasReadOnlyAccessToAnAPIProductAndItsSubEntities RolesAPIProductsRolesViewerDescription = "Viewer has read-only access to an API product and its sub-entities."
)

func (e RolesAPIProductsRolesViewerDescription) ToPointer() *RolesAPIProductsRolesViewerDescription {
	return &e
}
func (e *RolesAPIProductsRolesViewerDescription) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Viewer has read-only access to an API product and its sub-entities.":
		*e = RolesAPIProductsRolesViewerDescription(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RolesAPIProductsRolesViewerDescription: %v", v)
	}
}

type RolesViewer struct {
	Name        RolesAPIProductsRolesViewerName        `json:"name"`
	Description RolesAPIProductsRolesViewerDescription `json:"description"`
}

func (o *RolesViewer) GetName() RolesAPIProductsRolesViewerName {
	if o == nil {
		return RolesAPIProductsRolesViewerName("")
	}
	return o.Name
}

func (o *RolesViewer) GetDescription() RolesAPIProductsRolesViewerDescription {
	if o == nil {
		return RolesAPIProductsRolesViewerDescription("")
	}
	return o.Description
}

type RolesRoles struct {
	Admin                   *RolesAdmin              `json:"admin,omitempty"`
	ApplicationRegistration *ApplicationRegistration `json:"application_registration,omitempty"`
	Creator                 *RolesCreator            `json:"creator,omitempty"`
	Deployer                *RolesDeployer           `json:"deployer,omitempty"`
	Maintainer              *Maintainer              `json:"maintainer,omitempty"`
	PluginsAdmin            *PluginsAdmin            `json:"plugins_admin,omitempty"`
	Publisher               *Publisher               `json:"publisher,omitempty"`
	Viewer                  *RolesViewer             `json:"viewer,omitempty"`
}

func (o *RolesRoles) GetAdmin() *RolesAdmin {
	if o == nil {
		return nil
	}
	return o.Admin
}

func (o *RolesRoles) GetApplicationRegistration() *ApplicationRegistration {
	if o == nil {
		return nil
	}
	return o.ApplicationRegistration
}

func (o *RolesRoles) GetCreator() *RolesCreator {
	if o == nil {
		return nil
	}
	return o.Creator
}

func (o *RolesRoles) GetDeployer() *RolesDeployer {
	if o == nil {
		return nil
	}
	return o.Deployer
}

func (o *RolesRoles) GetMaintainer() *Maintainer {
	if o == nil {
		return nil
	}
	return o.Maintainer
}

func (o *RolesRoles) GetPluginsAdmin() *PluginsAdmin {
	if o == nil {
		return nil
	}
	return o.PluginsAdmin
}

func (o *RolesRoles) GetPublisher() *Publisher {
	if o == nil {
		return nil
	}
	return o.Publisher
}

func (o *RolesRoles) GetViewer() *RolesViewer {
	if o == nil {
		return nil
	}
	return o.Viewer
}

type APIProducts struct {
	Name  RolesName  `json:"name"`
	Roles RolesRoles `json:"roles"`
}

func (o *APIProducts) GetName() RolesName {
	if o == nil {
		return RolesName("")
	}
	return o.Name
}

func (o *APIProducts) GetRoles() RolesRoles {
	if o == nil {
		return RolesRoles{}
	}
	return o.Roles
}

type RolesAuditLogsName string

const (
	RolesAuditLogsNameAuditLogs RolesAuditLogsName = "Audit Logs"
)

func (e RolesAuditLogsName) ToPointer() *RolesAuditLogsName {
	return &e
}
func (e *RolesAuditLogsName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Audit Logs":
		*e = RolesAuditLogsName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RolesAuditLogsName: %v", v)
	}
}

type RolesAuditLogsRolesName string

const (
	RolesAuditLogsRolesNameAdmin RolesAuditLogsRolesName = "Admin"
)

func (e RolesAuditLogsRolesName) ToPointer() *RolesAuditLogsRolesName {
	return &e
}
func (e *RolesAuditLogsRolesName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Admin":
		*e = RolesAuditLogsRolesName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RolesAuditLogsRolesName: %v", v)
	}
}

type RolesAuditLogsDescription string

const (
	RolesAuditLogsDescriptionThisRoleGrantsFullWriteAccessToTheAuditLogConfiguration RolesAuditLogsDescription = "This role grants full write access to the Audit log configuration."
)

func (e RolesAuditLogsDescription) ToPointer() *RolesAuditLogsDescription {
	return &e
}
func (e *RolesAuditLogsDescription) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "This role grants full write access to the Audit log configuration.":
		*e = RolesAuditLogsDescription(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RolesAuditLogsDescription: %v", v)
	}
}

type RolesAuditLogsAdmin struct {
	Name        RolesAuditLogsRolesName   `json:"name"`
	Description RolesAuditLogsDescription `json:"description"`
}

func (o *RolesAuditLogsAdmin) GetName() RolesAuditLogsRolesName {
	if o == nil {
		return RolesAuditLogsRolesName("")
	}
	return o.Name
}

func (o *RolesAuditLogsAdmin) GetDescription() RolesAuditLogsDescription {
	if o == nil {
		return RolesAuditLogsDescription("")
	}
	return o.Description
}

type RolesAuditLogsRoles struct {
	Admin *RolesAuditLogsAdmin `json:"admin,omitempty"`
}

func (o *RolesAuditLogsRoles) GetAdmin() *RolesAuditLogsAdmin {
	if o == nil {
		return nil
	}
	return o.Admin
}

type AuditLogs struct {
	Name  RolesAuditLogsName  `json:"name"`
	Roles RolesAuditLogsRoles `json:"roles"`
}

func (o *AuditLogs) GetName() RolesAuditLogsName {
	if o == nil {
		return RolesAuditLogsName("")
	}
	return o.Name
}

func (o *AuditLogs) GetRoles() RolesAuditLogsRoles {
	if o == nil {
		return RolesAuditLogsRoles{}
	}
	return o.Roles
}

type RolesIdentityName string

const (
	RolesIdentityNameIdentity RolesIdentityName = "Identity"
)

func (e RolesIdentityName) ToPointer() *RolesIdentityName {
	return &e
}
func (e *RolesIdentityName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Identity":
		*e = RolesIdentityName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RolesIdentityName: %v", v)
	}
}

type RolesIdentityRolesName string

const (
	RolesIdentityRolesNameAdmin RolesIdentityRolesName = "Admin"
)

func (e RolesIdentityRolesName) ToPointer() *RolesIdentityRolesName {
	return &e
}
func (e *RolesIdentityRolesName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Admin":
		*e = RolesIdentityRolesName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RolesIdentityRolesName: %v", v)
	}
}

type RolesIdentityDescription string

const (
	RolesIdentityDescriptionThisRoleGrantsFullWriteAccessToTheIdentityConfiguration RolesIdentityDescription = "This role grants full write access to the Identity configuration."
)

func (e RolesIdentityDescription) ToPointer() *RolesIdentityDescription {
	return &e
}
func (e *RolesIdentityDescription) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "This role grants full write access to the Identity configuration.":
		*e = RolesIdentityDescription(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RolesIdentityDescription: %v", v)
	}
}

type RolesIdentityAdmin struct {
	Name        RolesIdentityRolesName   `json:"name"`
	Description RolesIdentityDescription `json:"description"`
}

func (o *RolesIdentityAdmin) GetName() RolesIdentityRolesName {
	if o == nil {
		return RolesIdentityRolesName("")
	}
	return o.Name
}

func (o *RolesIdentityAdmin) GetDescription() RolesIdentityDescription {
	if o == nil {
		return RolesIdentityDescription("")
	}
	return o.Description
}

type RolesIdentityRoles struct {
	Admin *RolesIdentityAdmin `json:"admin,omitempty"`
}

func (o *RolesIdentityRoles) GetAdmin() *RolesIdentityAdmin {
	if o == nil {
		return nil
	}
	return o.Admin
}

type Identity struct {
	Name  RolesIdentityName  `json:"name"`
	Roles RolesIdentityRoles `json:"roles"`
}

func (o *Identity) GetName() RolesIdentityName {
	if o == nil {
		return RolesIdentityName("")
	}
	return o.Name
}

func (o *Identity) GetRoles() RolesIdentityRoles {
	if o == nil {
		return RolesIdentityRoles{}
	}
	return o.Roles
}

type RolesMeshControlPlanesName string

const (
	RolesMeshControlPlanesNameMeshControlPlane RolesMeshControlPlanesName = "Mesh Control Plane"
)

func (e RolesMeshControlPlanesName) ToPointer() *RolesMeshControlPlanesName {
	return &e
}
func (e *RolesMeshControlPlanesName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Mesh Control Plane":
		*e = RolesMeshControlPlanesName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RolesMeshControlPlanesName: %v", v)
	}
}

type RolesMeshControlPlanesRolesName string

const (
	RolesMeshControlPlanesRolesNameAdmin RolesMeshControlPlanesRolesName = "Admin"
)

func (e RolesMeshControlPlanesRolesName) ToPointer() *RolesMeshControlPlanesRolesName {
	return &e
}
func (e *RolesMeshControlPlanesRolesName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Admin":
		*e = RolesMeshControlPlanesRolesName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RolesMeshControlPlanesRolesName: %v", v)
	}
}

type RolesMeshControlPlanesDescription string

const (
	RolesMeshControlPlanesDescriptionThisRoleGrantsFullWriteAccessToTheRelatedToMeshControlPlanes RolesMeshControlPlanesDescription = "This role grants full write access to the related to Mesh control planes."
)

func (e RolesMeshControlPlanesDescription) ToPointer() *RolesMeshControlPlanesDescription {
	return &e
}
func (e *RolesMeshControlPlanesDescription) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "This role grants full write access to the related to Mesh control planes.":
		*e = RolesMeshControlPlanesDescription(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RolesMeshControlPlanesDescription: %v", v)
	}
}

type RolesMeshControlPlanesAdmin struct {
	Name        RolesMeshControlPlanesRolesName   `json:"name"`
	Description RolesMeshControlPlanesDescription `json:"description"`
}

func (o *RolesMeshControlPlanesAdmin) GetName() RolesMeshControlPlanesRolesName {
	if o == nil {
		return RolesMeshControlPlanesRolesName("")
	}
	return o.Name
}

func (o *RolesMeshControlPlanesAdmin) GetDescription() RolesMeshControlPlanesDescription {
	if o == nil {
		return RolesMeshControlPlanesDescription("")
	}
	return o.Description
}

type RolesMeshControlPlanesRolesCreatorName string

const (
	RolesMeshControlPlanesRolesCreatorNameCreator RolesMeshControlPlanesRolesCreatorName = "Creator"
)

func (e RolesMeshControlPlanesRolesCreatorName) ToPointer() *RolesMeshControlPlanesRolesCreatorName {
	return &e
}
func (e *RolesMeshControlPlanesRolesCreatorName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Creator":
		*e = RolesMeshControlPlanesRolesCreatorName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RolesMeshControlPlanesRolesCreatorName: %v", v)
	}
}

type RolesMeshControlPlanesRolesDescription string

const (
	RolesMeshControlPlanesRolesDescriptionThisRoleGrantsAccessToCreateNewMeshControlPlanes RolesMeshControlPlanesRolesDescription = "This role grants access to create new Mesh control planes."
)

func (e RolesMeshControlPlanesRolesDescription) ToPointer() *RolesMeshControlPlanesRolesDescription {
	return &e
}
func (e *RolesMeshControlPlanesRolesDescription) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "This role grants access to create new Mesh control planes.":
		*e = RolesMeshControlPlanesRolesDescription(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RolesMeshControlPlanesRolesDescription: %v", v)
	}
}

type RolesMeshControlPlanesCreator struct {
	Name        RolesMeshControlPlanesRolesCreatorName `json:"name"`
	Description RolesMeshControlPlanesRolesDescription `json:"description"`
}

func (o *RolesMeshControlPlanesCreator) GetName() RolesMeshControlPlanesRolesCreatorName {
	if o == nil {
		return RolesMeshControlPlanesRolesCreatorName("")
	}
	return o.Name
}

func (o *RolesMeshControlPlanesCreator) GetDescription() RolesMeshControlPlanesRolesDescription {
	if o == nil {
		return RolesMeshControlPlanesRolesDescription("")
	}
	return o.Description
}

type RolesMeshControlPlanesRolesViewerName string

const (
	RolesMeshControlPlanesRolesViewerNameViewer RolesMeshControlPlanesRolesViewerName = "Viewer"
)

func (e RolesMeshControlPlanesRolesViewerName) ToPointer() *RolesMeshControlPlanesRolesViewerName {
	return &e
}
func (e *RolesMeshControlPlanesRolesViewerName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Viewer":
		*e = RolesMeshControlPlanesRolesViewerName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RolesMeshControlPlanesRolesViewerName: %v", v)
	}
}

type RolesMeshControlPlanesRolesViewerDescription string

const (
	RolesMeshControlPlanesRolesViewerDescriptionThisRoleGrantsAccessToReadOnlyPermissionsToMeshControlPlanes RolesMeshControlPlanesRolesViewerDescription = "This role grants access to read-only permissions to Mesh control planes."
)

func (e RolesMeshControlPlanesRolesViewerDescription) ToPointer() *RolesMeshControlPlanesRolesViewerDescription {
	return &e
}
func (e *RolesMeshControlPlanesRolesViewerDescription) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "This role grants access to read-only permissions to Mesh control planes.":
		*e = RolesMeshControlPlanesRolesViewerDescription(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RolesMeshControlPlanesRolesViewerDescription: %v", v)
	}
}

type RolesMeshControlPlanesViewer struct {
	Name        RolesMeshControlPlanesRolesViewerName        `json:"name"`
	Description RolesMeshControlPlanesRolesViewerDescription `json:"description"`
}

func (o *RolesMeshControlPlanesViewer) GetName() RolesMeshControlPlanesRolesViewerName {
	if o == nil {
		return RolesMeshControlPlanesRolesViewerName("")
	}
	return o.Name
}

func (o *RolesMeshControlPlanesViewer) GetDescription() RolesMeshControlPlanesRolesViewerDescription {
	if o == nil {
		return RolesMeshControlPlanesRolesViewerDescription("")
	}
	return o.Description
}

type RolesMeshControlPlanesRoles struct {
	Admin   *RolesMeshControlPlanesAdmin   `json:"admin,omitempty"`
	Creator *RolesMeshControlPlanesCreator `json:"creator,omitempty"`
	Viewer  *RolesMeshControlPlanesViewer  `json:"viewer,omitempty"`
}

func (o *RolesMeshControlPlanesRoles) GetAdmin() *RolesMeshControlPlanesAdmin {
	if o == nil {
		return nil
	}
	return o.Admin
}

func (o *RolesMeshControlPlanesRoles) GetCreator() *RolesMeshControlPlanesCreator {
	if o == nil {
		return nil
	}
	return o.Creator
}

func (o *RolesMeshControlPlanesRoles) GetViewer() *RolesMeshControlPlanesViewer {
	if o == nil {
		return nil
	}
	return o.Viewer
}

type MeshControlPlanes struct {
	Name  RolesMeshControlPlanesName  `json:"name"`
	Roles RolesMeshControlPlanesRoles `json:"roles"`
}

func (o *MeshControlPlanes) GetName() RolesMeshControlPlanesName {
	if o == nil {
		return RolesMeshControlPlanesName("")
	}
	return o.Name
}

func (o *MeshControlPlanes) GetRoles() RolesMeshControlPlanesRoles {
	if o == nil {
		return RolesMeshControlPlanesRoles{}
	}
	return o.Roles
}

type Roles struct {
	ControlPlanes     *ControlPlanes     `json:"control_planes,omitempty"`
	APIProducts       *APIProducts       `json:"api_products,omitempty"`
	AuditLogs         *AuditLogs         `json:"audit_logs,omitempty"`
	Identity          *Identity          `json:"identity,omitempty"`
	MeshControlPlanes *MeshControlPlanes `json:"mesh_control_planes,omitempty"`
}

func (o *Roles) GetControlPlanes() *ControlPlanes {
	if o == nil {
		return nil
	}
	return o.ControlPlanes
}

func (o *Roles) GetAPIProducts() *APIProducts {
	if o == nil {
		return nil
	}
	return o.APIProducts
}

func (o *Roles) GetAuditLogs() *AuditLogs {
	if o == nil {
		return nil
	}
	return o.AuditLogs
}

func (o *Roles) GetIdentity() *Identity {
	if o == nil {
		return nil
	}
	return o.Identity
}

func (o *Roles) GetMeshControlPlanes() *MeshControlPlanes {
	if o == nil {
		return nil
	}
	return o.MeshControlPlanes
}
