// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

type ListRolesResponseName string

const (
	ListRolesResponseNameServices ListRolesResponseName = "Services"
)

func (e ListRolesResponseName) ToPointer() *ListRolesResponseName {
	return &e
}
func (e *ListRolesResponseName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Services":
		*e = ListRolesResponseName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListRolesResponseName: %v", v)
	}
}

type ListRolesResponseServicesName string

const (
	ListRolesResponseServicesNameAPIViewer ListRolesResponseServicesName = "API Viewer"
)

func (e ListRolesResponseServicesName) ToPointer() *ListRolesResponseServicesName {
	return &e
}
func (e *ListRolesResponseServicesName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "API Viewer":
		*e = ListRolesResponseServicesName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListRolesResponseServicesName: %v", v)
	}
}

type Description string

const (
	DescriptionAPIViewersHaveReadOnlyAccessToTheDocumentationOfAServiceInAPortal Description = "API Viewers have read-only access to the documentation of a service in a portal"
)

func (e Description) ToPointer() *Description {
	return &e
}
func (e *Description) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "API Viewers have read-only access to the documentation of a service in a portal":
		*e = Description(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Description: %v", v)
	}
}

type Apiviewer struct {
	Name        ListRolesResponseServicesName `json:"name"`
	Description Description                   `json:"description"`
}

func (o *Apiviewer) GetName() ListRolesResponseServicesName {
	if o == nil {
		return ListRolesResponseServicesName("")
	}
	return o.Name
}

func (o *Apiviewer) GetDescription() Description {
	if o == nil {
		return Description("")
	}
	return o.Description
}

type ListRolesResponseServicesRolesName string

const (
	ListRolesResponseServicesRolesNameAPIConsumer ListRolesResponseServicesRolesName = "API Consumer"
)

func (e ListRolesResponseServicesRolesName) ToPointer() *ListRolesResponseServicesRolesName {
	return &e
}
func (e *ListRolesResponseServicesRolesName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "API Consumer":
		*e = ListRolesResponseServicesRolesName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListRolesResponseServicesRolesName: %v", v)
	}
}

type ListRolesResponseDescription string

const (
	ListRolesResponseDescriptionAPIConsumersCanMakeCallsToTheGivenService ListRolesResponseDescription = "API Consumers can make calls to the given service"
)

func (e ListRolesResponseDescription) ToPointer() *ListRolesResponseDescription {
	return &e
}
func (e *ListRolesResponseDescription) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "API Consumers can make calls to the given service":
		*e = ListRolesResponseDescription(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListRolesResponseDescription: %v", v)
	}
}

type Apiconsumer struct {
	Name        ListRolesResponseServicesRolesName `json:"name"`
	Description ListRolesResponseDescription       `json:"description"`
}

func (o *Apiconsumer) GetName() ListRolesResponseServicesRolesName {
	if o == nil {
		return ListRolesResponseServicesRolesName("")
	}
	return o.Name
}

func (o *Apiconsumer) GetDescription() ListRolesResponseDescription {
	if o == nil {
		return ListRolesResponseDescription("")
	}
	return o.Description
}

type ListRolesResponseRoles struct {
	Apiviewer   Apiviewer   `json:"apiviewer"`
	Apiconsumer Apiconsumer `json:"apiconsumer"`
}

func (o *ListRolesResponseRoles) GetApiviewer() Apiviewer {
	if o == nil {
		return Apiviewer{}
	}
	return o.Apiviewer
}

func (o *ListRolesResponseRoles) GetApiconsumer() Apiconsumer {
	if o == nil {
		return Apiconsumer{}
	}
	return o.Apiconsumer
}

type Services struct {
	Name  ListRolesResponseName  `json:"name"`
	Roles ListRolesResponseRoles `json:"roles"`
}

func (o *Services) GetName() ListRolesResponseName {
	if o == nil {
		return ListRolesResponseName("")
	}
	return o.Name
}

func (o *Services) GetRoles() ListRolesResponseRoles {
	if o == nil {
		return ListRolesResponseRoles{}
	}
	return o.Roles
}

// ListRolesResponse - The set of roles available to associate with resources and assign to teams.
type ListRolesResponse struct {
	Services Services `json:"services"`
}

func (o *ListRolesResponse) GetServices() Services {
	if o == nil {
		return Services{}
	}
	return o.Services
}
