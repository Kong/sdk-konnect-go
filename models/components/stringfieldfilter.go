// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"errors"
	"fmt"
	"github.com/Kong/sdk-konnect-go/internal/utils"
)

type StringFieldFilterType string

const (
	StringFieldFilterTypeStringFieldEqualsFilter   StringFieldFilterType = "StringFieldEqualsFilter"
	StringFieldFilterTypeStringFieldContainsFilter StringFieldFilterType = "StringFieldContainsFilter"
)

// StringFieldFilter - Filter a string value field either by exact match or partial contains.
type StringFieldFilter struct {
	StringFieldEqualsFilter   *StringFieldEqualsFilter
	StringFieldContainsFilter *StringFieldContainsFilter

	Type StringFieldFilterType
}

func CreateStringFieldFilterStringFieldEqualsFilter(stringFieldEqualsFilter StringFieldEqualsFilter) StringFieldFilter {
	typ := StringFieldFilterTypeStringFieldEqualsFilter

	return StringFieldFilter{
		StringFieldEqualsFilter: &stringFieldEqualsFilter,
		Type:                    typ,
	}
}

func CreateStringFieldFilterStringFieldContainsFilter(stringFieldContainsFilter StringFieldContainsFilter) StringFieldFilter {
	typ := StringFieldFilterTypeStringFieldContainsFilter

	return StringFieldFilter{
		StringFieldContainsFilter: &stringFieldContainsFilter,
		Type:                      typ,
	}
}

func (u *StringFieldFilter) UnmarshalJSON(data []byte) error {

	var stringFieldContainsFilter StringFieldContainsFilter = StringFieldContainsFilter{}
	if err := utils.UnmarshalJSON(data, &stringFieldContainsFilter, "", true, true); err == nil {
		u.StringFieldContainsFilter = &stringFieldContainsFilter
		u.Type = StringFieldFilterTypeStringFieldContainsFilter
		return nil
	}

	var stringFieldEqualsFilter StringFieldEqualsFilter = StringFieldEqualsFilter{}
	if err := utils.UnmarshalJSON(data, &stringFieldEqualsFilter, "", true, true); err == nil {
		u.StringFieldEqualsFilter = &stringFieldEqualsFilter
		u.Type = StringFieldFilterTypeStringFieldEqualsFilter
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for StringFieldFilter", string(data))
}

func (u StringFieldFilter) MarshalJSON() ([]byte, error) {
	if u.StringFieldEqualsFilter != nil {
		return utils.MarshalJSON(u.StringFieldEqualsFilter, "", true)
	}

	if u.StringFieldContainsFilter != nil {
		return utils.MarshalJSON(u.StringFieldContainsFilter, "", true)
	}

	return nil, errors.New("could not marshal union type StringFieldFilter: all fields are null")
}
