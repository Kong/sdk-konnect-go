// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"github.com/Kong/sdk-konnect-go/internal/utils"
)

type Items struct {
	// The custom plugin schema; `jq -Rs '.' schema.lua`.
	LuaSchema *string `default:"null" json:"lua_schema"`
	// The custom plugin name determined by the custom plugin schema.
	Name *string `default:"null" json:"name"`
	// An ISO-8604 timestamp representation of custom plugin schema creation date.
	CreatedAt *int64 `json:"created_at,omitempty"`
	// An ISO-8604 timestamp representation of custom plugin schema update date.
	UpdatedAt *int64 `json:"updated_at,omitempty"`
}

func (i Items) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *Items) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (i *Items) GetLuaSchema() *string {
	if i == nil {
		return nil
	}
	return i.LuaSchema
}

func (i *Items) GetName() *string {
	if i == nil {
		return nil
	}
	return i.Name
}

func (i *Items) GetCreatedAt() *int64 {
	if i == nil {
		return nil
	}
	return i.CreatedAt
}

func (i *Items) GetUpdatedAt() *int64 {
	if i == nil {
		return nil
	}
	return i.UpdatedAt
}

type Page struct {
	Total *int64 `default:"null" json:"total"`
}

func (p Page) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *Page) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (p *Page) GetTotal() *int64 {
	if p == nil {
		return nil
	}
	return p.Total
}

// ListPluginSchemas - A paginated list response for a collection of custom plugin schemas.
type ListPluginSchemas struct {
	Items []Items `json:"items,omitempty"`
	Page  *Page   `json:"page,omitempty"`
}

func (l *ListPluginSchemas) GetItems() []Items {
	if l == nil {
		return nil
	}
	return l.Items
}

func (l *ListPluginSchemas) GetPage() *Page {
	if l == nil {
		return nil
	}
	return l.Page
}
