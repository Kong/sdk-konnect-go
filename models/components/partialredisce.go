// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"github.com/Kong/sdk-konnect-go/internal/utils"
)

type PartialRedisCeConfig struct {
	// Database to use for the Redis connection when using the `redis` strategy
	Database *int64 `default:"0" json:"database"`
	// A string representing a host name, such as example.com.
	Host *string `default:"null" json:"host"`
	// Password to use for Redis connections. If undefined, no AUTH commands are sent to Redis.
	Password *string `default:"null" json:"password"`
	// An integer representing a port number between 0 and 65535, inclusive.
	Port *int64 `default:"6379" json:"port"`
	// A string representing an SNI (server name indication) value for TLS.
	ServerName *string `default:"null" json:"server_name"`
	// If set to true, uses SSL to connect to Redis.
	Ssl *bool `default:"false" json:"ssl"`
	// If set to true, verifies the validity of the server SSL certificate. If setting this parameter, also configure `lua_ssl_trusted_certificate` in `kong.conf` to specify the CA (or server) certificate used by your Redis server. You may also need to configure `lua_ssl_verify_depth` accordingly.
	SslVerify *bool `default:"false" json:"ssl_verify"`
	// An integer representing a timeout in milliseconds. Must be between 0 and 2^31-2.
	Timeout *int64 `default:"2000" json:"timeout"`
	// Username to use for Redis connections. If undefined, ACL authentication won't be performed. This requires Redis v6.0.0+. To be compatible with Redis v5.x.y, you can set it to `default`.
	Username *string `default:"null" json:"username"`
}

func (p PartialRedisCeConfig) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *PartialRedisCeConfig) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (o *PartialRedisCeConfig) GetDatabase() *int64 {
	if o == nil {
		return nil
	}
	return o.Database
}

func (o *PartialRedisCeConfig) GetHost() *string {
	if o == nil {
		return nil
	}
	return o.Host
}

func (o *PartialRedisCeConfig) GetPassword() *string {
	if o == nil {
		return nil
	}
	return o.Password
}

func (o *PartialRedisCeConfig) GetPort() *int64 {
	if o == nil {
		return nil
	}
	return o.Port
}

func (o *PartialRedisCeConfig) GetServerName() *string {
	if o == nil {
		return nil
	}
	return o.ServerName
}

func (o *PartialRedisCeConfig) GetSsl() *bool {
	if o == nil {
		return nil
	}
	return o.Ssl
}

func (o *PartialRedisCeConfig) GetSslVerify() *bool {
	if o == nil {
		return nil
	}
	return o.SslVerify
}

func (o *PartialRedisCeConfig) GetTimeout() *int64 {
	if o == nil {
		return nil
	}
	return o.Timeout
}

func (o *PartialRedisCeConfig) GetUsername() *string {
	if o == nil {
		return nil
	}
	return o.Username
}

type Type string

const (
	TypeRedisCe Type = "redis-ce"
)

func (e Type) ToPointer() *Type {
	return &e
}
func (e *Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-ce":
		*e = Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Type: %v", v)
	}
}

type PartialRedisCe struct {
	Config PartialRedisCeConfig `json:"config"`
	// Unix epoch when the resource was created.
	CreatedAt *int64 `json:"created_at,omitempty"`
	// A string representing a UUID (universally unique identifier).
	ID *string `json:"id,omitempty"`
	// A unique string representing a UTF-8 encoded name.
	Name *string `default:"null" json:"name"`
	// A set of strings representing tags.
	Tags []string `json:"tags,omitempty"`
	Type Type     `json:"type"`
	// Unix epoch when the resource was last updated.
	UpdatedAt *int64 `json:"updated_at,omitempty"`
}

func (p PartialRedisCe) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *PartialRedisCe) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, []string{"config", "type"}); err != nil {
		return err
	}
	return nil
}

func (o *PartialRedisCe) GetConfig() PartialRedisCeConfig {
	if o == nil {
		return PartialRedisCeConfig{}
	}
	return o.Config
}

func (o *PartialRedisCe) GetCreatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *PartialRedisCe) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *PartialRedisCe) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *PartialRedisCe) GetTags() []string {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *PartialRedisCe) GetType() Type {
	if o == nil {
		return Type("")
	}
	return o.Type
}

func (o *PartialRedisCe) GetUpdatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}
