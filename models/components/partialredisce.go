// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

// PartialRedisCEConfig - Redis-CE configuration
type PartialRedisCEConfig struct {
	// Database to use for the Redis connection when using the `redis` strategy
	Database *int64 `json:"database,omitempty"`
	// Redis host.
	Host *string `json:"host,omitempty"`
	// Password to use for Redis connections. If undefined, no AUTH commands are sent to Redis.
	Password *string `json:"password,omitempty"`
	// Redis port.
	Port *int64 `json:"port,omitempty"`
	// Server name for SSL verification.
	ServerName *string `json:"server_name,omitempty"`
	// If set to true, uses SSL to connect to Redis.
	Ssl *bool `json:"ssl,omitempty"`
	// If set to true, verifies the validity of the server SSL certificate.
	SslVerify *bool `json:"ssl_verify,omitempty"`
	// Connection timeout.
	Timeout *int64 `json:"timeout,omitempty"`
	// Username to use for Redis connections. If undefined, ACL authentication won't be performed. Requires Redis v6.0.0+.
	Username *string `json:"username,omitempty"`
}

func (o *PartialRedisCEConfig) GetDatabase() *int64 {
	if o == nil {
		return nil
	}
	return o.Database
}

func (o *PartialRedisCEConfig) GetHost() *string {
	if o == nil {
		return nil
	}
	return o.Host
}

func (o *PartialRedisCEConfig) GetPassword() *string {
	if o == nil {
		return nil
	}
	return o.Password
}

func (o *PartialRedisCEConfig) GetPort() *int64 {
	if o == nil {
		return nil
	}
	return o.Port
}

func (o *PartialRedisCEConfig) GetServerName() *string {
	if o == nil {
		return nil
	}
	return o.ServerName
}

func (o *PartialRedisCEConfig) GetSsl() *bool {
	if o == nil {
		return nil
	}
	return o.Ssl
}

func (o *PartialRedisCEConfig) GetSslVerify() *bool {
	if o == nil {
		return nil
	}
	return o.SslVerify
}

func (o *PartialRedisCEConfig) GetTimeout() *int64 {
	if o == nil {
		return nil
	}
	return o.Timeout
}

func (o *PartialRedisCEConfig) GetUsername() *string {
	if o == nil {
		return nil
	}
	return o.Username
}

type Type string

const (
	TypeRedisCe Type = "redis-ce"
)

func (e Type) ToPointer() *Type {
	return &e
}
func (e *Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-ce":
		*e = Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Type: %v", v)
	}
}

type PartialRedisCE struct {
	// Redis-CE configuration
	Config PartialRedisCEConfig `json:"config"`
	// Unix epoch when the resource was created.
	CreatedAt *int64   `json:"created_at,omitempty"`
	ID        *string  `json:"id,omitempty"`
	Name      *string  `json:"name,omitempty"`
	Tags      []string `json:"tags,omitempty"`
	Type      Type     `json:"type"`
	// Unix epoch when the resource was last updated.
	UpdatedAt *int64 `json:"updated_at,omitempty"`
}

func (o *PartialRedisCE) GetConfig() PartialRedisCEConfig {
	if o == nil {
		return PartialRedisCEConfig{}
	}
	return o.Config
}

func (o *PartialRedisCE) GetCreatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *PartialRedisCE) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *PartialRedisCE) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *PartialRedisCE) GetTags() []string {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *PartialRedisCE) GetType() Type {
	if o == nil {
		return Type("")
	}
	return o.Type
}

func (o *PartialRedisCE) GetUpdatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}
