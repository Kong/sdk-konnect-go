// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"errors"
	"fmt"
	"github.com/Kong/sdk-konnect-go/internal/utils"
	"time"
)

type DateTimeFieldGTEFilter struct {
	// Value is greater than or equal to the given RFC-3339 formatted timestamp in UTC
	Lte *time.Time `default:"null" queryParam:"name=lte"`
}

func (d DateTimeFieldGTEFilter) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DateTimeFieldGTEFilter) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *DateTimeFieldGTEFilter) GetLte() *time.Time {
	if o == nil {
		return nil
	}
	return o.Lte
}

type DateTimeFieldGTFilter struct {
	// Value is greater than the given RFC-3339 formatted timestamp in UTC
	Lt *time.Time `default:"null" queryParam:"name=lt"`
}

func (d DateTimeFieldGTFilter) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DateTimeFieldGTFilter) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *DateTimeFieldGTFilter) GetLt() *time.Time {
	if o == nil {
		return nil
	}
	return o.Lt
}

type DateTimeFieldLTEFilter struct {
	// Value is less than or equal to the given RFC-3339 formatted timestamp in UTC
	Lte time.Time `queryParam:"name=lte"`
}

func (d DateTimeFieldLTEFilter) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DateTimeFieldLTEFilter) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *DateTimeFieldLTEFilter) GetLte() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Lte
}

type DateTimeFieldLTFilter struct {
	// Value is less than the given RFC-3339 formatted timestamp in UTC
	Lt time.Time `queryParam:"name=lt"`
}

func (d DateTimeFieldLTFilter) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DateTimeFieldLTFilter) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *DateTimeFieldLTFilter) GetLt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Lt
}

type DateTimeFieldEqualsFilter struct {
	// Value strictly equals given RFC-3339 formatted timestamp in UTC
	Eq time.Time `queryParam:"name=eq"`
}

func (d DateTimeFieldEqualsFilter) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DateTimeFieldEqualsFilter) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *DateTimeFieldEqualsFilter) GetEq() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Eq
}

type DateTimeFieldFilterType string

const (
	DateTimeFieldFilterTypeDateTimeFieldEqualsFilter DateTimeFieldFilterType = "DateTimeFieldEqualsFilter"
	DateTimeFieldFilterTypeDateTimeFieldLTFilter     DateTimeFieldFilterType = "DateTimeFieldLTFilter"
	DateTimeFieldFilterTypeDateTimeFieldLTEFilter    DateTimeFieldFilterType = "DateTimeFieldLTEFilter"
	DateTimeFieldFilterTypeDateTimeFieldGTFilter     DateTimeFieldFilterType = "DateTimeFieldGTFilter"
	DateTimeFieldFilterTypeDateTimeFieldGTEFilter    DateTimeFieldFilterType = "DateTimeFieldGTEFilter"
)

// DateTimeFieldFilter - Filters on the given datetime (RFC-3339) field value.
type DateTimeFieldFilter struct {
	DateTimeFieldEqualsFilter *DateTimeFieldEqualsFilter `queryParam:"inline"`
	DateTimeFieldLTFilter     *DateTimeFieldLTFilter     `queryParam:"inline"`
	DateTimeFieldLTEFilter    *DateTimeFieldLTEFilter    `queryParam:"inline"`
	DateTimeFieldGTFilter     *DateTimeFieldGTFilter     `queryParam:"inline"`
	DateTimeFieldGTEFilter    *DateTimeFieldGTEFilter    `queryParam:"inline"`

	Type DateTimeFieldFilterType
}

func CreateDateTimeFieldFilterDateTimeFieldEqualsFilter(dateTimeFieldEqualsFilter DateTimeFieldEqualsFilter) DateTimeFieldFilter {
	typ := DateTimeFieldFilterTypeDateTimeFieldEqualsFilter

	return DateTimeFieldFilter{
		DateTimeFieldEqualsFilter: &dateTimeFieldEqualsFilter,
		Type:                      typ,
	}
}

func CreateDateTimeFieldFilterDateTimeFieldLTFilter(dateTimeFieldLTFilter DateTimeFieldLTFilter) DateTimeFieldFilter {
	typ := DateTimeFieldFilterTypeDateTimeFieldLTFilter

	return DateTimeFieldFilter{
		DateTimeFieldLTFilter: &dateTimeFieldLTFilter,
		Type:                  typ,
	}
}

func CreateDateTimeFieldFilterDateTimeFieldLTEFilter(dateTimeFieldLTEFilter DateTimeFieldLTEFilter) DateTimeFieldFilter {
	typ := DateTimeFieldFilterTypeDateTimeFieldLTEFilter

	return DateTimeFieldFilter{
		DateTimeFieldLTEFilter: &dateTimeFieldLTEFilter,
		Type:                   typ,
	}
}

func CreateDateTimeFieldFilterDateTimeFieldGTFilter(dateTimeFieldGTFilter DateTimeFieldGTFilter) DateTimeFieldFilter {
	typ := DateTimeFieldFilterTypeDateTimeFieldGTFilter

	return DateTimeFieldFilter{
		DateTimeFieldGTFilter: &dateTimeFieldGTFilter,
		Type:                  typ,
	}
}

func CreateDateTimeFieldFilterDateTimeFieldGTEFilter(dateTimeFieldGTEFilter DateTimeFieldGTEFilter) DateTimeFieldFilter {
	typ := DateTimeFieldFilterTypeDateTimeFieldGTEFilter

	return DateTimeFieldFilter{
		DateTimeFieldGTEFilter: &dateTimeFieldGTEFilter,
		Type:                   typ,
	}
}

func (u *DateTimeFieldFilter) UnmarshalJSON(data []byte) error {

	var dateTimeFieldEqualsFilter DateTimeFieldEqualsFilter = DateTimeFieldEqualsFilter{}
	if err := utils.UnmarshalJSON(data, &dateTimeFieldEqualsFilter, "", true, true); err == nil {
		u.DateTimeFieldEqualsFilter = &dateTimeFieldEqualsFilter
		u.Type = DateTimeFieldFilterTypeDateTimeFieldEqualsFilter
		return nil
	}

	var dateTimeFieldLTFilter DateTimeFieldLTFilter = DateTimeFieldLTFilter{}
	if err := utils.UnmarshalJSON(data, &dateTimeFieldLTFilter, "", true, true); err == nil {
		u.DateTimeFieldLTFilter = &dateTimeFieldLTFilter
		u.Type = DateTimeFieldFilterTypeDateTimeFieldLTFilter
		return nil
	}

	var dateTimeFieldLTEFilter DateTimeFieldLTEFilter = DateTimeFieldLTEFilter{}
	if err := utils.UnmarshalJSON(data, &dateTimeFieldLTEFilter, "", true, true); err == nil {
		u.DateTimeFieldLTEFilter = &dateTimeFieldLTEFilter
		u.Type = DateTimeFieldFilterTypeDateTimeFieldLTEFilter
		return nil
	}

	var dateTimeFieldGTFilter DateTimeFieldGTFilter = DateTimeFieldGTFilter{}
	if err := utils.UnmarshalJSON(data, &dateTimeFieldGTFilter, "", true, true); err == nil {
		u.DateTimeFieldGTFilter = &dateTimeFieldGTFilter
		u.Type = DateTimeFieldFilterTypeDateTimeFieldGTFilter
		return nil
	}

	var dateTimeFieldGTEFilter DateTimeFieldGTEFilter = DateTimeFieldGTEFilter{}
	if err := utils.UnmarshalJSON(data, &dateTimeFieldGTEFilter, "", true, true); err == nil {
		u.DateTimeFieldGTEFilter = &dateTimeFieldGTEFilter
		u.Type = DateTimeFieldFilterTypeDateTimeFieldGTEFilter
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for DateTimeFieldFilter", string(data))
}

func (u DateTimeFieldFilter) MarshalJSON() ([]byte, error) {
	if u.DateTimeFieldEqualsFilter != nil {
		return utils.MarshalJSON(u.DateTimeFieldEqualsFilter, "", true)
	}

	if u.DateTimeFieldLTFilter != nil {
		return utils.MarshalJSON(u.DateTimeFieldLTFilter, "", true)
	}

	if u.DateTimeFieldLTEFilter != nil {
		return utils.MarshalJSON(u.DateTimeFieldLTEFilter, "", true)
	}

	if u.DateTimeFieldGTFilter != nil {
		return utils.MarshalJSON(u.DateTimeFieldGTFilter, "", true)
	}

	if u.DateTimeFieldGTEFilter != nil {
		return utils.MarshalJSON(u.DateTimeFieldGTEFilter, "", true)
	}

	return nil, errors.New("could not marshal union type DateTimeFieldFilter: all fields are null")
}
