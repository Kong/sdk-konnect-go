// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"github.com/Kong/sdk-konnect-go/internal/utils"
)

type ClusterNodes struct {
	// Cluster node IP.
	IP *string `json:"ip,omitempty"`
	// Cluster node port.
	Port *int64 `json:"port,omitempty"`
}

func (o *ClusterNodes) GetIP() *string {
	if o == nil {
		return nil
	}
	return o.IP
}

func (o *ClusterNodes) GetPort() *int64 {
	if o == nil {
		return nil
	}
	return o.Port
}

type SentinelNodes struct {
	// Sentinel node hostname.
	Host *string `json:"host,omitempty"`
	// Sentinel node port.
	Port *int64 `json:"port,omitempty"`
}

func (o *SentinelNodes) GetHost() *string {
	if o == nil {
		return nil
	}
	return o.Host
}

func (o *SentinelNodes) GetPort() *int64 {
	if o == nil {
		return nil
	}
	return o.Port
}

// PartialRedisEEConfig - Redis-EE configuration
type PartialRedisEEConfig struct {
	// Maximum retry attempts for redirection.
	ClusterMaxRedirections *int64 `default:"5" json:"cluster_max_redirections"`
	// Cluster addresses for Redis connections using the `redis` strategy.
	ClusterNodes []ClusterNodes `json:"cluster_nodes,omitempty"`
	// Connect timeout.
	ConnectTimeout *int64 `default:"1000" json:"connect_timeout"`
	// If the connection to Redis is proxied, e.g., Envoy.
	ConnectionIsProxied *bool `default:"false" json:"connection_is_proxied"`
	// Database index.
	Database *int64 `default:"0" json:"database"`
	// Redis host.
	Host *string `default:"127.0.0.1" json:"host"`
	// Limits the total number of opened connections for a pool.
	KeepaliveBacklog *int64 `json:"keepalive_backlog,omitempty"`
	// Size limit for cosocket connection pool per worker process.
	KeepalivePoolSize *int64 `default:"256" json:"keepalive_pool_size"`
	// Password to use for Redis connections. If undefined, no AUTH commands are sent to Redis.
	Password *string `json:"password,omitempty"`
	// The port is only used when the host is set.
	Port *int64 `default:"6379" json:"port"`
	// Read timeout.
	ReadTimeout *int64 `default:"1000" json:"read_timeout"`
	// Send timeout.
	SendTimeout *int64 `default:"1000" json:"send_timeout"`
	// Sentinel master to use for Redis connections. Defining this implies using Redis Sentinel.
	SentinelMaster *string `json:"sentinel_master,omitempty"`
	// Sentinel addresses for Redis connections using the `redis` strategy. Array must have at least 1 element.
	SentinelNodes []SentinelNodes `json:"sentinel_nodes,omitempty"`
	// Sentinel password to authenticate with a Redis Sentinel instance.
	SentinelPassword *string `json:"sentinel_password,omitempty"`
	// Sentinel role to use for Redis connections when `redis` strategy is used, implies using Redis Sentinel.
	SentinelRole *string `json:"sentinel_role,omitempty"`
	// Sentinel username to authenticate with a Redis Sentinel instance. Requires Redis v6.2.0+.
	SentinelUsername *string `json:"sentinel_username,omitempty"`
	// Server name for SSL verification.
	ServerName *string `json:"server_name,omitempty"`
	// If set to true, uses SSL to connect to Redis.
	Ssl *bool `default:"false" json:"ssl"`
	// If set to true, verifies the validity of the server SSL certificate.
	SslVerify *bool `default:"false" json:"ssl_verify"`
	// Username to use for Redis connections. If undefined, ACL authentication won't be performed. Requires Redis v6.0.0+.
	Username *string `json:"username,omitempty"`
}

func (p PartialRedisEEConfig) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *PartialRedisEEConfig) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *PartialRedisEEConfig) GetClusterMaxRedirections() *int64 {
	if o == nil {
		return nil
	}
	return o.ClusterMaxRedirections
}

func (o *PartialRedisEEConfig) GetClusterNodes() []ClusterNodes {
	if o == nil {
		return nil
	}
	return o.ClusterNodes
}

func (o *PartialRedisEEConfig) GetConnectTimeout() *int64 {
	if o == nil {
		return nil
	}
	return o.ConnectTimeout
}

func (o *PartialRedisEEConfig) GetConnectionIsProxied() *bool {
	if o == nil {
		return nil
	}
	return o.ConnectionIsProxied
}

func (o *PartialRedisEEConfig) GetDatabase() *int64 {
	if o == nil {
		return nil
	}
	return o.Database
}

func (o *PartialRedisEEConfig) GetHost() *string {
	if o == nil {
		return nil
	}
	return o.Host
}

func (o *PartialRedisEEConfig) GetKeepaliveBacklog() *int64 {
	if o == nil {
		return nil
	}
	return o.KeepaliveBacklog
}

func (o *PartialRedisEEConfig) GetKeepalivePoolSize() *int64 {
	if o == nil {
		return nil
	}
	return o.KeepalivePoolSize
}

func (o *PartialRedisEEConfig) GetPassword() *string {
	if o == nil {
		return nil
	}
	return o.Password
}

func (o *PartialRedisEEConfig) GetPort() *int64 {
	if o == nil {
		return nil
	}
	return o.Port
}

func (o *PartialRedisEEConfig) GetReadTimeout() *int64 {
	if o == nil {
		return nil
	}
	return o.ReadTimeout
}

func (o *PartialRedisEEConfig) GetSendTimeout() *int64 {
	if o == nil {
		return nil
	}
	return o.SendTimeout
}

func (o *PartialRedisEEConfig) GetSentinelMaster() *string {
	if o == nil {
		return nil
	}
	return o.SentinelMaster
}

func (o *PartialRedisEEConfig) GetSentinelNodes() []SentinelNodes {
	if o == nil {
		return nil
	}
	return o.SentinelNodes
}

func (o *PartialRedisEEConfig) GetSentinelPassword() *string {
	if o == nil {
		return nil
	}
	return o.SentinelPassword
}

func (o *PartialRedisEEConfig) GetSentinelRole() *string {
	if o == nil {
		return nil
	}
	return o.SentinelRole
}

func (o *PartialRedisEEConfig) GetSentinelUsername() *string {
	if o == nil {
		return nil
	}
	return o.SentinelUsername
}

func (o *PartialRedisEEConfig) GetServerName() *string {
	if o == nil {
		return nil
	}
	return o.ServerName
}

func (o *PartialRedisEEConfig) GetSsl() *bool {
	if o == nil {
		return nil
	}
	return o.Ssl
}

func (o *PartialRedisEEConfig) GetSslVerify() *bool {
	if o == nil {
		return nil
	}
	return o.SslVerify
}

func (o *PartialRedisEEConfig) GetUsername() *string {
	if o == nil {
		return nil
	}
	return o.Username
}

type PartialRedisEEType string

const (
	PartialRedisEETypeRedisEe PartialRedisEEType = "redis-ee"
)

func (e PartialRedisEEType) ToPointer() *PartialRedisEEType {
	return &e
}
func (e *PartialRedisEEType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-ee":
		*e = PartialRedisEEType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PartialRedisEEType: %v", v)
	}
}

type PartialRedisEE struct {
	// Redis-EE configuration
	Config PartialRedisEEConfig `json:"config"`
	// Unix epoch when the resource was created.
	CreatedAt *int64             `json:"created_at,omitempty"`
	ID        *string            `json:"id,omitempty"`
	Name      *string            `json:"name,omitempty"`
	Tags      []string           `json:"tags,omitempty"`
	Type      PartialRedisEEType `json:"type"`
	// Unix epoch when the resource was last updated.
	UpdatedAt *int64 `json:"updated_at,omitempty"`
}

func (o *PartialRedisEE) GetConfig() PartialRedisEEConfig {
	if o == nil {
		return PartialRedisEEConfig{}
	}
	return o.Config
}

func (o *PartialRedisEE) GetCreatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *PartialRedisEE) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *PartialRedisEE) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *PartialRedisEE) GetTags() []string {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *PartialRedisEE) GetType() PartialRedisEEType {
	if o == nil {
		return PartialRedisEEType("")
	}
	return o.Type
}

func (o *PartialRedisEE) GetUpdatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}
