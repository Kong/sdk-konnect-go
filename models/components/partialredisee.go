// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"github.com/Kong/sdk-konnect-go/internal/utils"
)

type ClusterNodes struct {
	// A string representing a host name, such as example.com.
	IP *string `default:"127.0.0.1" json:"ip"`
	// An integer representing a port number between 0 and 65535, inclusive.
	Port *int64 `default:"6379" json:"port"`
}

func (c ClusterNodes) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *ClusterNodes) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (c *ClusterNodes) GetIP() *string {
	if c == nil {
		return nil
	}
	return c.IP
}

func (c *ClusterNodes) GetPort() *int64 {
	if c == nil {
		return nil
	}
	return c.Port
}

type SentinelNodes struct {
	// A string representing a host name, such as example.com.
	Host *string `default:"127.0.0.1" json:"host"`
	// An integer representing a port number between 0 and 65535, inclusive.
	Port *int64 `default:"6379" json:"port"`
}

func (s SentinelNodes) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SentinelNodes) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (s *SentinelNodes) GetHost() *string {
	if s == nil {
		return nil
	}
	return s.Host
}

func (s *SentinelNodes) GetPort() *int64 {
	if s == nil {
		return nil
	}
	return s.Port
}

// SentinelRole - Sentinel role to use for Redis connections when the `redis` strategy is defined. Defining this value implies using Redis Sentinel.
type SentinelRole string

const (
	SentinelRoleAny    SentinelRole = "any"
	SentinelRoleMaster SentinelRole = "master"
	SentinelRoleSlave  SentinelRole = "slave"
)

func (e SentinelRole) ToPointer() *SentinelRole {
	return &e
}

type PartialRedisEeConfig struct {
	// Maximum retry attempts for redirection.
	ClusterMaxRedirections *int64 `default:"5" json:"cluster_max_redirections"`
	// Cluster addresses to use for Redis connections when the `redis` strategy is defined. Defining this field implies using a Redis Cluster. The minimum length of the array is 1 element.
	ClusterNodes []ClusterNodes `json:"cluster_nodes,omitempty"`
	// An integer representing a timeout in milliseconds. Must be between 0 and 2^31-2.
	ConnectTimeout *int64 `default:"2000" json:"connect_timeout"`
	// If the connection to Redis is proxied (e.g. Envoy), set it `true`. Set the `host` and `port` to point to the proxy address.
	ConnectionIsProxied *bool `default:"false" json:"connection_is_proxied"`
	// Database to use for the Redis connection when using the `redis` strategy
	Database *int64 `default:"0" json:"database"`
	// A string representing a host name, such as example.com.
	Host *string `default:"127.0.0.1" json:"host"`
	// Limits the total number of opened connections for a pool. If the connection pool is full, connection queues above the limit go into the backlog queue. If the backlog queue is full, subsequent connect operations fail and return `nil`. Queued operations (subject to set timeouts) resume once the number of connections in the pool is less than `keepalive_pool_size`. If latency is high or throughput is low, try increasing this value. Empirically, this value is larger than `keepalive_pool_size`.
	KeepaliveBacklog *int64 `default:"null" json:"keepalive_backlog"`
	// The size limit for every cosocket connection pool associated with every remote server, per worker process. If neither `keepalive_pool_size` nor `keepalive_backlog` is specified, no pool is created. If `keepalive_pool_size` isn't specified but `keepalive_backlog` is specified, then the pool uses the default value. Try to increase (e.g. 512) this value if latency is high or throughput is low.
	KeepalivePoolSize *int64 `default:"256" json:"keepalive_pool_size"`
	// Password to use for Redis connections. If undefined, no AUTH commands are sent to Redis.
	Password *string `default:"null" json:"password"`
	// An integer representing a port number between 0 and 65535, inclusive.
	Port *int64 `default:"6379" json:"port"`
	// An integer representing a timeout in milliseconds. Must be between 0 and 2^31-2.
	ReadTimeout *int64 `default:"2000" json:"read_timeout"`
	// An integer representing a timeout in milliseconds. Must be between 0 and 2^31-2.
	SendTimeout *int64 `default:"2000" json:"send_timeout"`
	// Sentinel master to use for Redis connections. Defining this value implies using Redis Sentinel.
	SentinelMaster *string `default:"null" json:"sentinel_master"`
	// Sentinel node addresses to use for Redis connections when the `redis` strategy is defined. Defining this field implies using a Redis Sentinel. The minimum length of the array is 1 element.
	SentinelNodes []SentinelNodes `json:"sentinel_nodes,omitempty"`
	// Sentinel password to authenticate with a Redis Sentinel instance. If undefined, no AUTH commands are sent to Redis Sentinels.
	SentinelPassword *string `default:"null" json:"sentinel_password"`
	// Sentinel role to use for Redis connections when the `redis` strategy is defined. Defining this value implies using Redis Sentinel.
	SentinelRole *SentinelRole `json:"sentinel_role,omitempty"`
	// Sentinel username to authenticate with a Redis Sentinel instance. If undefined, ACL authentication won't be performed. This requires Redis v6.2.0+.
	SentinelUsername *string `default:"null" json:"sentinel_username"`
	// A string representing an SNI (server name indication) value for TLS.
	ServerName *string `default:"null" json:"server_name"`
	// If set to true, uses SSL to connect to Redis.
	Ssl *bool `default:"false" json:"ssl"`
	// If set to true, verifies the validity of the server SSL certificate. If setting this parameter, also configure `lua_ssl_trusted_certificate` in `kong.conf` to specify the CA (or server) certificate used by your Redis server. You may also need to configure `lua_ssl_verify_depth` accordingly.
	SslVerify *bool `default:"false" json:"ssl_verify"`
	// Username to use for Redis connections. If undefined, ACL authentication won't be performed. This requires Redis v6.0.0+. To be compatible with Redis v5.x.y, you can set it to `default`.
	Username *string `default:"null" json:"username"`
}

func (p PartialRedisEeConfig) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *PartialRedisEeConfig) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (p *PartialRedisEeConfig) GetClusterMaxRedirections() *int64 {
	if p == nil {
		return nil
	}
	return p.ClusterMaxRedirections
}

func (p *PartialRedisEeConfig) GetClusterNodes() []ClusterNodes {
	if p == nil {
		return nil
	}
	return p.ClusterNodes
}

func (p *PartialRedisEeConfig) GetConnectTimeout() *int64 {
	if p == nil {
		return nil
	}
	return p.ConnectTimeout
}

func (p *PartialRedisEeConfig) GetConnectionIsProxied() *bool {
	if p == nil {
		return nil
	}
	return p.ConnectionIsProxied
}

func (p *PartialRedisEeConfig) GetDatabase() *int64 {
	if p == nil {
		return nil
	}
	return p.Database
}

func (p *PartialRedisEeConfig) GetHost() *string {
	if p == nil {
		return nil
	}
	return p.Host
}

func (p *PartialRedisEeConfig) GetKeepaliveBacklog() *int64 {
	if p == nil {
		return nil
	}
	return p.KeepaliveBacklog
}

func (p *PartialRedisEeConfig) GetKeepalivePoolSize() *int64 {
	if p == nil {
		return nil
	}
	return p.KeepalivePoolSize
}

func (p *PartialRedisEeConfig) GetPassword() *string {
	if p == nil {
		return nil
	}
	return p.Password
}

func (p *PartialRedisEeConfig) GetPort() *int64 {
	if p == nil {
		return nil
	}
	return p.Port
}

func (p *PartialRedisEeConfig) GetReadTimeout() *int64 {
	if p == nil {
		return nil
	}
	return p.ReadTimeout
}

func (p *PartialRedisEeConfig) GetSendTimeout() *int64 {
	if p == nil {
		return nil
	}
	return p.SendTimeout
}

func (p *PartialRedisEeConfig) GetSentinelMaster() *string {
	if p == nil {
		return nil
	}
	return p.SentinelMaster
}

func (p *PartialRedisEeConfig) GetSentinelNodes() []SentinelNodes {
	if p == nil {
		return nil
	}
	return p.SentinelNodes
}

func (p *PartialRedisEeConfig) GetSentinelPassword() *string {
	if p == nil {
		return nil
	}
	return p.SentinelPassword
}

func (p *PartialRedisEeConfig) GetSentinelRole() *SentinelRole {
	if p == nil {
		return nil
	}
	return p.SentinelRole
}

func (p *PartialRedisEeConfig) GetSentinelUsername() *string {
	if p == nil {
		return nil
	}
	return p.SentinelUsername
}

func (p *PartialRedisEeConfig) GetServerName() *string {
	if p == nil {
		return nil
	}
	return p.ServerName
}

func (p *PartialRedisEeConfig) GetSsl() *bool {
	if p == nil {
		return nil
	}
	return p.Ssl
}

func (p *PartialRedisEeConfig) GetSslVerify() *bool {
	if p == nil {
		return nil
	}
	return p.SslVerify
}

func (p *PartialRedisEeConfig) GetUsername() *string {
	if p == nil {
		return nil
	}
	return p.Username
}

type PartialRedisEe struct {
	Config PartialRedisEeConfig `json:"config"`
	// Unix epoch when the resource was created.
	CreatedAt *int64 `json:"created_at,omitempty"`
	// A string representing a UUID (universally unique identifier).
	ID *string `json:"id,omitempty"`
	// A unique string representing a UTF-8 encoded name.
	Name *string `default:"null" json:"name"`
	// A set of strings representing tags.
	Tags  []string `json:"tags,omitempty"`
	type_ string   `const:"redis-ee" json:"type"`
	// Unix epoch when the resource was last updated.
	UpdatedAt *int64 `json:"updated_at,omitempty"`
}

func (p PartialRedisEe) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *PartialRedisEe) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, []string{"config", "type"}); err != nil {
		return err
	}
	return nil
}

func (p *PartialRedisEe) GetConfig() PartialRedisEeConfig {
	if p == nil {
		return PartialRedisEeConfig{}
	}
	return p.Config
}

func (p *PartialRedisEe) GetCreatedAt() *int64 {
	if p == nil {
		return nil
	}
	return p.CreatedAt
}

func (p *PartialRedisEe) GetID() *string {
	if p == nil {
		return nil
	}
	return p.ID
}

func (p *PartialRedisEe) GetName() *string {
	if p == nil {
		return nil
	}
	return p.Name
}

func (p *PartialRedisEe) GetTags() []string {
	if p == nil {
		return nil
	}
	return p.Tags
}

func (p *PartialRedisEe) GetType() string {
	return "redis-ee"
}

func (p *PartialRedisEe) GetUpdatedAt() *int64 {
	if p == nil {
		return nil
	}
	return p.UpdatedAt
}
