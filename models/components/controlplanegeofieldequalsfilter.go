// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"errors"
	"fmt"
	"github.com/Kong/sdk-konnect-go/internal/utils"
)

type ControlPlaneGeoFieldEqualsComparison struct {
	// Set of control-plane geos supported for deploying cloud-gateways configurations.
	Eq ControlPlaneGeo `queryParam:"name=eq"`
}

func (c ControlPlaneGeoFieldEqualsComparison) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *ControlPlaneGeoFieldEqualsComparison) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, []string{"eq"}); err != nil {
		return err
	}
	return nil
}

func (c *ControlPlaneGeoFieldEqualsComparison) GetEq() ControlPlaneGeo {
	if c == nil {
		return ControlPlaneGeo("")
	}
	return c.Eq
}

type ControlPlaneGeoFieldEqualsFilterType string

const (
	ControlPlaneGeoFieldEqualsFilterTypeControlPlaneGeo                      ControlPlaneGeoFieldEqualsFilterType = "ControlPlaneGeo"
	ControlPlaneGeoFieldEqualsFilterTypeControlPlaneGeoFieldEqualsComparison ControlPlaneGeoFieldEqualsFilterType = "ControlPlaneGeoFieldEqualsComparison"
)

// ControlPlaneGeoFieldEqualsFilter - Filter a control-plane geo by exact match.
type ControlPlaneGeoFieldEqualsFilter struct {
	ControlPlaneGeo                      *ControlPlaneGeo                      `queryParam:"inline,name=ControlPlaneGeoFieldEqualsFilter"`
	ControlPlaneGeoFieldEqualsComparison *ControlPlaneGeoFieldEqualsComparison `queryParam:"inline,name=ControlPlaneGeoFieldEqualsFilter"`

	Type ControlPlaneGeoFieldEqualsFilterType
}

func CreateControlPlaneGeoFieldEqualsFilterControlPlaneGeo(controlPlaneGeo ControlPlaneGeo) ControlPlaneGeoFieldEqualsFilter {
	typ := ControlPlaneGeoFieldEqualsFilterTypeControlPlaneGeo

	return ControlPlaneGeoFieldEqualsFilter{
		ControlPlaneGeo: &controlPlaneGeo,
		Type:            typ,
	}
}

func CreateControlPlaneGeoFieldEqualsFilterControlPlaneGeoFieldEqualsComparison(controlPlaneGeoFieldEqualsComparison ControlPlaneGeoFieldEqualsComparison) ControlPlaneGeoFieldEqualsFilter {
	typ := ControlPlaneGeoFieldEqualsFilterTypeControlPlaneGeoFieldEqualsComparison

	return ControlPlaneGeoFieldEqualsFilter{
		ControlPlaneGeoFieldEqualsComparison: &controlPlaneGeoFieldEqualsComparison,
		Type:                                 typ,
	}
}

func (u *ControlPlaneGeoFieldEqualsFilter) UnmarshalJSON(data []byte) error {

	var controlPlaneGeoFieldEqualsComparison ControlPlaneGeoFieldEqualsComparison = ControlPlaneGeoFieldEqualsComparison{}
	if err := utils.UnmarshalJSON(data, &controlPlaneGeoFieldEqualsComparison, "", true, nil); err == nil {
		u.ControlPlaneGeoFieldEqualsComparison = &controlPlaneGeoFieldEqualsComparison
		u.Type = ControlPlaneGeoFieldEqualsFilterTypeControlPlaneGeoFieldEqualsComparison
		return nil
	}

	var controlPlaneGeo ControlPlaneGeo = ControlPlaneGeo("")
	if err := utils.UnmarshalJSON(data, &controlPlaneGeo, "", true, nil); err == nil {
		u.ControlPlaneGeo = &controlPlaneGeo
		u.Type = ControlPlaneGeoFieldEqualsFilterTypeControlPlaneGeo
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for ControlPlaneGeoFieldEqualsFilter", string(data))
}

func (u ControlPlaneGeoFieldEqualsFilter) MarshalJSON() ([]byte, error) {
	if u.ControlPlaneGeo != nil {
		return utils.MarshalJSON(u.ControlPlaneGeo, "", true)
	}

	if u.ControlPlaneGeoFieldEqualsComparison != nil {
		return utils.MarshalJSON(u.ControlPlaneGeoFieldEqualsComparison, "", true)
	}

	return nil, errors.New("could not marshal union type ControlPlaneGeoFieldEqualsFilter: all fields are null")
}
