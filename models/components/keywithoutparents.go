// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

// Pem - A keypair in PEM format.
type Pem struct {
	PrivateKey *string `json:"private_key,omitempty"`
	PublicKey  *string `json:"public_key,omitempty"`
}

func (o *Pem) GetPrivateKey() *string {
	if o == nil {
		return nil
	}
	return o.PrivateKey
}

func (o *Pem) GetPublicKey() *string {
	if o == nil {
		return nil
	}
	return o.PublicKey
}

// Set - The id (an UUID) of the key-set with which to associate the key.
type Set struct {
	ID *string `json:"id,omitempty"`
}

func (o *Set) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// KeyWithoutParents - A Key object holds a representation of asymmetric keys in various formats. When Kong or a Kong plugin requires a specific public or private key to perform certain operations, it can use this entity.
type KeyWithoutParents struct {
	ID *string `json:"id,omitempty"`
	// A JSON Web Key represented as a string.
	Jwk *string `json:"jwk,omitempty"`
	// A unique identifier for a key.
	Kid string `json:"kid"`
	// The name to associate with the given keys.
	Name *string `json:"name,omitempty"`
	// A keypair in PEM format.
	Pem *Pem `json:"pem,omitempty"`
	// The id (an UUID) of the key-set with which to associate the key.
	Set *Set `json:"set,omitempty"`
	// An optional set of strings associated with the Key for grouping and filtering.
	Tags []string `json:"tags,omitempty"`
}

func (o *KeyWithoutParents) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *KeyWithoutParents) GetJwk() *string {
	if o == nil {
		return nil
	}
	return o.Jwk
}

func (o *KeyWithoutParents) GetKid() string {
	if o == nil {
		return ""
	}
	return o.Kid
}

func (o *KeyWithoutParents) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *KeyWithoutParents) GetPem() *Pem {
	if o == nil {
		return nil
	}
	return o.Pem
}

func (o *KeyWithoutParents) GetSet() *Set {
	if o == nil {
		return nil
	}
	return o.Set
}

func (o *KeyWithoutParents) GetTags() []string {
	if o == nil {
		return nil
	}
	return o.Tags
}
