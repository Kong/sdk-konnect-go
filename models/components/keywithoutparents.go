// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"github.com/Kong/sdk-konnect-go/internal/utils"
)

// KeyWithoutParentsPem - A keypair in PEM format.
type KeyWithoutParentsPem struct {
	PrivateKey *string `default:"null" json:"private_key"`
	PublicKey  *string `default:"null" json:"public_key"`
}

func (k KeyWithoutParentsPem) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(k, "", false)
}

func (k *KeyWithoutParentsPem) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &k, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (k *KeyWithoutParentsPem) GetPrivateKey() *string {
	if k == nil {
		return nil
	}
	return k.PrivateKey
}

func (k *KeyWithoutParentsPem) GetPublicKey() *string {
	if k == nil {
		return nil
	}
	return k.PublicKey
}

// KeyWithoutParentsSet - The id (an UUID) of the key-set with which to associate the key.
type KeyWithoutParentsSet struct {
	ID *string `json:"id,omitempty"`
}

func (k *KeyWithoutParentsSet) GetID() *string {
	if k == nil {
		return nil
	}
	return k.ID
}

// KeyWithoutParents - A Key object holds a representation of asymmetric keys in various formats. When Kong or a Kong plugin requires a specific public or private key to perform certain operations, it can use this entity.
type KeyWithoutParents struct {
	// Unix epoch when the resource was created.
	CreatedAt *int64 `json:"created_at,omitempty"`
	// A string representing a UUID (universally unique identifier).
	ID *string `json:"id,omitempty"`
	// A JSON Web Key represented as a string.
	Jwk *string `default:"null" json:"jwk"`
	// A unique identifier for a key.
	Kid string `json:"kid"`
	// The name to associate with the given keys.
	Name *string `default:"null" json:"name"`
	// A keypair in PEM format.
	Pem *KeyWithoutParentsPem `json:"pem,omitempty"`
	// The id (an UUID) of the key-set with which to associate the key.
	Set *KeyWithoutParentsSet `json:"set,omitempty"`
	// An optional set of strings associated with the Key for grouping and filtering.
	Tags []string `json:"tags,omitempty"`
	// Unix epoch when the resource was last updated.
	UpdatedAt *int64 `json:"updated_at,omitempty"`
	// X.509 certificate SHA-1 thumbprint.
	X5t *string `default:"null" json:"x5t"`
}

func (k KeyWithoutParents) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(k, "", false)
}

func (k *KeyWithoutParents) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &k, "", false, []string{"kid"}); err != nil {
		return err
	}
	return nil
}

func (k *KeyWithoutParents) GetCreatedAt() *int64 {
	if k == nil {
		return nil
	}
	return k.CreatedAt
}

func (k *KeyWithoutParents) GetID() *string {
	if k == nil {
		return nil
	}
	return k.ID
}

func (k *KeyWithoutParents) GetJwk() *string {
	if k == nil {
		return nil
	}
	return k.Jwk
}

func (k *KeyWithoutParents) GetKid() string {
	if k == nil {
		return ""
	}
	return k.Kid
}

func (k *KeyWithoutParents) GetName() *string {
	if k == nil {
		return nil
	}
	return k.Name
}

func (k *KeyWithoutParents) GetPem() *KeyWithoutParentsPem {
	if k == nil {
		return nil
	}
	return k.Pem
}

func (k *KeyWithoutParents) GetSet() *KeyWithoutParentsSet {
	if k == nil {
		return nil
	}
	return k.Set
}

func (k *KeyWithoutParents) GetTags() []string {
	if k == nil {
		return nil
	}
	return k.Tags
}

func (k *KeyWithoutParents) GetUpdatedAt() *int64 {
	if k == nil {
		return nil
	}
	return k.UpdatedAt
}

func (k *KeyWithoutParents) GetX5t() *string {
	if k == nil {
		return nil
	}
	return k.X5t
}
