// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"errors"
	"fmt"
	"github.com/Kong/sdk-konnect-go/internal/utils"
)

type CreateIdentityProviderConfigType string

const (
	CreateIdentityProviderConfigTypeOIDCIdentityProviderConfig      CreateIdentityProviderConfigType = "OIDCIdentityProviderConfig"
	CreateIdentityProviderConfigTypeSAMLIdentityProviderConfigInput CreateIdentityProviderConfigType = "SAMLIdentityProviderConfig_input"
)

type CreateIdentityProviderConfig struct {
	OIDCIdentityProviderConfig      *OIDCIdentityProviderConfig      `queryParam:"inline"`
	SAMLIdentityProviderConfigInput *SAMLIdentityProviderConfigInput `queryParam:"inline"`

	Type CreateIdentityProviderConfigType
}

func CreateCreateIdentityProviderConfigOIDCIdentityProviderConfig(oidcIdentityProviderConfig OIDCIdentityProviderConfig) CreateIdentityProviderConfig {
	typ := CreateIdentityProviderConfigTypeOIDCIdentityProviderConfig

	return CreateIdentityProviderConfig{
		OIDCIdentityProviderConfig: &oidcIdentityProviderConfig,
		Type:                       typ,
	}
}

func CreateCreateIdentityProviderConfigSAMLIdentityProviderConfigInput(samlIdentityProviderConfigInput SAMLIdentityProviderConfigInput) CreateIdentityProviderConfig {
	typ := CreateIdentityProviderConfigTypeSAMLIdentityProviderConfigInput

	return CreateIdentityProviderConfig{
		SAMLIdentityProviderConfigInput: &samlIdentityProviderConfigInput,
		Type:                            typ,
	}
}

func (u *CreateIdentityProviderConfig) UnmarshalJSON(data []byte) error {

	var samlIdentityProviderConfigInput SAMLIdentityProviderConfigInput = SAMLIdentityProviderConfigInput{}
	if err := utils.UnmarshalJSON(data, &samlIdentityProviderConfigInput, "", true, true); err == nil {
		u.SAMLIdentityProviderConfigInput = &samlIdentityProviderConfigInput
		u.Type = CreateIdentityProviderConfigTypeSAMLIdentityProviderConfigInput
		return nil
	}

	var oidcIdentityProviderConfig OIDCIdentityProviderConfig = OIDCIdentityProviderConfig{}
	if err := utils.UnmarshalJSON(data, &oidcIdentityProviderConfig, "", true, true); err == nil {
		u.OIDCIdentityProviderConfig = &oidcIdentityProviderConfig
		u.Type = CreateIdentityProviderConfigTypeOIDCIdentityProviderConfig
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CreateIdentityProviderConfig", string(data))
}

func (u CreateIdentityProviderConfig) MarshalJSON() ([]byte, error) {
	if u.OIDCIdentityProviderConfig != nil {
		return utils.MarshalJSON(u.OIDCIdentityProviderConfig, "", true)
	}

	if u.SAMLIdentityProviderConfigInput != nil {
		return utils.MarshalJSON(u.SAMLIdentityProviderConfigInput, "", true)
	}

	return nil, errors.New("could not marshal union type CreateIdentityProviderConfig: all fields are null")
}

// CreateIdentityProvider - The identity provider that contains configuration data for creating an authentication integration.
type CreateIdentityProvider struct {
	// Specifies the type of identity provider.
	Type *IdentityProviderType `json:"type,omitempty"`
	// The path used for initiating login requests with the identity provider.
	LoginPath *string                       `json:"login_path,omitempty"`
	Config    *CreateIdentityProviderConfig `json:"config,omitempty"`
}

func (o *CreateIdentityProvider) GetType() *IdentityProviderType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *CreateIdentityProvider) GetLoginPath() *string {
	if o == nil {
		return nil
	}
	return o.LoginPath
}

func (o *CreateIdentityProvider) GetConfig() *CreateIdentityProviderConfig {
	if o == nil {
		return nil
	}
	return o.Config
}
