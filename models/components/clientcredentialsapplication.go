// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"github.com/Kong/sdk-konnect-go/internal/utils"
	"time"
)

// DcrProvider - Information about the DCR provider this application uses, if using DCR.
type DcrProvider struct {
	// Contains a unique identifier used for this resource.
	ID string `json:"id"`
}

func (d DcrProvider) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DcrProvider) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, []string{"id"}); err != nil {
		return err
	}
	return nil
}

func (d *DcrProvider) GetID() string {
	if d == nil {
		return ""
	}
	return d.ID
}

// Portal - Information about the portal the application is in.
type Portal struct {
	// Contains a unique identifier used for this resource.
	ID string `json:"id"`
}

func (p Portal) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *Portal) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, []string{"id"}); err != nil {
		return err
	}
	return nil
}

func (p *Portal) GetID() string {
	if p == nil {
		return ""
	}
	return p.ID
}

type ClientCredentialsApplication struct {
	// Contains a unique identifier used for this resource.
	ID string `json:"id"`
	// An ISO-8601 timestamp representation of entity creation date.
	CreatedAt time.Time `json:"created_at"`
	// An ISO-8601 timestamp representation of entity update date.
	UpdatedAt time.Time `json:"updated_at"`
	// The name of the application.
	Name string `json:"name"`
	// A description of the application.
	Description *string `default:"null" json:"description"`
	// The ID used to linked the portal application to an Identity Provider application.
	ClientID string `json:"client_id"`
	// The number of API registrations that are associated with the application. Registrations of any status are included in the count.
	RegistrationCount float64 `json:"registration_count"`
	// Information about the DCR provider this application uses, if using DCR.
	DcrProvider *DcrProvider `json:"dcr_provider"`
	// Information about the portal the application is in.
	Portal Portal `json:"portal"`
	// Client Credential Auth strategy that the application uses.
	AuthStrategy AuthStrategyClientCredentials `json:"auth_strategy"`
	// List of granted scopes for the application. Null if application type does not support returning granted scopes.
	GrantedScopes []string `json:"granted_scopes"`
}

func (c ClientCredentialsApplication) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *ClientCredentialsApplication) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, []string{"id", "created_at", "updated_at", "name", "client_id", "registration_count", "portal", "auth_strategy"}); err != nil {
		return err
	}
	return nil
}

func (c *ClientCredentialsApplication) GetID() string {
	if c == nil {
		return ""
	}
	return c.ID
}

func (c *ClientCredentialsApplication) GetCreatedAt() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.CreatedAt
}

func (c *ClientCredentialsApplication) GetUpdatedAt() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.UpdatedAt
}

func (c *ClientCredentialsApplication) GetName() string {
	if c == nil {
		return ""
	}
	return c.Name
}

func (c *ClientCredentialsApplication) GetDescription() *string {
	if c == nil {
		return nil
	}
	return c.Description
}

func (c *ClientCredentialsApplication) GetClientID() string {
	if c == nil {
		return ""
	}
	return c.ClientID
}

func (c *ClientCredentialsApplication) GetRegistrationCount() float64 {
	if c == nil {
		return 0.0
	}
	return c.RegistrationCount
}

func (c *ClientCredentialsApplication) GetDcrProvider() *DcrProvider {
	if c == nil {
		return nil
	}
	return c.DcrProvider
}

func (c *ClientCredentialsApplication) GetPortal() Portal {
	if c == nil {
		return Portal{}
	}
	return c.Portal
}

func (c *ClientCredentialsApplication) GetAuthStrategy() AuthStrategyClientCredentials {
	if c == nil {
		return AuthStrategyClientCredentials{}
	}
	return c.AuthStrategy
}

func (c *ClientCredentialsApplication) GetGrantedScopes() []string {
	if c == nil {
		return nil
	}
	return c.GrantedScopes
}
