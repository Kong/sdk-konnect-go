// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/Kong/sdk-konnect-go/internal/utils"
	"time"
)

// DcrProviderHTTPDcrProviderResponseDcrConfig - The DCR configuration for this DCR provider.
type DcrProviderHTTPDcrProviderResponseDcrConfig struct {
}

func (d DcrProviderHTTPDcrProviderResponseDcrConfig) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DcrProviderHTTPDcrProviderResponseDcrConfig) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, nil); err != nil {
		return err
	}
	return nil
}

// DCRProviderHTTPDCRProviderHTTP - A DCR provider for HTTP -- only properties not included in DcrProviderBase
type DCRProviderHTTPDCRProviderHTTP struct {
	// The type of DCR provider. Can be one of the following - auth0, azureAd, curity, okta, http
	ProviderType string `json:"provider_type"`
	// The DCR configuration for this DCR provider.
	DcrConfig DcrProviderHTTPDcrProviderResponseDcrConfig `json:"dcr_config"`
	// Contains a unique identifier used for this resource.
	ID string `json:"id"`
	// The name of the DCR provider. This is used to identify the DCR provider in the Konnect UI.
	//
	Name string `json:"name"`
	// The display name of the DCR provider. This is used to identify the DCR provider in the Portal UI.
	//
	DisplayName *string `json:"display_name,omitempty"`
	// The issuer of the DCR provider.
	Issuer string `json:"issuer"`
	// At least one active auth strategy is using this DCR provider.
	Active bool `json:"active"`
	// Labels store metadata of an entity that can be used for filtering an entity list or for searching across entity types.
	//
	// Keys must be of length 1-63 characters, and cannot start with "kong", "konnect", "mesh", "kic", or "_".
	//
	Labels map[string]string `json:"labels,omitempty"`
	// An ISO-8601 timestamp representation of entity creation date.
	CreatedAt time.Time `json:"created_at"`
	// An ISO-8601 timestamp representation of entity update date.
	UpdatedAt time.Time `json:"updated_at"`
}

func (d DCRProviderHTTPDCRProviderHTTP) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DCRProviderHTTPDCRProviderHTTP) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, []string{"provider_type", "dcr_config", "id", "name", "issuer", "active", "created_at", "updated_at"}); err != nil {
		return err
	}
	return nil
}

func (d *DCRProviderHTTPDCRProviderHTTP) GetProviderType() string {
	if d == nil {
		return ""
	}
	return d.ProviderType
}

func (d *DCRProviderHTTPDCRProviderHTTP) GetDcrConfig() DcrProviderHTTPDcrProviderResponseDcrConfig {
	if d == nil {
		return DcrProviderHTTPDcrProviderResponseDcrConfig{}
	}
	return d.DcrConfig
}

func (d *DCRProviderHTTPDCRProviderHTTP) GetID() string {
	if d == nil {
		return ""
	}
	return d.ID
}

func (d *DCRProviderHTTPDCRProviderHTTP) GetName() string {
	if d == nil {
		return ""
	}
	return d.Name
}

func (d *DCRProviderHTTPDCRProviderHTTP) GetDisplayName() *string {
	if d == nil {
		return nil
	}
	return d.DisplayName
}

func (d *DCRProviderHTTPDCRProviderHTTP) GetIssuer() string {
	if d == nil {
		return ""
	}
	return d.Issuer
}

func (d *DCRProviderHTTPDCRProviderHTTP) GetActive() bool {
	if d == nil {
		return false
	}
	return d.Active
}

func (d *DCRProviderHTTPDCRProviderHTTP) GetLabels() map[string]string {
	if d == nil {
		return nil
	}
	return d.Labels
}

func (d *DCRProviderHTTPDCRProviderHTTP) GetCreatedAt() time.Time {
	if d == nil {
		return time.Time{}
	}
	return d.CreatedAt
}

func (d *DCRProviderHTTPDCRProviderHTTP) GetUpdatedAt() time.Time {
	if d == nil {
		return time.Time{}
	}
	return d.UpdatedAt
}

// DcrProviderOktaDcrProviderResponseDcrConfig - The DCR configuration for this DCR provider.
type DcrProviderOktaDcrProviderResponseDcrConfig struct {
}

func (d DcrProviderOktaDcrProviderResponseDcrConfig) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DcrProviderOktaDcrProviderResponseDcrConfig) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, nil); err != nil {
		return err
	}
	return nil
}

// DCRProviderOKTADCRProviderOKTA - A DCR provider for Okta -- only properties not included in DcrProviderBase
type DCRProviderOKTADCRProviderOKTA struct {
	// The type of DCR provider. Can be one of the following - auth0, azureAd, curity, okta, http
	ProviderType string `json:"provider_type"`
	// The DCR configuration for this DCR provider.
	DcrConfig DcrProviderOktaDcrProviderResponseDcrConfig `json:"dcr_config"`
	// Contains a unique identifier used for this resource.
	ID string `json:"id"`
	// The name of the DCR provider. This is used to identify the DCR provider in the Konnect UI.
	//
	Name string `json:"name"`
	// The display name of the DCR provider. This is used to identify the DCR provider in the Portal UI.
	//
	DisplayName *string `json:"display_name,omitempty"`
	// The issuer of the DCR provider.
	Issuer string `json:"issuer"`
	// At least one active auth strategy is using this DCR provider.
	Active bool `json:"active"`
	// Labels store metadata of an entity that can be used for filtering an entity list or for searching across entity types.
	//
	// Keys must be of length 1-63 characters, and cannot start with "kong", "konnect", "mesh", "kic", or "_".
	//
	Labels map[string]string `json:"labels,omitempty"`
	// An ISO-8601 timestamp representation of entity creation date.
	CreatedAt time.Time `json:"created_at"`
	// An ISO-8601 timestamp representation of entity update date.
	UpdatedAt time.Time `json:"updated_at"`
}

func (d DCRProviderOKTADCRProviderOKTA) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DCRProviderOKTADCRProviderOKTA) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, []string{"provider_type", "dcr_config", "id", "name", "issuer", "active", "created_at", "updated_at"}); err != nil {
		return err
	}
	return nil
}

func (d *DCRProviderOKTADCRProviderOKTA) GetProviderType() string {
	if d == nil {
		return ""
	}
	return d.ProviderType
}

func (d *DCRProviderOKTADCRProviderOKTA) GetDcrConfig() DcrProviderOktaDcrProviderResponseDcrConfig {
	if d == nil {
		return DcrProviderOktaDcrProviderResponseDcrConfig{}
	}
	return d.DcrConfig
}

func (d *DCRProviderOKTADCRProviderOKTA) GetID() string {
	if d == nil {
		return ""
	}
	return d.ID
}

func (d *DCRProviderOKTADCRProviderOKTA) GetName() string {
	if d == nil {
		return ""
	}
	return d.Name
}

func (d *DCRProviderOKTADCRProviderOKTA) GetDisplayName() *string {
	if d == nil {
		return nil
	}
	return d.DisplayName
}

func (d *DCRProviderOKTADCRProviderOKTA) GetIssuer() string {
	if d == nil {
		return ""
	}
	return d.Issuer
}

func (d *DCRProviderOKTADCRProviderOKTA) GetActive() bool {
	if d == nil {
		return false
	}
	return d.Active
}

func (d *DCRProviderOKTADCRProviderOKTA) GetLabels() map[string]string {
	if d == nil {
		return nil
	}
	return d.Labels
}

func (d *DCRProviderOKTADCRProviderOKTA) GetCreatedAt() time.Time {
	if d == nil {
		return time.Time{}
	}
	return d.CreatedAt
}

func (d *DCRProviderOKTADCRProviderOKTA) GetUpdatedAt() time.Time {
	if d == nil {
		return time.Time{}
	}
	return d.UpdatedAt
}

// DcrProviderCurityDcrProviderResponseDcrConfig - The DCR configuration for this DCR provider.
type DcrProviderCurityDcrProviderResponseDcrConfig struct {
}

func (d DcrProviderCurityDcrProviderResponseDcrConfig) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DcrProviderCurityDcrProviderResponseDcrConfig) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, nil); err != nil {
		return err
	}
	return nil
}

// DCRProviderCurityDCRProviderCurity - A DCR provider for Curity -- only properties not included in DcrProviderBase
type DCRProviderCurityDCRProviderCurity struct {
	// The type of DCR provider. Can be one of the following - auth0, azureAd, curity, okta, http
	ProviderType string `json:"provider_type"`
	// The DCR configuration for this DCR provider.
	DcrConfig DcrProviderCurityDcrProviderResponseDcrConfig `json:"dcr_config"`
	// Contains a unique identifier used for this resource.
	ID string `json:"id"`
	// The name of the DCR provider. This is used to identify the DCR provider in the Konnect UI.
	//
	Name string `json:"name"`
	// The display name of the DCR provider. This is used to identify the DCR provider in the Portal UI.
	//
	DisplayName *string `json:"display_name,omitempty"`
	// The issuer of the DCR provider.
	Issuer string `json:"issuer"`
	// At least one active auth strategy is using this DCR provider.
	Active bool `json:"active"`
	// Labels store metadata of an entity that can be used for filtering an entity list or for searching across entity types.
	//
	// Keys must be of length 1-63 characters, and cannot start with "kong", "konnect", "mesh", "kic", or "_".
	//
	Labels map[string]string `json:"labels,omitempty"`
	// An ISO-8601 timestamp representation of entity creation date.
	CreatedAt time.Time `json:"created_at"`
	// An ISO-8601 timestamp representation of entity update date.
	UpdatedAt time.Time `json:"updated_at"`
}

func (d DCRProviderCurityDCRProviderCurity) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DCRProviderCurityDCRProviderCurity) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, []string{"provider_type", "dcr_config", "id", "name", "issuer", "active", "created_at", "updated_at"}); err != nil {
		return err
	}
	return nil
}

func (d *DCRProviderCurityDCRProviderCurity) GetProviderType() string {
	if d == nil {
		return ""
	}
	return d.ProviderType
}

func (d *DCRProviderCurityDCRProviderCurity) GetDcrConfig() DcrProviderCurityDcrProviderResponseDcrConfig {
	if d == nil {
		return DcrProviderCurityDcrProviderResponseDcrConfig{}
	}
	return d.DcrConfig
}

func (d *DCRProviderCurityDCRProviderCurity) GetID() string {
	if d == nil {
		return ""
	}
	return d.ID
}

func (d *DCRProviderCurityDCRProviderCurity) GetName() string {
	if d == nil {
		return ""
	}
	return d.Name
}

func (d *DCRProviderCurityDCRProviderCurity) GetDisplayName() *string {
	if d == nil {
		return nil
	}
	return d.DisplayName
}

func (d *DCRProviderCurityDCRProviderCurity) GetIssuer() string {
	if d == nil {
		return ""
	}
	return d.Issuer
}

func (d *DCRProviderCurityDCRProviderCurity) GetActive() bool {
	if d == nil {
		return false
	}
	return d.Active
}

func (d *DCRProviderCurityDCRProviderCurity) GetLabels() map[string]string {
	if d == nil {
		return nil
	}
	return d.Labels
}

func (d *DCRProviderCurityDCRProviderCurity) GetCreatedAt() time.Time {
	if d == nil {
		return time.Time{}
	}
	return d.CreatedAt
}

func (d *DCRProviderCurityDCRProviderCurity) GetUpdatedAt() time.Time {
	if d == nil {
		return time.Time{}
	}
	return d.UpdatedAt
}

// DcrProviderAzureAdDcrProviderResponseDcrConfig - The DCR configuration for this DCR provider.
type DcrProviderAzureAdDcrProviderResponseDcrConfig struct {
}

func (d DcrProviderAzureAdDcrProviderResponseDcrConfig) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DcrProviderAzureAdDcrProviderResponseDcrConfig) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, nil); err != nil {
		return err
	}
	return nil
}

// DCRProviderAzureADDCRProviderAzureAD - A DCR provider for Azure AD -- only properties not included in DcrProviderBase
type DCRProviderAzureADDCRProviderAzureAD struct {
	// The type of DCR provider. Can be one of the following - auth0, azureAd, curity, okta, http
	ProviderType string `json:"provider_type"`
	// The DCR configuration for this DCR provider.
	DcrConfig DcrProviderAzureAdDcrProviderResponseDcrConfig `json:"dcr_config"`
	// Contains a unique identifier used for this resource.
	ID string `json:"id"`
	// The name of the DCR provider. This is used to identify the DCR provider in the Konnect UI.
	//
	Name string `json:"name"`
	// The display name of the DCR provider. This is used to identify the DCR provider in the Portal UI.
	//
	DisplayName *string `json:"display_name,omitempty"`
	// The issuer of the DCR provider.
	Issuer string `json:"issuer"`
	// At least one active auth strategy is using this DCR provider.
	Active bool `json:"active"`
	// Labels store metadata of an entity that can be used for filtering an entity list or for searching across entity types.
	//
	// Keys must be of length 1-63 characters, and cannot start with "kong", "konnect", "mesh", "kic", or "_".
	//
	Labels map[string]string `json:"labels,omitempty"`
	// An ISO-8601 timestamp representation of entity creation date.
	CreatedAt time.Time `json:"created_at"`
	// An ISO-8601 timestamp representation of entity update date.
	UpdatedAt time.Time `json:"updated_at"`
}

func (d DCRProviderAzureADDCRProviderAzureAD) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DCRProviderAzureADDCRProviderAzureAD) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, []string{"provider_type", "dcr_config", "id", "name", "issuer", "active", "created_at", "updated_at"}); err != nil {
		return err
	}
	return nil
}

func (d *DCRProviderAzureADDCRProviderAzureAD) GetProviderType() string {
	if d == nil {
		return ""
	}
	return d.ProviderType
}

func (d *DCRProviderAzureADDCRProviderAzureAD) GetDcrConfig() DcrProviderAzureAdDcrProviderResponseDcrConfig {
	if d == nil {
		return DcrProviderAzureAdDcrProviderResponseDcrConfig{}
	}
	return d.DcrConfig
}

func (d *DCRProviderAzureADDCRProviderAzureAD) GetID() string {
	if d == nil {
		return ""
	}
	return d.ID
}

func (d *DCRProviderAzureADDCRProviderAzureAD) GetName() string {
	if d == nil {
		return ""
	}
	return d.Name
}

func (d *DCRProviderAzureADDCRProviderAzureAD) GetDisplayName() *string {
	if d == nil {
		return nil
	}
	return d.DisplayName
}

func (d *DCRProviderAzureADDCRProviderAzureAD) GetIssuer() string {
	if d == nil {
		return ""
	}
	return d.Issuer
}

func (d *DCRProviderAzureADDCRProviderAzureAD) GetActive() bool {
	if d == nil {
		return false
	}
	return d.Active
}

func (d *DCRProviderAzureADDCRProviderAzureAD) GetLabels() map[string]string {
	if d == nil {
		return nil
	}
	return d.Labels
}

func (d *DCRProviderAzureADDCRProviderAzureAD) GetCreatedAt() time.Time {
	if d == nil {
		return time.Time{}
	}
	return d.CreatedAt
}

func (d *DCRProviderAzureADDCRProviderAzureAD) GetUpdatedAt() time.Time {
	if d == nil {
		return time.Time{}
	}
	return d.UpdatedAt
}

// DcrProviderAuth0DcrConfig - The DCR configuration for this DCR provider.
type DcrProviderAuth0DcrConfig struct {
}

func (d DcrProviderAuth0DcrConfig) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DcrProviderAuth0DcrConfig) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, nil); err != nil {
		return err
	}
	return nil
}

// DCRProviderAuth0DCRProviderAuth0 - A DCR provider for Auth0 -- only properties not included in DcrProviderBase
type DCRProviderAuth0DCRProviderAuth0 struct {
	// The type of DCR provider. Can be one of the following - auth0, azureAd, curity, okta, http
	ProviderType string `json:"provider_type"`
	// The DCR configuration for this DCR provider.
	DcrConfig DcrProviderAuth0DcrConfig `json:"dcr_config"`
	// Contains a unique identifier used for this resource.
	ID string `json:"id"`
	// The name of the DCR provider. This is used to identify the DCR provider in the Konnect UI.
	//
	Name string `json:"name"`
	// The display name of the DCR provider. This is used to identify the DCR provider in the Portal UI.
	//
	DisplayName *string `json:"display_name,omitempty"`
	// The issuer of the DCR provider.
	Issuer string `json:"issuer"`
	// At least one active auth strategy is using this DCR provider.
	Active bool `json:"active"`
	// Labels store metadata of an entity that can be used for filtering an entity list or for searching across entity types.
	//
	// Keys must be of length 1-63 characters, and cannot start with "kong", "konnect", "mesh", "kic", or "_".
	//
	Labels map[string]string `json:"labels,omitempty"`
	// An ISO-8601 timestamp representation of entity creation date.
	CreatedAt time.Time `json:"created_at"`
	// An ISO-8601 timestamp representation of entity update date.
	UpdatedAt time.Time `json:"updated_at"`
}

func (d DCRProviderAuth0DCRProviderAuth0) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DCRProviderAuth0DCRProviderAuth0) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, []string{"provider_type", "dcr_config", "id", "name", "issuer", "active", "created_at", "updated_at"}); err != nil {
		return err
	}
	return nil
}

func (d *DCRProviderAuth0DCRProviderAuth0) GetProviderType() string {
	if d == nil {
		return ""
	}
	return d.ProviderType
}

func (d *DCRProviderAuth0DCRProviderAuth0) GetDcrConfig() DcrProviderAuth0DcrConfig {
	if d == nil {
		return DcrProviderAuth0DcrConfig{}
	}
	return d.DcrConfig
}

func (d *DCRProviderAuth0DCRProviderAuth0) GetID() string {
	if d == nil {
		return ""
	}
	return d.ID
}

func (d *DCRProviderAuth0DCRProviderAuth0) GetName() string {
	if d == nil {
		return ""
	}
	return d.Name
}

func (d *DCRProviderAuth0DCRProviderAuth0) GetDisplayName() *string {
	if d == nil {
		return nil
	}
	return d.DisplayName
}

func (d *DCRProviderAuth0DCRProviderAuth0) GetIssuer() string {
	if d == nil {
		return ""
	}
	return d.Issuer
}

func (d *DCRProviderAuth0DCRProviderAuth0) GetActive() bool {
	if d == nil {
		return false
	}
	return d.Active
}

func (d *DCRProviderAuth0DCRProviderAuth0) GetLabels() map[string]string {
	if d == nil {
		return nil
	}
	return d.Labels
}

func (d *DCRProviderAuth0DCRProviderAuth0) GetCreatedAt() time.Time {
	if d == nil {
		return time.Time{}
	}
	return d.CreatedAt
}

func (d *DCRProviderAuth0DCRProviderAuth0) GetUpdatedAt() time.Time {
	if d == nil {
		return time.Time{}
	}
	return d.UpdatedAt
}

type DcrProviderResponseType string

const (
	DcrProviderResponseTypeDcrProviderAuth0   DcrProviderResponseType = "DcrProviderAuth0"
	DcrProviderResponseTypeDcrProviderAzureAd DcrProviderResponseType = "DcrProviderAzureAd"
	DcrProviderResponseTypeDcrProviderCurity  DcrProviderResponseType = "DcrProviderCurity"
	DcrProviderResponseTypeDcrProviderOkta    DcrProviderResponseType = "DcrProviderOkta"
	DcrProviderResponseTypeDcrProviderHTTP    DcrProviderResponseType = "DcrProviderHttp"
)

// DcrProviderResponse - A response containing a single DCR provider object. Sensitive fields will be removed from the response.
type DcrProviderResponse struct {
	DCRProviderAuth0DCRProviderAuth0     *DCRProviderAuth0DCRProviderAuth0     `queryParam:"inline,name=DcrProviderResponse"`
	DCRProviderAzureADDCRProviderAzureAD *DCRProviderAzureADDCRProviderAzureAD `queryParam:"inline,name=DcrProviderResponse"`
	DCRProviderCurityDCRProviderCurity   *DCRProviderCurityDCRProviderCurity   `queryParam:"inline,name=DcrProviderResponse"`
	DCRProviderOKTADCRProviderOKTA       *DCRProviderOKTADCRProviderOKTA       `queryParam:"inline,name=DcrProviderResponse"`
	DCRProviderHTTPDCRProviderHTTP       *DCRProviderHTTPDCRProviderHTTP       `queryParam:"inline,name=DcrProviderResponse"`

	Type DcrProviderResponseType
}

func CreateDcrProviderResponseDcrProviderAuth0(dcrProviderAuth0 DCRProviderAuth0DCRProviderAuth0) DcrProviderResponse {
	typ := DcrProviderResponseTypeDcrProviderAuth0

	typStr := string(typ)
	dcrProviderAuth0.ProviderType = typStr

	return DcrProviderResponse{
		DCRProviderAuth0DCRProviderAuth0: &dcrProviderAuth0,
		Type:                             typ,
	}
}

func CreateDcrProviderResponseDcrProviderAzureAd(dcrProviderAzureAd DCRProviderAzureADDCRProviderAzureAD) DcrProviderResponse {
	typ := DcrProviderResponseTypeDcrProviderAzureAd

	typStr := string(typ)
	dcrProviderAzureAd.ProviderType = typStr

	return DcrProviderResponse{
		DCRProviderAzureADDCRProviderAzureAD: &dcrProviderAzureAd,
		Type:                                 typ,
	}
}

func CreateDcrProviderResponseDcrProviderCurity(dcrProviderCurity DCRProviderCurityDCRProviderCurity) DcrProviderResponse {
	typ := DcrProviderResponseTypeDcrProviderCurity

	typStr := string(typ)
	dcrProviderCurity.ProviderType = typStr

	return DcrProviderResponse{
		DCRProviderCurityDCRProviderCurity: &dcrProviderCurity,
		Type:                               typ,
	}
}

func CreateDcrProviderResponseDcrProviderOkta(dcrProviderOkta DCRProviderOKTADCRProviderOKTA) DcrProviderResponse {
	typ := DcrProviderResponseTypeDcrProviderOkta

	typStr := string(typ)
	dcrProviderOkta.ProviderType = typStr

	return DcrProviderResponse{
		DCRProviderOKTADCRProviderOKTA: &dcrProviderOkta,
		Type:                           typ,
	}
}

func CreateDcrProviderResponseDcrProviderHTTP(dcrProviderHTTP DCRProviderHTTPDCRProviderHTTP) DcrProviderResponse {
	typ := DcrProviderResponseTypeDcrProviderHTTP

	typStr := string(typ)
	dcrProviderHTTP.ProviderType = typStr

	return DcrProviderResponse{
		DCRProviderHTTPDCRProviderHTTP: &dcrProviderHTTP,
		Type:                           typ,
	}
}

func (u *DcrProviderResponse) UnmarshalJSON(data []byte) error {

	type discriminator struct {
		ProviderType string `json:"provider_type"`
	}

	dis := new(discriminator)
	if err := json.Unmarshal(data, &dis); err != nil {
		return fmt.Errorf("could not unmarshal discriminator: %w", err)
	}

	switch dis.ProviderType {
	case "DcrProviderAuth0":
		dcrProviderAuth0DCRProviderAuth0 := new(DCRProviderAuth0DCRProviderAuth0)
		if err := utils.UnmarshalJSON(data, &dcrProviderAuth0DCRProviderAuth0, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (ProviderType == DcrProviderAuth0) type DCRProviderAuth0DCRProviderAuth0 within DcrProviderResponse: %w", string(data), err)
		}

		u.DCRProviderAuth0DCRProviderAuth0 = dcrProviderAuth0DCRProviderAuth0
		u.Type = DcrProviderResponseTypeDcrProviderAuth0
		return nil
	case "DcrProviderAzureAd":
		dcrProviderAzureADDCRProviderAzureAD := new(DCRProviderAzureADDCRProviderAzureAD)
		if err := utils.UnmarshalJSON(data, &dcrProviderAzureADDCRProviderAzureAD, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (ProviderType == DcrProviderAzureAd) type DCRProviderAzureADDCRProviderAzureAD within DcrProviderResponse: %w", string(data), err)
		}

		u.DCRProviderAzureADDCRProviderAzureAD = dcrProviderAzureADDCRProviderAzureAD
		u.Type = DcrProviderResponseTypeDcrProviderAzureAd
		return nil
	case "DcrProviderCurity":
		dcrProviderCurityDCRProviderCurity := new(DCRProviderCurityDCRProviderCurity)
		if err := utils.UnmarshalJSON(data, &dcrProviderCurityDCRProviderCurity, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (ProviderType == DcrProviderCurity) type DCRProviderCurityDCRProviderCurity within DcrProviderResponse: %w", string(data), err)
		}

		u.DCRProviderCurityDCRProviderCurity = dcrProviderCurityDCRProviderCurity
		u.Type = DcrProviderResponseTypeDcrProviderCurity
		return nil
	case "DcrProviderOkta":
		dcrProviderOKTADCRProviderOKTA := new(DCRProviderOKTADCRProviderOKTA)
		if err := utils.UnmarshalJSON(data, &dcrProviderOKTADCRProviderOKTA, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (ProviderType == DcrProviderOkta) type DCRProviderOKTADCRProviderOKTA within DcrProviderResponse: %w", string(data), err)
		}

		u.DCRProviderOKTADCRProviderOKTA = dcrProviderOKTADCRProviderOKTA
		u.Type = DcrProviderResponseTypeDcrProviderOkta
		return nil
	case "DcrProviderHttp":
		dcrProviderHTTPDCRProviderHTTP := new(DCRProviderHTTPDCRProviderHTTP)
		if err := utils.UnmarshalJSON(data, &dcrProviderHTTPDCRProviderHTTP, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (ProviderType == DcrProviderHttp) type DCRProviderHTTPDCRProviderHTTP within DcrProviderResponse: %w", string(data), err)
		}

		u.DCRProviderHTTPDCRProviderHTTP = dcrProviderHTTPDCRProviderHTTP
		u.Type = DcrProviderResponseTypeDcrProviderHTTP
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for DcrProviderResponse", string(data))
}

func (u DcrProviderResponse) MarshalJSON() ([]byte, error) {
	if u.DCRProviderAuth0DCRProviderAuth0 != nil {
		return utils.MarshalJSON(u.DCRProviderAuth0DCRProviderAuth0, "", true)
	}

	if u.DCRProviderAzureADDCRProviderAzureAD != nil {
		return utils.MarshalJSON(u.DCRProviderAzureADDCRProviderAzureAD, "", true)
	}

	if u.DCRProviderCurityDCRProviderCurity != nil {
		return utils.MarshalJSON(u.DCRProviderCurityDCRProviderCurity, "", true)
	}

	if u.DCRProviderOKTADCRProviderOKTA != nil {
		return utils.MarshalJSON(u.DCRProviderOKTADCRProviderOKTA, "", true)
	}

	if u.DCRProviderHTTPDCRProviderHTTP != nil {
		return utils.MarshalJSON(u.DCRProviderHTTPDCRProviderHTTP, "", true)
	}

	return nil, errors.New("could not marshal union type DcrProviderResponse: all fields are null")
}
