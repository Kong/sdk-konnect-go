// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

// InvalidRules - invalid parameters rules
type InvalidRules string

const (
	InvalidRulesRequired                               InvalidRules = "required"
	InvalidRulesIsArray                                InvalidRules = "is_array"
	InvalidRulesIsBase64                               InvalidRules = "is_base64"
	InvalidRulesIsBoolean                              InvalidRules = "is_boolean"
	InvalidRulesIsDateTime                             InvalidRules = "is_date_time"
	InvalidRulesIsInteger                              InvalidRules = "is_integer"
	InvalidRulesIsNull                                 InvalidRules = "is_null"
	InvalidRulesIsNumber                               InvalidRules = "is_number"
	InvalidRulesIsObject                               InvalidRules = "is_object"
	InvalidRulesIsString                               InvalidRules = "is_string"
	InvalidRulesIsUUID                                 InvalidRules = "is_uuid"
	InvalidRulesIsFqdn                                 InvalidRules = "is_fqdn"
	InvalidRulesIsArn                                  InvalidRules = "is_arn"
	InvalidRulesUnknownProperty                        InvalidRules = "unknown_property"
	InvalidRulesMissingReference                       InvalidRules = "missing_reference"
	InvalidRulesIsLabel                                InvalidRules = "is_label"
	InvalidRulesMatchesRegex                           InvalidRules = "matches_regex"
	InvalidRulesInvalid                                InvalidRules = "invalid"
	InvalidRulesIsSupportedNetworkAvailabilityZoneList InvalidRules = "is_supported_network_availability_zone_list"
	InvalidRulesIsSupportedNetworkCidrBlock            InvalidRules = "is_supported_network_cidr_block"
	InvalidRulesIsSupportedProviderRegion              InvalidRules = "is_supported_provider_region"
	InvalidRulesType                                   InvalidRules = "type"
)

func (e InvalidRules) ToPointer() *InvalidRules {
	return &e
}
