// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/Kong/sdk-konnect-go/internal/utils"
)

type CreateDcrProviderRequestType string

const (
	CreateDcrProviderRequestTypeAuth0   CreateDcrProviderRequestType = "auth0"
	CreateDcrProviderRequestTypeAzureAd CreateDcrProviderRequestType = "azureAd"
	CreateDcrProviderRequestTypeCurity  CreateDcrProviderRequestType = "curity"
	CreateDcrProviderRequestTypeOkta    CreateDcrProviderRequestType = "okta"
	CreateDcrProviderRequestTypeHTTP    CreateDcrProviderRequestType = "http"
)

// CreateDcrProviderRequest - Request body for creating a DCR provider. The provider_type cannot be updated after creation.
type CreateDcrProviderRequest struct {
	CreateDcrProviderRequestAuth0   *CreateDcrProviderRequestAuth0   `queryParam:"inline"`
	CreateDcrProviderRequestAzureAd *CreateDcrProviderRequestAzureAd `queryParam:"inline"`
	CreateDcrProviderRequestCurity  *CreateDcrProviderRequestCurity  `queryParam:"inline"`
	CreateDcrProviderRequestOkta    *CreateDcrProviderRequestOkta    `queryParam:"inline"`
	CreateDcrProviderRequestHTTP    *CreateDcrProviderRequestHTTP    `queryParam:"inline"`

	Type CreateDcrProviderRequestType
}

func CreateCreateDcrProviderRequestAuth0(auth0 CreateDcrProviderRequestAuth0) CreateDcrProviderRequest {
	typ := CreateDcrProviderRequestTypeAuth0

	typStr := ProviderType(typ)
	auth0.ProviderType = typStr

	return CreateDcrProviderRequest{
		CreateDcrProviderRequestAuth0: &auth0,
		Type:                          typ,
	}
}

func CreateCreateDcrProviderRequestAzureAd(azureAd CreateDcrProviderRequestAzureAd) CreateDcrProviderRequest {
	typ := CreateDcrProviderRequestTypeAzureAd

	typStr := CreateDcrProviderRequestAzureAdProviderType(typ)
	azureAd.ProviderType = typStr

	return CreateDcrProviderRequest{
		CreateDcrProviderRequestAzureAd: &azureAd,
		Type:                            typ,
	}
}

func CreateCreateDcrProviderRequestCurity(curity CreateDcrProviderRequestCurity) CreateDcrProviderRequest {
	typ := CreateDcrProviderRequestTypeCurity

	typStr := CreateDcrProviderRequestCurityProviderType(typ)
	curity.ProviderType = typStr

	return CreateDcrProviderRequest{
		CreateDcrProviderRequestCurity: &curity,
		Type:                           typ,
	}
}

func CreateCreateDcrProviderRequestOkta(okta CreateDcrProviderRequestOkta) CreateDcrProviderRequest {
	typ := CreateDcrProviderRequestTypeOkta

	typStr := CreateDcrProviderRequestOktaProviderType(typ)
	okta.ProviderType = typStr

	return CreateDcrProviderRequest{
		CreateDcrProviderRequestOkta: &okta,
		Type:                         typ,
	}
}

func CreateCreateDcrProviderRequestHTTP(http CreateDcrProviderRequestHTTP) CreateDcrProviderRequest {
	typ := CreateDcrProviderRequestTypeHTTP

	typStr := CreateDcrProviderRequestHTTPProviderType(typ)
	http.ProviderType = typStr

	return CreateDcrProviderRequest{
		CreateDcrProviderRequestHTTP: &http,
		Type:                         typ,
	}
}

func (u *CreateDcrProviderRequest) UnmarshalJSON(data []byte) error {

	type discriminator struct {
		ProviderType string `json:"provider_type"`
	}

	dis := new(discriminator)
	if err := json.Unmarshal(data, &dis); err != nil {
		return fmt.Errorf("could not unmarshal discriminator: %w", err)
	}

	switch dis.ProviderType {
	case "auth0":
		createDcrProviderRequestAuth0 := new(CreateDcrProviderRequestAuth0)
		if err := utils.UnmarshalJSON(data, &createDcrProviderRequestAuth0, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (ProviderType == auth0) type CreateDcrProviderRequestAuth0 within CreateDcrProviderRequest: %w", string(data), err)
		}

		u.CreateDcrProviderRequestAuth0 = createDcrProviderRequestAuth0
		u.Type = CreateDcrProviderRequestTypeAuth0
		return nil
	case "azureAd":
		createDcrProviderRequestAzureAd := new(CreateDcrProviderRequestAzureAd)
		if err := utils.UnmarshalJSON(data, &createDcrProviderRequestAzureAd, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (ProviderType == azureAd) type CreateDcrProviderRequestAzureAd within CreateDcrProviderRequest: %w", string(data), err)
		}

		u.CreateDcrProviderRequestAzureAd = createDcrProviderRequestAzureAd
		u.Type = CreateDcrProviderRequestTypeAzureAd
		return nil
	case "curity":
		createDcrProviderRequestCurity := new(CreateDcrProviderRequestCurity)
		if err := utils.UnmarshalJSON(data, &createDcrProviderRequestCurity, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (ProviderType == curity) type CreateDcrProviderRequestCurity within CreateDcrProviderRequest: %w", string(data), err)
		}

		u.CreateDcrProviderRequestCurity = createDcrProviderRequestCurity
		u.Type = CreateDcrProviderRequestTypeCurity
		return nil
	case "okta":
		createDcrProviderRequestOkta := new(CreateDcrProviderRequestOkta)
		if err := utils.UnmarshalJSON(data, &createDcrProviderRequestOkta, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (ProviderType == okta) type CreateDcrProviderRequestOkta within CreateDcrProviderRequest: %w", string(data), err)
		}

		u.CreateDcrProviderRequestOkta = createDcrProviderRequestOkta
		u.Type = CreateDcrProviderRequestTypeOkta
		return nil
	case "http":
		createDcrProviderRequestHTTP := new(CreateDcrProviderRequestHTTP)
		if err := utils.UnmarshalJSON(data, &createDcrProviderRequestHTTP, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (ProviderType == http) type CreateDcrProviderRequestHTTP within CreateDcrProviderRequest: %w", string(data), err)
		}

		u.CreateDcrProviderRequestHTTP = createDcrProviderRequestHTTP
		u.Type = CreateDcrProviderRequestTypeHTTP
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CreateDcrProviderRequest", string(data))
}

func (u CreateDcrProviderRequest) MarshalJSON() ([]byte, error) {
	if u.CreateDcrProviderRequestAuth0 != nil {
		return utils.MarshalJSON(u.CreateDcrProviderRequestAuth0, "", true)
	}

	if u.CreateDcrProviderRequestAzureAd != nil {
		return utils.MarshalJSON(u.CreateDcrProviderRequestAzureAd, "", true)
	}

	if u.CreateDcrProviderRequestCurity != nil {
		return utils.MarshalJSON(u.CreateDcrProviderRequestCurity, "", true)
	}

	if u.CreateDcrProviderRequestOkta != nil {
		return utils.MarshalJSON(u.CreateDcrProviderRequestOkta, "", true)
	}

	if u.CreateDcrProviderRequestHTTP != nil {
		return utils.MarshalJSON(u.CreateDcrProviderRequestHTTP, "", true)
	}

	return nil, errors.New("could not marshal union type CreateDcrProviderRequest: all fields are null")
}
