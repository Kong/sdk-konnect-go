// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

type Status string

const (
	StatusSuccess Status = "success"
	StatusFailed  Status = "failed"
)

func (e Status) ToPointer() *Status {
	return &e
}
func (e *Status) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "success":
		fallthrough
	case "failed":
		*e = Status(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Status: %v", v)
	}
}

// VerifyDcrProviderResponse - A response containing the result of attempting to verify a DCR provider configuration.
type VerifyDcrProviderResponse struct {
	Status Status   `json:"status"`
	Errors []string `json:"errors"`
}

func (v *VerifyDcrProviderResponse) GetStatus() Status {
	if v == nil {
		return Status("")
	}
	return v.Status
}

func (v *VerifyDcrProviderResponse) GetErrors() []string {
	if v == nil {
		return []string{}
	}
	return v.Errors
}
