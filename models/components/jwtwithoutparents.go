// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

type JWTWithoutParentsAlgorithm string

const (
	JWTWithoutParentsAlgorithmHs256 JWTWithoutParentsAlgorithm = "HS256"
	JWTWithoutParentsAlgorithmHs384 JWTWithoutParentsAlgorithm = "HS384"
	JWTWithoutParentsAlgorithmHs512 JWTWithoutParentsAlgorithm = "HS512"
	JWTWithoutParentsAlgorithmRs256 JWTWithoutParentsAlgorithm = "RS256"
	JWTWithoutParentsAlgorithmRs384 JWTWithoutParentsAlgorithm = "RS384"
	JWTWithoutParentsAlgorithmRs512 JWTWithoutParentsAlgorithm = "RS512"
	JWTWithoutParentsAlgorithmEs256 JWTWithoutParentsAlgorithm = "ES256"
	JWTWithoutParentsAlgorithmEs384 JWTWithoutParentsAlgorithm = "ES384"
	JWTWithoutParentsAlgorithmEs512 JWTWithoutParentsAlgorithm = "ES512"
	JWTWithoutParentsAlgorithmPs256 JWTWithoutParentsAlgorithm = "PS256"
	JWTWithoutParentsAlgorithmPs384 JWTWithoutParentsAlgorithm = "PS384"
	JWTWithoutParentsAlgorithmPs512 JWTWithoutParentsAlgorithm = "PS512"
	JWTWithoutParentsAlgorithmEdDsa JWTWithoutParentsAlgorithm = "EdDSA"
)

func (e JWTWithoutParentsAlgorithm) ToPointer() *JWTWithoutParentsAlgorithm {
	return &e
}
func (e *JWTWithoutParentsAlgorithm) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "HS256":
		fallthrough
	case "HS384":
		fallthrough
	case "HS512":
		fallthrough
	case "RS256":
		fallthrough
	case "RS384":
		fallthrough
	case "RS512":
		fallthrough
	case "ES256":
		fallthrough
	case "ES384":
		fallthrough
	case "ES512":
		fallthrough
	case "PS256":
		fallthrough
	case "PS384":
		fallthrough
	case "PS512":
		fallthrough
	case "EdDSA":
		*e = JWTWithoutParentsAlgorithm(v)
		return nil
	default:
		return fmt.Errorf("invalid value for JWTWithoutParentsAlgorithm: %v", v)
	}
}

type JWTWithoutParentsConsumer struct {
	ID *string `json:"id,omitempty"`
}

func (o *JWTWithoutParentsConsumer) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

type JWTWithoutParents struct {
	Algorithm    *JWTWithoutParentsAlgorithm `json:"algorithm,omitempty"`
	Consumer     *JWTWithoutParentsConsumer  `json:"consumer,omitempty"`
	ID           *string                     `json:"id,omitempty"`
	Key          *string                     `json:"key,omitempty"`
	RsaPublicKey *string                     `json:"rsa_public_key,omitempty"`
	Secret       *string                     `json:"secret,omitempty"`
	Tags         []string                    `json:"tags,omitempty"`
}

func (o *JWTWithoutParents) GetAlgorithm() *JWTWithoutParentsAlgorithm {
	if o == nil {
		return nil
	}
	return o.Algorithm
}

func (o *JWTWithoutParents) GetConsumer() *JWTWithoutParentsConsumer {
	if o == nil {
		return nil
	}
	return o.Consumer
}

func (o *JWTWithoutParents) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *JWTWithoutParents) GetKey() *string {
	if o == nil {
		return nil
	}
	return o.Key
}

func (o *JWTWithoutParents) GetRsaPublicKey() *string {
	if o == nil {
		return nil
	}
	return o.RsaPublicKey
}

func (o *JWTWithoutParents) GetSecret() *string {
	if o == nil {
		return nil
	}
	return o.Secret
}

func (o *JWTWithoutParents) GetTags() []string {
	if o == nil {
		return nil
	}
	return o.Tags
}
