// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"errors"
	"fmt"
	"github.com/Kong/sdk-konnect-go/internal/utils"
)

type RouteWithoutParentsType string

const (
	RouteWithoutParentsTypeRouteJSON       RouteWithoutParentsType = "RouteJson"
	RouteWithoutParentsTypeRouteExpression RouteWithoutParentsType = "RouteExpression"
)

type RouteWithoutParents struct {
	RouteJSON       *RouteJSON       `queryParam:"inline,name=RouteWithoutParents"`
	RouteExpression *RouteExpression `queryParam:"inline,name=RouteWithoutParents"`

	Type RouteWithoutParentsType
}

func CreateRouteWithoutParentsRouteJSON(routeJSON RouteJSON) RouteWithoutParents {
	typ := RouteWithoutParentsTypeRouteJSON

	return RouteWithoutParents{
		RouteJSON: &routeJSON,
		Type:      typ,
	}
}

func CreateRouteWithoutParentsRouteExpression(routeExpression RouteExpression) RouteWithoutParents {
	typ := RouteWithoutParentsTypeRouteExpression

	return RouteWithoutParents{
		RouteExpression: &routeExpression,
		Type:            typ,
	}
}

func (u *RouteWithoutParents) UnmarshalJSON(data []byte) error {

	var routeJSON RouteJSON = RouteJSON{}
	if err := utils.UnmarshalJSON(data, &routeJSON, "", true, nil); err == nil {
		u.RouteJSON = &routeJSON
		u.Type = RouteWithoutParentsTypeRouteJSON
		return nil
	}

	var routeExpression RouteExpression = RouteExpression{}
	if err := utils.UnmarshalJSON(data, &routeExpression, "", true, nil); err == nil {
		u.RouteExpression = &routeExpression
		u.Type = RouteWithoutParentsTypeRouteExpression
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for RouteWithoutParents", string(data))
}

func (u RouteWithoutParents) MarshalJSON() ([]byte, error) {
	if u.RouteJSON != nil {
		return utils.MarshalJSON(u.RouteJSON, "", true)
	}

	if u.RouteExpression != nil {
		return utils.MarshalJSON(u.RouteExpression, "", true)
	}

	return nil, errors.New("could not marshal union type RouteWithoutParents: all fields are null")
}
