// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/Kong/sdk-konnect-go/internal/utils"
	"time"
)

// DcrProviderHTTPDcrConfig - The DCR configuration for this DCR provider.
type DcrProviderHTTPDcrConfig struct {
}

func (d DcrProviderHTTPDcrConfig) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DcrProviderHTTPDcrConfig) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, nil); err != nil {
		return err
	}
	return nil
}

// DCRProviderHTTP - A DCR provider for HTTP -- only properties not included in DcrProviderBase
type DCRProviderHTTP struct {
	// The type of DCR provider. Can be one of the following - auth0, azureAd, curity, okta, http
	ProviderType string `json:"provider_type"`
	// The DCR configuration for this DCR provider.
	DcrConfig DcrProviderHTTPDcrConfig `json:"dcr_config"`
	// Contains a unique identifier used for this resource.
	ID string `json:"id"`
	// The name of the DCR provider. This is used to identify the DCR provider in the Konnect UI.
	//
	Name string `json:"name"`
	// The display name of the DCR provider. This is used to identify the DCR provider in the Portal UI.
	//
	DisplayName *string `json:"display_name,omitempty"`
	// The issuer of the DCR provider.
	Issuer string `json:"issuer"`
	// At least one active auth strategy is using this DCR provider.
	Active bool `json:"active"`
	// Labels store metadata of an entity that can be used for filtering an entity list or for searching across entity types.
	//
	// Keys must be of length 1-63 characters, and cannot start with "kong", "konnect", "mesh", "kic", or "_".
	//
	Labels map[string]string `json:"labels,omitempty"`
	// An ISO-8601 timestamp representation of entity creation date.
	CreatedAt time.Time `json:"created_at"`
	// An ISO-8601 timestamp representation of entity update date.
	UpdatedAt time.Time `json:"updated_at"`
}

func (d DCRProviderHTTP) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DCRProviderHTTP) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, []string{"provider_type", "dcr_config", "id", "name", "issuer", "active", "created_at", "updated_at"}); err != nil {
		return err
	}
	return nil
}

func (d *DCRProviderHTTP) GetProviderType() string {
	if d == nil {
		return ""
	}
	return d.ProviderType
}

func (d *DCRProviderHTTP) GetDcrConfig() DcrProviderHTTPDcrConfig {
	if d == nil {
		return DcrProviderHTTPDcrConfig{}
	}
	return d.DcrConfig
}

func (d *DCRProviderHTTP) GetID() string {
	if d == nil {
		return ""
	}
	return d.ID
}

func (d *DCRProviderHTTP) GetName() string {
	if d == nil {
		return ""
	}
	return d.Name
}

func (d *DCRProviderHTTP) GetDisplayName() *string {
	if d == nil {
		return nil
	}
	return d.DisplayName
}

func (d *DCRProviderHTTP) GetIssuer() string {
	if d == nil {
		return ""
	}
	return d.Issuer
}

func (d *DCRProviderHTTP) GetActive() bool {
	if d == nil {
		return false
	}
	return d.Active
}

func (d *DCRProviderHTTP) GetLabels() map[string]string {
	if d == nil {
		return nil
	}
	return d.Labels
}

func (d *DCRProviderHTTP) GetCreatedAt() time.Time {
	if d == nil {
		return time.Time{}
	}
	return d.CreatedAt
}

func (d *DCRProviderHTTP) GetUpdatedAt() time.Time {
	if d == nil {
		return time.Time{}
	}
	return d.UpdatedAt
}

// DcrProviderOktaDcrConfig - The DCR configuration for this DCR provider.
type DcrProviderOktaDcrConfig struct {
}

func (d DcrProviderOktaDcrConfig) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DcrProviderOktaDcrConfig) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, nil); err != nil {
		return err
	}
	return nil
}

// DCRProviderOKTA - A DCR provider for Okta -- only properties not included in DcrProviderBase
type DCRProviderOKTA struct {
	// The type of DCR provider. Can be one of the following - auth0, azureAd, curity, okta, http
	ProviderType string `json:"provider_type"`
	// The DCR configuration for this DCR provider.
	DcrConfig DcrProviderOktaDcrConfig `json:"dcr_config"`
	// Contains a unique identifier used for this resource.
	ID string `json:"id"`
	// The name of the DCR provider. This is used to identify the DCR provider in the Konnect UI.
	//
	Name string `json:"name"`
	// The display name of the DCR provider. This is used to identify the DCR provider in the Portal UI.
	//
	DisplayName *string `json:"display_name,omitempty"`
	// The issuer of the DCR provider.
	Issuer string `json:"issuer"`
	// At least one active auth strategy is using this DCR provider.
	Active bool `json:"active"`
	// Labels store metadata of an entity that can be used for filtering an entity list or for searching across entity types.
	//
	// Keys must be of length 1-63 characters, and cannot start with "kong", "konnect", "mesh", "kic", or "_".
	//
	Labels map[string]string `json:"labels,omitempty"`
	// An ISO-8601 timestamp representation of entity creation date.
	CreatedAt time.Time `json:"created_at"`
	// An ISO-8601 timestamp representation of entity update date.
	UpdatedAt time.Time `json:"updated_at"`
}

func (d DCRProviderOKTA) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DCRProviderOKTA) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, []string{"provider_type", "dcr_config", "id", "name", "issuer", "active", "created_at", "updated_at"}); err != nil {
		return err
	}
	return nil
}

func (d *DCRProviderOKTA) GetProviderType() string {
	if d == nil {
		return ""
	}
	return d.ProviderType
}

func (d *DCRProviderOKTA) GetDcrConfig() DcrProviderOktaDcrConfig {
	if d == nil {
		return DcrProviderOktaDcrConfig{}
	}
	return d.DcrConfig
}

func (d *DCRProviderOKTA) GetID() string {
	if d == nil {
		return ""
	}
	return d.ID
}

func (d *DCRProviderOKTA) GetName() string {
	if d == nil {
		return ""
	}
	return d.Name
}

func (d *DCRProviderOKTA) GetDisplayName() *string {
	if d == nil {
		return nil
	}
	return d.DisplayName
}

func (d *DCRProviderOKTA) GetIssuer() string {
	if d == nil {
		return ""
	}
	return d.Issuer
}

func (d *DCRProviderOKTA) GetActive() bool {
	if d == nil {
		return false
	}
	return d.Active
}

func (d *DCRProviderOKTA) GetLabels() map[string]string {
	if d == nil {
		return nil
	}
	return d.Labels
}

func (d *DCRProviderOKTA) GetCreatedAt() time.Time {
	if d == nil {
		return time.Time{}
	}
	return d.CreatedAt
}

func (d *DCRProviderOKTA) GetUpdatedAt() time.Time {
	if d == nil {
		return time.Time{}
	}
	return d.UpdatedAt
}

// DcrProviderCurityDcrConfig - The DCR configuration for this DCR provider.
type DcrProviderCurityDcrConfig struct {
}

func (d DcrProviderCurityDcrConfig) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DcrProviderCurityDcrConfig) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, nil); err != nil {
		return err
	}
	return nil
}

// DCRProviderCurity - A DCR provider for Curity -- only properties not included in DcrProviderBase
type DCRProviderCurity struct {
	// The type of DCR provider. Can be one of the following - auth0, azureAd, curity, okta, http
	ProviderType string `json:"provider_type"`
	// The DCR configuration for this DCR provider.
	DcrConfig DcrProviderCurityDcrConfig `json:"dcr_config"`
	// Contains a unique identifier used for this resource.
	ID string `json:"id"`
	// The name of the DCR provider. This is used to identify the DCR provider in the Konnect UI.
	//
	Name string `json:"name"`
	// The display name of the DCR provider. This is used to identify the DCR provider in the Portal UI.
	//
	DisplayName *string `json:"display_name,omitempty"`
	// The issuer of the DCR provider.
	Issuer string `json:"issuer"`
	// At least one active auth strategy is using this DCR provider.
	Active bool `json:"active"`
	// Labels store metadata of an entity that can be used for filtering an entity list or for searching across entity types.
	//
	// Keys must be of length 1-63 characters, and cannot start with "kong", "konnect", "mesh", "kic", or "_".
	//
	Labels map[string]string `json:"labels,omitempty"`
	// An ISO-8601 timestamp representation of entity creation date.
	CreatedAt time.Time `json:"created_at"`
	// An ISO-8601 timestamp representation of entity update date.
	UpdatedAt time.Time `json:"updated_at"`
}

func (d DCRProviderCurity) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DCRProviderCurity) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, []string{"provider_type", "dcr_config", "id", "name", "issuer", "active", "created_at", "updated_at"}); err != nil {
		return err
	}
	return nil
}

func (d *DCRProviderCurity) GetProviderType() string {
	if d == nil {
		return ""
	}
	return d.ProviderType
}

func (d *DCRProviderCurity) GetDcrConfig() DcrProviderCurityDcrConfig {
	if d == nil {
		return DcrProviderCurityDcrConfig{}
	}
	return d.DcrConfig
}

func (d *DCRProviderCurity) GetID() string {
	if d == nil {
		return ""
	}
	return d.ID
}

func (d *DCRProviderCurity) GetName() string {
	if d == nil {
		return ""
	}
	return d.Name
}

func (d *DCRProviderCurity) GetDisplayName() *string {
	if d == nil {
		return nil
	}
	return d.DisplayName
}

func (d *DCRProviderCurity) GetIssuer() string {
	if d == nil {
		return ""
	}
	return d.Issuer
}

func (d *DCRProviderCurity) GetActive() bool {
	if d == nil {
		return false
	}
	return d.Active
}

func (d *DCRProviderCurity) GetLabels() map[string]string {
	if d == nil {
		return nil
	}
	return d.Labels
}

func (d *DCRProviderCurity) GetCreatedAt() time.Time {
	if d == nil {
		return time.Time{}
	}
	return d.CreatedAt
}

func (d *DCRProviderCurity) GetUpdatedAt() time.Time {
	if d == nil {
		return time.Time{}
	}
	return d.UpdatedAt
}

// DcrProviderAzureAdDcrConfig - The DCR configuration for this DCR provider.
type DcrProviderAzureAdDcrConfig struct {
}

func (d DcrProviderAzureAdDcrConfig) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DcrProviderAzureAdDcrConfig) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, nil); err != nil {
		return err
	}
	return nil
}

// DCRProviderAzureAD - A DCR provider for Azure AD -- only properties not included in DcrProviderBase
type DCRProviderAzureAD struct {
	// The type of DCR provider. Can be one of the following - auth0, azureAd, curity, okta, http
	ProviderType string `json:"provider_type"`
	// The DCR configuration for this DCR provider.
	DcrConfig DcrProviderAzureAdDcrConfig `json:"dcr_config"`
	// Contains a unique identifier used for this resource.
	ID string `json:"id"`
	// The name of the DCR provider. This is used to identify the DCR provider in the Konnect UI.
	//
	Name string `json:"name"`
	// The display name of the DCR provider. This is used to identify the DCR provider in the Portal UI.
	//
	DisplayName *string `json:"display_name,omitempty"`
	// The issuer of the DCR provider.
	Issuer string `json:"issuer"`
	// At least one active auth strategy is using this DCR provider.
	Active bool `json:"active"`
	// Labels store metadata of an entity that can be used for filtering an entity list or for searching across entity types.
	//
	// Keys must be of length 1-63 characters, and cannot start with "kong", "konnect", "mesh", "kic", or "_".
	//
	Labels map[string]string `json:"labels,omitempty"`
	// An ISO-8601 timestamp representation of entity creation date.
	CreatedAt time.Time `json:"created_at"`
	// An ISO-8601 timestamp representation of entity update date.
	UpdatedAt time.Time `json:"updated_at"`
}

func (d DCRProviderAzureAD) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DCRProviderAzureAD) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, []string{"provider_type", "dcr_config", "id", "name", "issuer", "active", "created_at", "updated_at"}); err != nil {
		return err
	}
	return nil
}

func (d *DCRProviderAzureAD) GetProviderType() string {
	if d == nil {
		return ""
	}
	return d.ProviderType
}

func (d *DCRProviderAzureAD) GetDcrConfig() DcrProviderAzureAdDcrConfig {
	if d == nil {
		return DcrProviderAzureAdDcrConfig{}
	}
	return d.DcrConfig
}

func (d *DCRProviderAzureAD) GetID() string {
	if d == nil {
		return ""
	}
	return d.ID
}

func (d *DCRProviderAzureAD) GetName() string {
	if d == nil {
		return ""
	}
	return d.Name
}

func (d *DCRProviderAzureAD) GetDisplayName() *string {
	if d == nil {
		return nil
	}
	return d.DisplayName
}

func (d *DCRProviderAzureAD) GetIssuer() string {
	if d == nil {
		return ""
	}
	return d.Issuer
}

func (d *DCRProviderAzureAD) GetActive() bool {
	if d == nil {
		return false
	}
	return d.Active
}

func (d *DCRProviderAzureAD) GetLabels() map[string]string {
	if d == nil {
		return nil
	}
	return d.Labels
}

func (d *DCRProviderAzureAD) GetCreatedAt() time.Time {
	if d == nil {
		return time.Time{}
	}
	return d.CreatedAt
}

func (d *DCRProviderAzureAD) GetUpdatedAt() time.Time {
	if d == nil {
		return time.Time{}
	}
	return d.UpdatedAt
}

// DcrProviderAuth0CreateDcrProviderResponseDcrConfig - The DCR configuration for this DCR provider.
type DcrProviderAuth0CreateDcrProviderResponseDcrConfig struct {
}

func (d DcrProviderAuth0CreateDcrProviderResponseDcrConfig) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DcrProviderAuth0CreateDcrProviderResponseDcrConfig) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, nil); err != nil {
		return err
	}
	return nil
}

// DCRProviderAuth0 - A DCR provider for Auth0 -- only properties not included in DcrProviderBase
type DCRProviderAuth0 struct {
	// The type of DCR provider. Can be one of the following - auth0, azureAd, curity, okta, http
	ProviderType string `json:"provider_type"`
	// The DCR configuration for this DCR provider.
	DcrConfig DcrProviderAuth0CreateDcrProviderResponseDcrConfig `json:"dcr_config"`
	// Contains a unique identifier used for this resource.
	ID string `json:"id"`
	// The name of the DCR provider. This is used to identify the DCR provider in the Konnect UI.
	//
	Name string `json:"name"`
	// The display name of the DCR provider. This is used to identify the DCR provider in the Portal UI.
	//
	DisplayName *string `json:"display_name,omitempty"`
	// The issuer of the DCR provider.
	Issuer string `json:"issuer"`
	// At least one active auth strategy is using this DCR provider.
	Active bool `json:"active"`
	// Labels store metadata of an entity that can be used for filtering an entity list or for searching across entity types.
	//
	// Keys must be of length 1-63 characters, and cannot start with "kong", "konnect", "mesh", "kic", or "_".
	//
	Labels map[string]string `json:"labels,omitempty"`
	// An ISO-8601 timestamp representation of entity creation date.
	CreatedAt time.Time `json:"created_at"`
	// An ISO-8601 timestamp representation of entity update date.
	UpdatedAt time.Time `json:"updated_at"`
}

func (d DCRProviderAuth0) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DCRProviderAuth0) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, []string{"provider_type", "dcr_config", "id", "name", "issuer", "active", "created_at", "updated_at"}); err != nil {
		return err
	}
	return nil
}

func (d *DCRProviderAuth0) GetProviderType() string {
	if d == nil {
		return ""
	}
	return d.ProviderType
}

func (d *DCRProviderAuth0) GetDcrConfig() DcrProviderAuth0CreateDcrProviderResponseDcrConfig {
	if d == nil {
		return DcrProviderAuth0CreateDcrProviderResponseDcrConfig{}
	}
	return d.DcrConfig
}

func (d *DCRProviderAuth0) GetID() string {
	if d == nil {
		return ""
	}
	return d.ID
}

func (d *DCRProviderAuth0) GetName() string {
	if d == nil {
		return ""
	}
	return d.Name
}

func (d *DCRProviderAuth0) GetDisplayName() *string {
	if d == nil {
		return nil
	}
	return d.DisplayName
}

func (d *DCRProviderAuth0) GetIssuer() string {
	if d == nil {
		return ""
	}
	return d.Issuer
}

func (d *DCRProviderAuth0) GetActive() bool {
	if d == nil {
		return false
	}
	return d.Active
}

func (d *DCRProviderAuth0) GetLabels() map[string]string {
	if d == nil {
		return nil
	}
	return d.Labels
}

func (d *DCRProviderAuth0) GetCreatedAt() time.Time {
	if d == nil {
		return time.Time{}
	}
	return d.CreatedAt
}

func (d *DCRProviderAuth0) GetUpdatedAt() time.Time {
	if d == nil {
		return time.Time{}
	}
	return d.UpdatedAt
}

type CreateDcrProviderResponseType string

const (
	CreateDcrProviderResponseTypeDcrProviderAuth0   CreateDcrProviderResponseType = "DcrProviderAuth0"
	CreateDcrProviderResponseTypeDcrProviderAzureAd CreateDcrProviderResponseType = "DcrProviderAzureAd"
	CreateDcrProviderResponseTypeDcrProviderCurity  CreateDcrProviderResponseType = "DcrProviderCurity"
	CreateDcrProviderResponseTypeDcrProviderOkta    CreateDcrProviderResponseType = "DcrProviderOkta"
	CreateDcrProviderResponseTypeDcrProviderHTTP    CreateDcrProviderResponseType = "DcrProviderHttp"
)

// CreateDcrProviderResponse - A response containing the newly created DCR provider object.
type CreateDcrProviderResponse struct {
	DCRProviderAuth0   *DCRProviderAuth0   `queryParam:"inline,name=CreateDcrProviderResponse"`
	DCRProviderAzureAD *DCRProviderAzureAD `queryParam:"inline,name=CreateDcrProviderResponse"`
	DCRProviderCurity  *DCRProviderCurity  `queryParam:"inline,name=CreateDcrProviderResponse"`
	DCRProviderOKTA    *DCRProviderOKTA    `queryParam:"inline,name=CreateDcrProviderResponse"`
	DCRProviderHTTP    *DCRProviderHTTP    `queryParam:"inline,name=CreateDcrProviderResponse"`

	Type CreateDcrProviderResponseType
}

func CreateCreateDcrProviderResponseDcrProviderAuth0(dcrProviderAuth0 DCRProviderAuth0) CreateDcrProviderResponse {
	typ := CreateDcrProviderResponseTypeDcrProviderAuth0

	typStr := string(typ)
	dcrProviderAuth0.ProviderType = typStr

	return CreateDcrProviderResponse{
		DCRProviderAuth0: &dcrProviderAuth0,
		Type:             typ,
	}
}

func CreateCreateDcrProviderResponseDcrProviderAzureAd(dcrProviderAzureAd DCRProviderAzureAD) CreateDcrProviderResponse {
	typ := CreateDcrProviderResponseTypeDcrProviderAzureAd

	typStr := string(typ)
	dcrProviderAzureAd.ProviderType = typStr

	return CreateDcrProviderResponse{
		DCRProviderAzureAD: &dcrProviderAzureAd,
		Type:               typ,
	}
}

func CreateCreateDcrProviderResponseDcrProviderCurity(dcrProviderCurity DCRProviderCurity) CreateDcrProviderResponse {
	typ := CreateDcrProviderResponseTypeDcrProviderCurity

	typStr := string(typ)
	dcrProviderCurity.ProviderType = typStr

	return CreateDcrProviderResponse{
		DCRProviderCurity: &dcrProviderCurity,
		Type:              typ,
	}
}

func CreateCreateDcrProviderResponseDcrProviderOkta(dcrProviderOkta DCRProviderOKTA) CreateDcrProviderResponse {
	typ := CreateDcrProviderResponseTypeDcrProviderOkta

	typStr := string(typ)
	dcrProviderOkta.ProviderType = typStr

	return CreateDcrProviderResponse{
		DCRProviderOKTA: &dcrProviderOkta,
		Type:            typ,
	}
}

func CreateCreateDcrProviderResponseDcrProviderHTTP(dcrProviderHTTP DCRProviderHTTP) CreateDcrProviderResponse {
	typ := CreateDcrProviderResponseTypeDcrProviderHTTP

	typStr := string(typ)
	dcrProviderHTTP.ProviderType = typStr

	return CreateDcrProviderResponse{
		DCRProviderHTTP: &dcrProviderHTTP,
		Type:            typ,
	}
}

func (u *CreateDcrProviderResponse) UnmarshalJSON(data []byte) error {

	type discriminator struct {
		ProviderType string `json:"provider_type"`
	}

	dis := new(discriminator)
	if err := json.Unmarshal(data, &dis); err != nil {
		return fmt.Errorf("could not unmarshal discriminator: %w", err)
	}

	switch dis.ProviderType {
	case "DcrProviderAuth0":
		dcrProviderAuth0 := new(DCRProviderAuth0)
		if err := utils.UnmarshalJSON(data, &dcrProviderAuth0, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (ProviderType == DcrProviderAuth0) type DCRProviderAuth0 within CreateDcrProviderResponse: %w", string(data), err)
		}

		u.DCRProviderAuth0 = dcrProviderAuth0
		u.Type = CreateDcrProviderResponseTypeDcrProviderAuth0
		return nil
	case "DcrProviderAzureAd":
		dcrProviderAzureAD := new(DCRProviderAzureAD)
		if err := utils.UnmarshalJSON(data, &dcrProviderAzureAD, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (ProviderType == DcrProviderAzureAd) type DCRProviderAzureAD within CreateDcrProviderResponse: %w", string(data), err)
		}

		u.DCRProviderAzureAD = dcrProviderAzureAD
		u.Type = CreateDcrProviderResponseTypeDcrProviderAzureAd
		return nil
	case "DcrProviderCurity":
		dcrProviderCurity := new(DCRProviderCurity)
		if err := utils.UnmarshalJSON(data, &dcrProviderCurity, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (ProviderType == DcrProviderCurity) type DCRProviderCurity within CreateDcrProviderResponse: %w", string(data), err)
		}

		u.DCRProviderCurity = dcrProviderCurity
		u.Type = CreateDcrProviderResponseTypeDcrProviderCurity
		return nil
	case "DcrProviderOkta":
		dcrProviderOKTA := new(DCRProviderOKTA)
		if err := utils.UnmarshalJSON(data, &dcrProviderOKTA, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (ProviderType == DcrProviderOkta) type DCRProviderOKTA within CreateDcrProviderResponse: %w", string(data), err)
		}

		u.DCRProviderOKTA = dcrProviderOKTA
		u.Type = CreateDcrProviderResponseTypeDcrProviderOkta
		return nil
	case "DcrProviderHttp":
		dcrProviderHTTP := new(DCRProviderHTTP)
		if err := utils.UnmarshalJSON(data, &dcrProviderHTTP, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (ProviderType == DcrProviderHttp) type DCRProviderHTTP within CreateDcrProviderResponse: %w", string(data), err)
		}

		u.DCRProviderHTTP = dcrProviderHTTP
		u.Type = CreateDcrProviderResponseTypeDcrProviderHTTP
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CreateDcrProviderResponse", string(data))
}

func (u CreateDcrProviderResponse) MarshalJSON() ([]byte, error) {
	if u.DCRProviderAuth0 != nil {
		return utils.MarshalJSON(u.DCRProviderAuth0, "", true)
	}

	if u.DCRProviderAzureAD != nil {
		return utils.MarshalJSON(u.DCRProviderAzureAD, "", true)
	}

	if u.DCRProviderCurity != nil {
		return utils.MarshalJSON(u.DCRProviderCurity, "", true)
	}

	if u.DCRProviderOKTA != nil {
		return utils.MarshalJSON(u.DCRProviderOKTA, "", true)
	}

	if u.DCRProviderHTTP != nil {
		return utils.MarshalJSON(u.DCRProviderHTTP, "", true)
	}

	return nil, errors.New("could not marshal union type CreateDcrProviderResponse: all fields are null")
}
