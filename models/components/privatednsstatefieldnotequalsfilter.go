// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"github.com/Kong/sdk-konnect-go/internal/utils"
)

// PrivateDNSStateFieldNotEqualsFilter - Filter private-dns state by inequality match.
type PrivateDNSStateFieldNotEqualsFilter struct {
	// The current state of the Private DNS attachment. Possible values:
	// - `created` - The attachment has been created but is not attached to Private DNS.
	// - `initializing` - The attachment is in the process of being initialized and is setting up necessary resources.
	// - `pending-association` The attachment request is awaiting association to the cloud provider infrastructure in order for provisioning to proceed.
	// - `ready` - The attachment is fully operational and can route traffic as configured.
	// - `error` - The attachment is in an error state, and is not operational.
	// - `terminating` - The attachment is in the process of being deleted.
	// - `terminated` - The attachment has been fully deleted and is no longer available.
	//
	Neq PrivateDNSState `queryParam:"name=neq"`
}

func (p PrivateDNSStateFieldNotEqualsFilter) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *PrivateDNSStateFieldNotEqualsFilter) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, []string{"neq"}); err != nil {
		return err
	}
	return nil
}

func (p *PrivateDNSStateFieldNotEqualsFilter) GetNeq() PrivateDNSState {
	if p == nil {
		return PrivateDNSState("")
	}
	return p.Neq
}
